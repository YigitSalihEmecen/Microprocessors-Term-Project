
micro_redemption.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000416c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800422c  0800422c  0000522c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042a0  080042a0  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080042a0  080042a0  0000605c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080042a0  080042a0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042a0  080042a0  000052a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042a4  080042a4  000052a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080042a8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000620  2000005c  08004304  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  08004304  0000667c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115bc  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028de  00000000  00000000  00017640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00019f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d78  00000000  00000000  0001b078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7a7  00000000  00000000  0001bdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152d5  00000000  00000000  00037597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a052f  00000000  00000000  0004c86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ecd9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004384  00000000  00000000  000ecde0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000f1164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004214 	.word	0x08004214

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08004214 	.word	0x08004214

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1; // Burada I2C1 kullanıyoruz

#define SLAVE_ADDRESS_LCD 0x4E // I2C address -> bazen 0x4E, bazen 0x3F olabilir, ayarla

void lcd_send_cmd (char cmd)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b087      	sub	sp, #28
 8000238:	af02      	add	r7, sp, #8
 800023a:	0002      	movs	r2, r0
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
  uint8_t data_t[4];
  data_u = (cmd&0xf0);
 8000240:	200f      	movs	r0, #15
 8000242:	183b      	adds	r3, r7, r0
 8000244:	1dfa      	adds	r2, r7, #7
 8000246:	7812      	ldrb	r2, [r2, #0]
 8000248:	210f      	movs	r1, #15
 800024a:	438a      	bics	r2, r1
 800024c:	701a      	strb	r2, [r3, #0]
  data_l = ((cmd<<4)&0xf0);
 800024e:	240e      	movs	r4, #14
 8000250:	193b      	adds	r3, r7, r4
 8000252:	1dfa      	adds	r2, r7, #7
 8000254:	7812      	ldrb	r2, [r2, #0]
 8000256:	0112      	lsls	r2, r2, #4
 8000258:	701a      	strb	r2, [r3, #0]
  data_t[0] = data_u|0x0C;
 800025a:	183b      	adds	r3, r7, r0
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	220c      	movs	r2, #12
 8000260:	4313      	orrs	r3, r2
 8000262:	b2da      	uxtb	r2, r3
 8000264:	2108      	movs	r1, #8
 8000266:	187b      	adds	r3, r7, r1
 8000268:	701a      	strb	r2, [r3, #0]
  data_t[1] = data_u|0x08;
 800026a:	183b      	adds	r3, r7, r0
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	2208      	movs	r2, #8
 8000270:	4313      	orrs	r3, r2
 8000272:	b2da      	uxtb	r2, r3
 8000274:	187b      	adds	r3, r7, r1
 8000276:	705a      	strb	r2, [r3, #1]
  data_t[2] = data_l|0x0C;
 8000278:	193b      	adds	r3, r7, r4
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	220c      	movs	r2, #12
 800027e:	4313      	orrs	r3, r2
 8000280:	b2da      	uxtb	r2, r3
 8000282:	187b      	adds	r3, r7, r1
 8000284:	709a      	strb	r2, [r3, #2]
  data_t[3] = data_l|0x08;
 8000286:	193b      	adds	r3, r7, r4
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2208      	movs	r2, #8
 800028c:	4313      	orrs	r3, r2
 800028e:	b2da      	uxtb	r2, r3
 8000290:	187b      	adds	r3, r7, r1
 8000292:	70da      	strb	r2, [r3, #3]
  HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, data_t, 4, 100);
 8000294:	187a      	adds	r2, r7, r1
 8000296:	4805      	ldr	r0, [pc, #20]	@ (80002ac <lcd_send_cmd+0x78>)
 8000298:	2364      	movs	r3, #100	@ 0x64
 800029a:	9300      	str	r3, [sp, #0]
 800029c:	2304      	movs	r3, #4
 800029e:	214e      	movs	r1, #78	@ 0x4e
 80002a0:	f001 fdc4 	bl	8001e2c <HAL_I2C_Master_Transmit>
}
 80002a4:	46c0      	nop			@ (mov r8, r8)
 80002a6:	46bd      	mov	sp, r7
 80002a8:	b005      	add	sp, #20
 80002aa:	bd90      	pop	{r4, r7, pc}
 80002ac:	200000b8 	.word	0x200000b8

080002b0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b087      	sub	sp, #28
 80002b4:	af02      	add	r7, sp, #8
 80002b6:	0002      	movs	r2, r0
 80002b8:	1dfb      	adds	r3, r7, #7
 80002ba:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
  uint8_t data_t[4];
  data_u = (data&0xf0);
 80002bc:	200f      	movs	r0, #15
 80002be:	183b      	adds	r3, r7, r0
 80002c0:	1dfa      	adds	r2, r7, #7
 80002c2:	7812      	ldrb	r2, [r2, #0]
 80002c4:	210f      	movs	r1, #15
 80002c6:	438a      	bics	r2, r1
 80002c8:	701a      	strb	r2, [r3, #0]
  data_l = ((data<<4)&0xf0);
 80002ca:	240e      	movs	r4, #14
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	1dfa      	adds	r2, r7, #7
 80002d0:	7812      	ldrb	r2, [r2, #0]
 80002d2:	0112      	lsls	r2, r2, #4
 80002d4:	701a      	strb	r2, [r3, #0]
  data_t[0] = data_u|0x0D;
 80002d6:	183b      	adds	r3, r7, r0
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	220d      	movs	r2, #13
 80002dc:	4313      	orrs	r3, r2
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	2108      	movs	r1, #8
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	701a      	strb	r2, [r3, #0]
  data_t[1] = data_u|0x09;
 80002e6:	183b      	adds	r3, r7, r0
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2209      	movs	r2, #9
 80002ec:	4313      	orrs	r3, r2
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	705a      	strb	r2, [r3, #1]
  data_t[2] = data_l|0x0D;
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	220d      	movs	r2, #13
 80002fa:	4313      	orrs	r3, r2
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	709a      	strb	r2, [r3, #2]
  data_t[3] = data_l|0x09;
 8000302:	193b      	adds	r3, r7, r4
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2209      	movs	r2, #9
 8000308:	4313      	orrs	r3, r2
 800030a:	b2da      	uxtb	r2, r3
 800030c:	187b      	adds	r3, r7, r1
 800030e:	70da      	strb	r2, [r3, #3]
  HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, data_t, 4, 100);
 8000310:	187a      	adds	r2, r7, r1
 8000312:	4805      	ldr	r0, [pc, #20]	@ (8000328 <lcd_send_data+0x78>)
 8000314:	2364      	movs	r3, #100	@ 0x64
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2304      	movs	r3, #4
 800031a:	214e      	movs	r1, #78	@ 0x4e
 800031c:	f001 fd86 	bl	8001e2c <HAL_I2C_Master_Transmit>
}
 8000320:	46c0      	nop			@ (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	b005      	add	sp, #20
 8000326:	bd90      	pop	{r4, r7, pc}
 8000328:	200000b8 	.word	0x200000b8

0800032c <lcd_clear>:

void lcd_clear (void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  lcd_send_cmd(0x01);
 8000330:	2001      	movs	r0, #1
 8000332:	f7ff ff7f 	bl	8000234 <lcd_send_cmd>
  HAL_Delay(2);
 8000336:	2002      	movs	r0, #2
 8000338:	f000 fe9a 	bl	8001070 <HAL_Delay>
}
 800033c:	46c0      	nop			@ (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}

08000342 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000342:	b580      	push	{r7, lr}
 8000344:	b082      	sub	sp, #8
 8000346:	af00      	add	r7, sp, #0
 8000348:	6078      	str	r0, [r7, #4]
 800034a:	6039      	str	r1, [r7, #0]
  switch (row)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2b03      	cmp	r3, #3
 8000350:	d027      	beq.n	80003a2 <lcd_put_cur+0x60>
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2b03      	cmp	r3, #3
 8000356:	dc2c      	bgt.n	80003b2 <lcd_put_cur+0x70>
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b02      	cmp	r3, #2
 800035c:	d019      	beq.n	8000392 <lcd_put_cur+0x50>
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2b02      	cmp	r3, #2
 8000362:	dc26      	bgt.n	80003b2 <lcd_put_cur+0x70>
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d003      	beq.n	8000372 <lcd_put_cur+0x30>
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2b01      	cmp	r3, #1
 800036e:	d008      	beq.n	8000382 <lcd_put_cur+0x40>
      break;
    case 3:
      lcd_send_cmd (0xD4 + col);
      break;
  }
}
 8000370:	e01f      	b.n	80003b2 <lcd_put_cur+0x70>
      lcd_send_cmd (0x80 + col);
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	b2db      	uxtb	r3, r3
 8000376:	3b80      	subs	r3, #128	@ 0x80
 8000378:	b2db      	uxtb	r3, r3
 800037a:	0018      	movs	r0, r3
 800037c:	f7ff ff5a 	bl	8000234 <lcd_send_cmd>
      break;
 8000380:	e017      	b.n	80003b2 <lcd_put_cur+0x70>
      lcd_send_cmd (0xC0 + col);
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	b2db      	uxtb	r3, r3
 8000386:	3b40      	subs	r3, #64	@ 0x40
 8000388:	b2db      	uxtb	r3, r3
 800038a:	0018      	movs	r0, r3
 800038c:	f7ff ff52 	bl	8000234 <lcd_send_cmd>
      break;
 8000390:	e00f      	b.n	80003b2 <lcd_put_cur+0x70>
      lcd_send_cmd (0x94 + col);
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	b2db      	uxtb	r3, r3
 8000396:	3b6c      	subs	r3, #108	@ 0x6c
 8000398:	b2db      	uxtb	r3, r3
 800039a:	0018      	movs	r0, r3
 800039c:	f7ff ff4a 	bl	8000234 <lcd_send_cmd>
      break;
 80003a0:	e007      	b.n	80003b2 <lcd_put_cur+0x70>
      lcd_send_cmd (0xD4 + col);
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	3b2c      	subs	r3, #44	@ 0x2c
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	0018      	movs	r0, r3
 80003ac:	f7ff ff42 	bl	8000234 <lcd_send_cmd>
      break;
 80003b0:	46c0      	nop			@ (mov r8, r8)
}
 80003b2:	46c0      	nop			@ (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b002      	add	sp, #8
 80003b8:	bd80      	pop	{r7, pc}

080003ba <lcd_send_string>:

void lcd_send_string (char *str)
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b082      	sub	sp, #8
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
  while (*str) lcd_send_data(*str++);
 80003c2:	e006      	b.n	80003d2 <lcd_send_string+0x18>
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	1c5a      	adds	r2, r3, #1
 80003c8:	607a      	str	r2, [r7, #4]
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	0018      	movs	r0, r3
 80003ce:	f7ff ff6f 	bl	80002b0 <lcd_send_data>
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d1f4      	bne.n	80003c4 <lcd_send_string+0xa>
}
 80003da:	46c0      	nop			@ (mov r8, r8)
 80003dc:	46c0      	nop			@ (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	b002      	add	sp, #8
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <lcd_init>:

void lcd_init (void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 80003e8:	2032      	movs	r0, #50	@ 0x32
 80003ea:	f000 fe41 	bl	8001070 <HAL_Delay>
  lcd_send_cmd (0x30);
 80003ee:	2030      	movs	r0, #48	@ 0x30
 80003f0:	f7ff ff20 	bl	8000234 <lcd_send_cmd>
  HAL_Delay(5);
 80003f4:	2005      	movs	r0, #5
 80003f6:	f000 fe3b 	bl	8001070 <HAL_Delay>
  lcd_send_cmd (0x30);
 80003fa:	2030      	movs	r0, #48	@ 0x30
 80003fc:	f7ff ff1a 	bl	8000234 <lcd_send_cmd>
  HAL_Delay(1);
 8000400:	2001      	movs	r0, #1
 8000402:	f000 fe35 	bl	8001070 <HAL_Delay>
  lcd_send_cmd (0x30);
 8000406:	2030      	movs	r0, #48	@ 0x30
 8000408:	f7ff ff14 	bl	8000234 <lcd_send_cmd>
  HAL_Delay(10);
 800040c:	200a      	movs	r0, #10
 800040e:	f000 fe2f 	bl	8001070 <HAL_Delay>
  lcd_send_cmd (0x20); // 4 bit mode
 8000412:	2020      	movs	r0, #32
 8000414:	f7ff ff0e 	bl	8000234 <lcd_send_cmd>
  HAL_Delay(10);
 8000418:	200a      	movs	r0, #10
 800041a:	f000 fe29 	bl	8001070 <HAL_Delay>

  lcd_send_cmd (0x28); // Function set
 800041e:	2028      	movs	r0, #40	@ 0x28
 8000420:	f7ff ff08 	bl	8000234 <lcd_send_cmd>
  HAL_Delay(1);
 8000424:	2001      	movs	r0, #1
 8000426:	f000 fe23 	bl	8001070 <HAL_Delay>
  lcd_send_cmd (0x08); // Display off
 800042a:	2008      	movs	r0, #8
 800042c:	f7ff ff02 	bl	8000234 <lcd_send_cmd>
  HAL_Delay(1);
 8000430:	2001      	movs	r0, #1
 8000432:	f000 fe1d 	bl	8001070 <HAL_Delay>
  lcd_send_cmd (0x01); // Clear display
 8000436:	2001      	movs	r0, #1
 8000438:	f7ff fefc 	bl	8000234 <lcd_send_cmd>
  HAL_Delay(2);
 800043c:	2002      	movs	r0, #2
 800043e:	f000 fe17 	bl	8001070 <HAL_Delay>
  lcd_send_cmd (0x06); // Entry mode set
 8000442:	2006      	movs	r0, #6
 8000444:	f7ff fef6 	bl	8000234 <lcd_send_cmd>
  HAL_Delay(1);
 8000448:	2001      	movs	r0, #1
 800044a:	f000 fe11 	bl	8001070 <HAL_Delay>
  lcd_send_cmd (0x0C); // Display ON
 800044e:	200c      	movs	r0, #12
 8000450:	f7ff fef0 	bl	8000234 <lcd_send_cmd>
}
 8000454:	46c0      	nop			@ (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
	...

0800045c <DisplayPotentiometer.0>:
  void DisplayPotentiometer(void)
  /*
   * Reads PA1 via ADC, maps 0–4095 → 0–100%,
   * then prints “Pot: xx%” on line 2 of the LCD.
   */
  {
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b089      	sub	sp, #36	@ 0x24
 8000460:	af00      	add	r7, sp, #0
 8000462:	4663      	mov	r3, ip
 8000464:	607b      	str	r3, [r7, #4]
      uint32_t raw, percent;
      char buf[16];

      // Start and poll the conversion
      HAL_ADC_Start(&hadc);
 8000466:	4b16      	ldr	r3, [pc, #88]	@ (80004c0 <DisplayPotentiometer.0+0x64>)
 8000468:	0018      	movs	r0, r3
 800046a:	f000 ff65 	bl	8001338 <HAL_ADC_Start>
      if (HAL_ADC_PollForConversion(&hadc, 10) == HAL_OK) {
 800046e:	4b14      	ldr	r3, [pc, #80]	@ (80004c0 <DisplayPotentiometer.0+0x64>)
 8000470:	210a      	movs	r1, #10
 8000472:	0018      	movs	r0, r3
 8000474:	f000 ffb4 	bl	80013e0 <HAL_ADC_PollForConversion>
 8000478:	1e03      	subs	r3, r0, #0
 800047a:	d11d      	bne.n	80004b8 <DisplayPotentiometer.0+0x5c>
          raw = HAL_ADC_GetValue(&hadc);
 800047c:	4b10      	ldr	r3, [pc, #64]	@ (80004c0 <DisplayPotentiometer.0+0x64>)
 800047e:	0018      	movs	r0, r3
 8000480:	f001 f846 	bl	8001510 <HAL_ADC_GetValue>
 8000484:	0003      	movs	r3, r0
 8000486:	61fb      	str	r3, [r7, #28]
          // Map raw (0–4095) to percent (0–100)
          percent = raw * 100 / 4095;
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	2264      	movs	r2, #100	@ 0x64
 800048c:	4353      	muls	r3, r2
 800048e:	490d      	ldr	r1, [pc, #52]	@ (80004c4 <DisplayPotentiometer.0+0x68>)
 8000490:	0018      	movs	r0, r3
 8000492:	f7ff fe43 	bl	800011c <__udivsi3>
 8000496:	0003      	movs	r3, r0
 8000498:	61bb      	str	r3, [r7, #24]

          // Print on row 1 (second line), col 0
          lcd_put_cur(1, 0);
 800049a:	2100      	movs	r1, #0
 800049c:	2001      	movs	r0, #1
 800049e:	f7ff ff50 	bl	8000342 <lcd_put_cur>
          sprintf(buf, "Pot: %3lu%%   ", percent);
 80004a2:	69ba      	ldr	r2, [r7, #24]
 80004a4:	4908      	ldr	r1, [pc, #32]	@ (80004c8 <DisplayPotentiometer.0+0x6c>)
 80004a6:	2408      	movs	r4, #8
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	0018      	movs	r0, r3
 80004ac:	f003 fa16 	bl	80038dc <siprintf>
          lcd_send_string(buf);
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	0018      	movs	r0, r3
 80004b4:	f7ff ff81 	bl	80003ba <lcd_send_string>
      }
  }
 80004b8:	46c0      	nop			@ (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b009      	add	sp, #36	@ 0x24
 80004be:	bd90      	pop	{r4, r7, pc}
 80004c0:	20000078 	.word	0x20000078
 80004c4:	00000fff 	.word	0x00000fff
 80004c8:	0800422c 	.word	0x0800422c

080004cc <main>:
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
int main(void)
 80004d2:	2310      	movs	r3, #16
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	607b      	str	r3, [r7, #4]
  HAL_Init();
 80004d8:	f000 fd66 	bl	8000fa8 <HAL_Init>
  SystemClock_Config();
 80004dc:	f000 f822 	bl	8000524 <SystemClock_Config>
  MX_GPIO_Init();
 80004e0:	f000 fa3a 	bl	8000958 <MX_GPIO_Init>
  MX_I2C2_Init();
 80004e4:	f000 f92a 	bl	800073c <MX_I2C2_Init>
  MX_SPI2_Init();
 80004e8:	f000 f968 	bl	80007bc <MX_SPI2_Init>
  MX_TSC_Init();
 80004ec:	f000 f9ca 	bl	8000884 <MX_TSC_Init>
  MX_USB_PCD_Init();
 80004f0:	f000 fa0c 	bl	800090c <MX_USB_PCD_Init>
  MX_I2C1_Init();
 80004f4:	f000 f8e2 	bl	80006bc <MX_I2C1_Init>
  MX_ADC_Init();
 80004f8:	f000 f884 	bl	8000604 <MX_ADC_Init>
  MX_TIM14_Init();
 80004fc:	f000 f99c 	bl	8000838 <MX_TIM14_Init>
  lcd_init();
 8000500:	f7ff ff70 	bl	80003e4 <lcd_init>
  lcd_clear();
 8000504:	f7ff ff12 	bl	800032c <lcd_clear>
  lcd_put_cur(0, 0);
 8000508:	2100      	movs	r1, #0
 800050a:	2000      	movs	r0, #0
 800050c:	f7ff ff19 	bl	8000342 <lcd_put_cur>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  DisplayPotentiometer();
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	469c      	mov	ip, r3
 8000514:	f7ff ffa2 	bl	800045c <DisplayPotentiometer.0>
	  HAL_Delay(200);
 8000518:	20c8      	movs	r0, #200	@ 0xc8
 800051a:	f000 fda9 	bl	8001070 <HAL_Delay>
	  DisplayPotentiometer();
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	e7f6      	b.n	8000510 <main+0x44>
	...

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b099      	sub	sp, #100	@ 0x64
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	242c      	movs	r4, #44	@ 0x2c
 800052c:	193b      	adds	r3, r7, r4
 800052e:	0018      	movs	r0, r3
 8000530:	2334      	movs	r3, #52	@ 0x34
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f003 f9f3 	bl	8003920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053a:	231c      	movs	r3, #28
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	0018      	movs	r0, r3
 8000540:	2310      	movs	r3, #16
 8000542:	001a      	movs	r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	f003 f9eb 	bl	8003920 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800054a:	003b      	movs	r3, r7
 800054c:	0018      	movs	r0, r3
 800054e:	231c      	movs	r3, #28
 8000550:	001a      	movs	r2, r3
 8000552:	2100      	movs	r1, #0
 8000554:	f003 f9e4 	bl	8003920 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000558:	0021      	movs	r1, r4
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2232      	movs	r2, #50	@ 0x32
 800055e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2201      	movs	r2, #1
 8000564:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2201      	movs	r2, #1
 800056a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2201      	movs	r2, #1
 8000570:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2210      	movs	r2, #16
 8000576:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2210      	movs	r2, #16
 800057c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2202      	movs	r2, #2
 8000582:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2280      	movs	r2, #128	@ 0x80
 8000588:	0212      	lsls	r2, r2, #8
 800058a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2280      	movs	r2, #128	@ 0x80
 8000590:	0352      	lsls	r2, r2, #13
 8000592:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	187b      	adds	r3, r7, r1
 800059c:	0018      	movs	r0, r3
 800059e:	f002 f95b 	bl	8002858 <HAL_RCC_OscConfig>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005a6:	f000 fa5b 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	211c      	movs	r1, #28
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2207      	movs	r2, #7
 80005b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2202      	movs	r2, #2
 80005b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2101      	movs	r1, #1
 80005c8:	0018      	movs	r0, r3
 80005ca:	f002 fccb 	bl	8002f64 <HAL_RCC_ClockConfig>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005d2:	f000 fa45 	bl	8000a60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80005d6:	003b      	movs	r3, r7
 80005d8:	4a09      	ldr	r2, [pc, #36]	@ (8000600 <SystemClock_Config+0xdc>)
 80005da:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005dc:	003b      	movs	r3, r7
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80005e2:	003b      	movs	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e8:	003b      	movs	r3, r7
 80005ea:	0018      	movs	r0, r3
 80005ec:	f002 fe06 	bl	80031fc <HAL_RCCEx_PeriphCLKConfig>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80005f4:	f000 fa34 	bl	8000a60 <Error_Handler>
  }
}
 80005f8:	46c0      	nop			@ (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b019      	add	sp, #100	@ 0x64
 80005fe:	bd90      	pop	{r4, r7, pc}
 8000600:	00020020 	.word	0x00020020

08000604 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	0018      	movs	r0, r3
 800060e:	230c      	movs	r3, #12
 8000610:	001a      	movs	r2, r3
 8000612:	2100      	movs	r1, #0
 8000614:	f003 f984 	bl	8003920 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000618:	4b26      	ldr	r3, [pc, #152]	@ (80006b4 <MX_ADC_Init+0xb0>)
 800061a:	4a27      	ldr	r2, [pc, #156]	@ (80006b8 <MX_ADC_Init+0xb4>)
 800061c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800061e:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <MX_ADC_Init+0xb0>)
 8000620:	2200      	movs	r2, #0
 8000622:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000624:	4b23      	ldr	r3, [pc, #140]	@ (80006b4 <MX_ADC_Init+0xb0>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062a:	4b22      	ldr	r3, [pc, #136]	@ (80006b4 <MX_ADC_Init+0xb0>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000630:	4b20      	ldr	r3, [pc, #128]	@ (80006b4 <MX_ADC_Init+0xb0>)
 8000632:	2201      	movs	r2, #1
 8000634:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b1f      	ldr	r3, [pc, #124]	@ (80006b4 <MX_ADC_Init+0xb0>)
 8000638:	2204      	movs	r2, #4
 800063a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800063c:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <MX_ADC_Init+0xb0>)
 800063e:	2200      	movs	r2, #0
 8000640:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000642:	4b1c      	ldr	r3, [pc, #112]	@ (80006b4 <MX_ADC_Init+0xb0>)
 8000644:	2200      	movs	r2, #0
 8000646:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000648:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <MX_ADC_Init+0xb0>)
 800064a:	2200      	movs	r2, #0
 800064c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800064e:	4b19      	ldr	r3, [pc, #100]	@ (80006b4 <MX_ADC_Init+0xb0>)
 8000650:	2200      	movs	r2, #0
 8000652:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000654:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <MX_ADC_Init+0xb0>)
 8000656:	22c2      	movs	r2, #194	@ 0xc2
 8000658:	32ff      	adds	r2, #255	@ 0xff
 800065a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800065c:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <MX_ADC_Init+0xb0>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000662:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <MX_ADC_Init+0xb0>)
 8000664:	2224      	movs	r2, #36	@ 0x24
 8000666:	2100      	movs	r1, #0
 8000668:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800066a:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <MX_ADC_Init+0xb0>)
 800066c:	2201      	movs	r2, #1
 800066e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000670:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <MX_ADC_Init+0xb0>)
 8000672:	0018      	movs	r0, r3
 8000674:	f000 fd20 	bl	80010b8 <HAL_ADC_Init>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800067c:	f000 f9f0 	bl	8000a60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2201      	movs	r2, #1
 8000684:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2280      	movs	r2, #128	@ 0x80
 800068a:	0152      	lsls	r2, r2, #5
 800068c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2280      	movs	r2, #128	@ 0x80
 8000692:	0552      	lsls	r2, r2, #21
 8000694:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000696:	1d3a      	adds	r2, r7, #4
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <MX_ADC_Init+0xb0>)
 800069a:	0011      	movs	r1, r2
 800069c:	0018      	movs	r0, r3
 800069e:	f000 ff43 	bl	8001528 <HAL_ADC_ConfigChannel>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80006a6:	f000 f9db 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b004      	add	sp, #16
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			@ (mov r8, r8)
 80006b4:	20000078 	.word	0x20000078
 80006b8:	40012400 	.word	0x40012400

080006bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000734 <MX_I2C1_Init+0x78>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000738 <MX_I2C1_Init+0x7c>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006cc:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d2:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 faf1 	bl	8001ce0 <HAL_I2C_Init>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000702:	f000 f9ad 	bl	8000a60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000706:	4b0a      	ldr	r3, [pc, #40]	@ (8000730 <MX_I2C1_Init+0x74>)
 8000708:	2100      	movs	r1, #0
 800070a:	0018      	movs	r0, r3
 800070c:	f001 feee 	bl	80024ec <HAL_I2CEx_ConfigAnalogFilter>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000714:	f000 f9a4 	bl	8000a60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000718:	4b05      	ldr	r3, [pc, #20]	@ (8000730 <MX_I2C1_Init+0x74>)
 800071a:	2100      	movs	r1, #0
 800071c:	0018      	movs	r0, r3
 800071e:	f001 ff31 	bl	8002584 <HAL_I2CEx_ConfigDigitalFilter>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d001      	beq.n	800072a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000726:	f000 f99b 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200000b8 	.word	0x200000b8
 8000734:	40005400 	.word	0x40005400
 8000738:	00201d2b 	.word	0x00201d2b

0800073c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000742:	4a1c      	ldr	r2, [pc, #112]	@ (80007b4 <MX_I2C2_Init+0x78>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000748:	4a1b      	ldr	r2, [pc, #108]	@ (80007b8 <MX_I2C2_Init+0x7c>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800074c:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_I2C2_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000754:	2201      	movs	r2, #1
 8000756:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_I2C2_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800075e:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_I2C2_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000778:	0018      	movs	r0, r3
 800077a:	f001 fab1 	bl	8001ce0 <HAL_I2C_Init>
 800077e:	1e03      	subs	r3, r0, #0
 8000780:	d001      	beq.n	8000786 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000782:	f000 f96d 	bl	8000a60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000786:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000788:	2100      	movs	r1, #0
 800078a:	0018      	movs	r0, r3
 800078c:	f001 feae 	bl	80024ec <HAL_I2CEx_ConfigAnalogFilter>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000794:	f000 f964 	bl	8000a60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000798:	4b05      	ldr	r3, [pc, #20]	@ (80007b0 <MX_I2C2_Init+0x74>)
 800079a:	2100      	movs	r1, #0
 800079c:	0018      	movs	r0, r3
 800079e:	f001 fef1 	bl	8002584 <HAL_I2CEx_ConfigDigitalFilter>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f000 f95b 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000010c 	.word	0x2000010c
 80007b4:	40005800 	.word	0x40005800
 80007b8:	20303e5d 	.word	0x20303e5d

080007bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000834 <MX_SPI2_Init+0x78>)
 80007c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007c8:	2282      	movs	r2, #130	@ 0x82
 80007ca:	0052      	lsls	r2, r2, #1
 80007cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007ce:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80007d4:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007d6:	22c0      	movs	r2, #192	@ 0xc0
 80007d8:	0092      	lsls	r2, r2, #2
 80007da:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007e8:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007ea:	2280      	movs	r2, #128	@ 0x80
 80007ec:	0092      	lsls	r2, r2, #2
 80007ee:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007f2:	2208      	movs	r2, #8
 80007f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <MX_SPI2_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000808:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_SPI2_Init+0x74>)
 800080a:	2207      	movs	r2, #7
 800080c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <MX_SPI2_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_SPI2_Init+0x74>)
 8000816:	2208      	movs	r2, #8
 8000818:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800081a:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <MX_SPI2_Init+0x74>)
 800081c:	0018      	movs	r0, r3
 800081e:	f002 fdeb 	bl	80033f8 <HAL_SPI_Init>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d001      	beq.n	800082a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000826:	f000 f91b 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000160 	.word	0x20000160
 8000834:	40003800 	.word	0x40003800

08000838 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800083c:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_TIM14_Init+0x40>)
 800083e:	4a0f      	ldr	r2, [pc, #60]	@ (800087c <MX_TIM14_Init+0x44>)
 8000840:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000842:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <MX_TIM14_Init+0x40>)
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000848:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <MX_TIM14_Init+0x40>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800084e:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <MX_TIM14_Init+0x40>)
 8000850:	4a0b      	ldr	r2, [pc, #44]	@ (8000880 <MX_TIM14_Init+0x48>)
 8000852:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000854:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <MX_TIM14_Init+0x40>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085a:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <MX_TIM14_Init+0x40>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000860:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <MX_TIM14_Init+0x40>)
 8000862:	0018      	movs	r0, r3
 8000864:	f002 fe80 	bl	8003568 <HAL_TIM_Base_Init>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800086c:	f000 f8f8 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	200001c4 	.word	0x200001c4
 800087c:	40002000 	.word	0x40002000
 8000880:	0000ffff 	.word	0x0000ffff

08000884 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8000888:	4b1e      	ldr	r3, [pc, #120]	@ (8000904 <MX_TSC_Init+0x80>)
 800088a:	4a1f      	ldr	r2, [pc, #124]	@ (8000908 <MX_TSC_Init+0x84>)
 800088c:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 800088e:	4b1d      	ldr	r3, [pc, #116]	@ (8000904 <MX_TSC_Init+0x80>)
 8000890:	2280      	movs	r2, #128	@ 0x80
 8000892:	0552      	lsls	r2, r2, #21
 8000894:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8000896:	4b1b      	ldr	r3, [pc, #108]	@ (8000904 <MX_TSC_Init+0x80>)
 8000898:	2280      	movs	r2, #128	@ 0x80
 800089a:	0452      	lsls	r2, r2, #17
 800089c:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 800089e:	4b19      	ldr	r3, [pc, #100]	@ (8000904 <MX_TSC_Init+0x80>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 80008a4:	4b17      	ldr	r3, [pc, #92]	@ (8000904 <MX_TSC_Init+0x80>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 80008aa:	4b16      	ldr	r3, [pc, #88]	@ (8000904 <MX_TSC_Init+0x80>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 80008b0:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_TSC_Init+0x80>)
 80008b2:	2280      	movs	r2, #128	@ 0x80
 80008b4:	0192      	lsls	r2, r2, #6
 80008b6:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <MX_TSC_Init+0x80>)
 80008ba:	22a0      	movs	r2, #160	@ 0xa0
 80008bc:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_TSC_Init+0x80>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <MX_TSC_Init+0x80>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	@ 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <MX_TSC_Init+0x80>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	@ 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <MX_TSC_Init+0x80>)
 80008d2:	222c      	movs	r2, #44	@ 0x2c
 80008d4:	2100      	movs	r1, #0
 80008d6:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000904 <MX_TSC_Init+0x80>)
 80008da:	2291      	movs	r2, #145	@ 0x91
 80008dc:	0092      	lsls	r2, r2, #2
 80008de:	631a      	str	r2, [r3, #48]	@ 0x30
  htsc.Init.ShieldIOs = 0;
 80008e0:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <MX_TSC_Init+0x80>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	635a      	str	r2, [r3, #52]	@ 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 80008e6:	4b07      	ldr	r3, [pc, #28]	@ (8000904 <MX_TSC_Init+0x80>)
 80008e8:	2291      	movs	r2, #145	@ 0x91
 80008ea:	00d2      	lsls	r2, r2, #3
 80008ec:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80008ee:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <MX_TSC_Init+0x80>)
 80008f0:	0018      	movs	r0, r3
 80008f2:	f002 ff17 	bl	8003724 <HAL_TSC_Init>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d001      	beq.n	80008fe <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 80008fa:	f000 f8b1 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	2000020c 	.word	0x2000020c
 8000908:	40024000 	.word	0x40024000

0800090c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_USB_PCD_Init+0x44>)
 8000912:	4a10      	ldr	r2, [pc, #64]	@ (8000954 <MX_USB_PCD_Init+0x48>)
 8000914:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_USB_PCD_Init+0x44>)
 8000918:	2208      	movs	r2, #8
 800091a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_USB_PCD_Init+0x44>)
 800091e:	2202      	movs	r2, #2
 8000920:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_USB_PCD_Init+0x44>)
 8000924:	2202      	movs	r2, #2
 8000926:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000928:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_USB_PCD_Init+0x44>)
 800092a:	2200      	movs	r2, #0
 800092c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_USB_PCD_Init+0x44>)
 8000930:	2200      	movs	r2, #0
 8000932:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_USB_PCD_Init+0x44>)
 8000936:	2200      	movs	r2, #0
 8000938:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800093a:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <MX_USB_PCD_Init+0x44>)
 800093c:	0018      	movs	r0, r3
 800093e:	f001 fe6d 	bl	800261c <HAL_PCD_Init>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d001      	beq.n	800094a <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8000946:	f000 f88b 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800094a:	46c0      	nop			@ (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000250 	.word	0x20000250
 8000954:	40005c00 	.word	0x40005c00

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b089      	sub	sp, #36	@ 0x24
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	240c      	movs	r4, #12
 8000960:	193b      	adds	r3, r7, r4
 8000962:	0018      	movs	r0, r3
 8000964:	2314      	movs	r3, #20
 8000966:	001a      	movs	r2, r3
 8000968:	2100      	movs	r1, #0
 800096a:	f002 ffd9 	bl	8003920 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	4b38      	ldr	r3, [pc, #224]	@ (8000a50 <MX_GPIO_Init+0xf8>)
 8000970:	695a      	ldr	r2, [r3, #20]
 8000972:	4b37      	ldr	r3, [pc, #220]	@ (8000a50 <MX_GPIO_Init+0xf8>)
 8000974:	2180      	movs	r1, #128	@ 0x80
 8000976:	0309      	lsls	r1, r1, #12
 8000978:	430a      	orrs	r2, r1
 800097a:	615a      	str	r2, [r3, #20]
 800097c:	4b34      	ldr	r3, [pc, #208]	@ (8000a50 <MX_GPIO_Init+0xf8>)
 800097e:	695a      	ldr	r2, [r3, #20]
 8000980:	2380      	movs	r3, #128	@ 0x80
 8000982:	031b      	lsls	r3, r3, #12
 8000984:	4013      	ands	r3, r2
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b31      	ldr	r3, [pc, #196]	@ (8000a50 <MX_GPIO_Init+0xf8>)
 800098c:	695a      	ldr	r2, [r3, #20]
 800098e:	4b30      	ldr	r3, [pc, #192]	@ (8000a50 <MX_GPIO_Init+0xf8>)
 8000990:	2180      	movs	r1, #128	@ 0x80
 8000992:	0289      	lsls	r1, r1, #10
 8000994:	430a      	orrs	r2, r1
 8000996:	615a      	str	r2, [r3, #20]
 8000998:	4b2d      	ldr	r3, [pc, #180]	@ (8000a50 <MX_GPIO_Init+0xf8>)
 800099a:	695a      	ldr	r2, [r3, #20]
 800099c:	2380      	movs	r3, #128	@ 0x80
 800099e:	029b      	lsls	r3, r3, #10
 80009a0:	4013      	ands	r3, r2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a50 <MX_GPIO_Init+0xf8>)
 80009a8:	695a      	ldr	r2, [r3, #20]
 80009aa:	4b29      	ldr	r3, [pc, #164]	@ (8000a50 <MX_GPIO_Init+0xf8>)
 80009ac:	2180      	movs	r1, #128	@ 0x80
 80009ae:	02c9      	lsls	r1, r1, #11
 80009b0:	430a      	orrs	r2, r1
 80009b2:	615a      	str	r2, [r3, #20]
 80009b4:	4b26      	ldr	r3, [pc, #152]	@ (8000a50 <MX_GPIO_Init+0xf8>)
 80009b6:	695a      	ldr	r2, [r3, #20]
 80009b8:	2380      	movs	r3, #128	@ 0x80
 80009ba:	02db      	lsls	r3, r3, #11
 80009bc:	4013      	ands	r3, r2
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 80009c2:	4924      	ldr	r1, [pc, #144]	@ (8000a54 <MX_GPIO_Init+0xfc>)
 80009c4:	4b24      	ldr	r3, [pc, #144]	@ (8000a58 <MX_GPIO_Init+0x100>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	0018      	movs	r0, r3
 80009ca:	f001 f96b 	bl	8001ca4 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80009ce:	4b23      	ldr	r3, [pc, #140]	@ (8000a5c <MX_GPIO_Init+0x104>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	2120      	movs	r1, #32
 80009d4:	0018      	movs	r0, r3
 80009d6:	f001 f965 	bl	8001ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
                           LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a54 <MX_GPIO_Init+0xfc>)
 80009de:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	2201      	movs	r2, #1
 80009e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	4a18      	ldr	r2, [pc, #96]	@ (8000a58 <MX_GPIO_Init+0x100>)
 80009f6:	0019      	movs	r1, r3
 80009f8:	0010      	movs	r0, r2
 80009fa:	f000 ffdb 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 80009fe:	0021      	movs	r1, r4
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2206      	movs	r2, #6
 8000a04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2290      	movs	r2, #144	@ 0x90
 8000a0a:	0352      	lsls	r2, r2, #13
 8000a0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a14:	000c      	movs	r4, r1
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	4a0f      	ldr	r2, [pc, #60]	@ (8000a58 <MX_GPIO_Init+0x100>)
 8000a1a:	0019      	movs	r1, r3
 8000a1c:	0010      	movs	r0, r2
 8000a1e:	f000 ffc9 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a22:	0021      	movs	r1, r4
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2220      	movs	r2, #32
 8000a28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <MX_GPIO_Init+0x104>)
 8000a40:	0019      	movs	r1, r3
 8000a42:	0010      	movs	r0, r2
 8000a44:	f000 ffb6 	bl	80019b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a48:	46c0      	nop			@ (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b009      	add	sp, #36	@ 0x24
 8000a4e:	bd90      	pop	{r4, r7, pc}
 8000a50:	40021000 	.word	0x40021000
 8000a54:	000003e1 	.word	0x000003e1
 8000a58:	48000800 	.word	0x48000800
 8000a5c:	48000400 	.word	0x48000400

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	46c0      	nop			@ (mov r8, r8)
 8000a6a:	e7fd      	b.n	8000a68 <Error_Handler+0x8>

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a74:	699a      	ldr	r2, [r3, #24]
 8000a76:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a78:	2101      	movs	r1, #1
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	619a      	str	r2, [r3, #24]
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	2201      	movs	r2, #1
 8000a84:	4013      	ands	r3, r2
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a8c:	69da      	ldr	r2, [r3, #28]
 8000a8e:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a90:	2180      	movs	r1, #128	@ 0x80
 8000a92:	0549      	lsls	r1, r1, #21
 8000a94:	430a      	orrs	r2, r1
 8000a96:	61da      	str	r2, [r3, #28]
 8000a98:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a9a:	69da      	ldr	r2, [r3, #28]
 8000a9c:	2380      	movs	r3, #128	@ 0x80
 8000a9e:	055b      	lsls	r3, r3, #21
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b002      	add	sp, #8
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b08b      	sub	sp, #44	@ 0x2c
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	2414      	movs	r4, #20
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	2314      	movs	r3, #20
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	f002 ff2a 	bl	8003920 <memset>
  if(hadc->Instance==ADC1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a19      	ldr	r2, [pc, #100]	@ (8000b38 <HAL_ADC_MspInit+0x84>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d12b      	bne.n	8000b2e <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ad6:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <HAL_ADC_MspInit+0x88>)
 8000ad8:	699a      	ldr	r2, [r3, #24]
 8000ada:	4b18      	ldr	r3, [pc, #96]	@ (8000b3c <HAL_ADC_MspInit+0x88>)
 8000adc:	2180      	movs	r1, #128	@ 0x80
 8000ade:	0089      	lsls	r1, r1, #2
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	619a      	str	r2, [r3, #24]
 8000ae4:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <HAL_ADC_MspInit+0x88>)
 8000ae6:	699a      	ldr	r2, [r3, #24]
 8000ae8:	2380      	movs	r3, #128	@ 0x80
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	4013      	ands	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <HAL_ADC_MspInit+0x88>)
 8000af4:	695a      	ldr	r2, [r3, #20]
 8000af6:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <HAL_ADC_MspInit+0x88>)
 8000af8:	2180      	movs	r1, #128	@ 0x80
 8000afa:	0289      	lsls	r1, r1, #10
 8000afc:	430a      	orrs	r2, r1
 8000afe:	615a      	str	r2, [r3, #20]
 8000b00:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <HAL_ADC_MspInit+0x88>)
 8000b02:	695a      	ldr	r2, [r3, #20]
 8000b04:	2380      	movs	r3, #128	@ 0x80
 8000b06:	029b      	lsls	r3, r3, #10
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	2203      	movs	r2, #3
 8000b12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	2203      	movs	r2, #3
 8000b18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	193b      	adds	r3, r7, r4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	193a      	adds	r2, r7, r4
 8000b22:	2390      	movs	r3, #144	@ 0x90
 8000b24:	05db      	lsls	r3, r3, #23
 8000b26:	0011      	movs	r1, r2
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f000 ff43 	bl	80019b4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b00b      	add	sp, #44	@ 0x2c
 8000b34:	bd90      	pop	{r4, r7, pc}
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	40012400 	.word	0x40012400
 8000b3c:	40021000 	.word	0x40021000

08000b40 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b08d      	sub	sp, #52	@ 0x34
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	241c      	movs	r4, #28
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	2314      	movs	r3, #20
 8000b50:	001a      	movs	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	f002 fee4 	bl	8003920 <memset>
  if(hi2c->Instance==I2C1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a38      	ldr	r2, [pc, #224]	@ (8000c40 <HAL_I2C_MspInit+0x100>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d132      	bne.n	8000bc8 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b38      	ldr	r3, [pc, #224]	@ (8000c44 <HAL_I2C_MspInit+0x104>)
 8000b64:	695a      	ldr	r2, [r3, #20]
 8000b66:	4b37      	ldr	r3, [pc, #220]	@ (8000c44 <HAL_I2C_MspInit+0x104>)
 8000b68:	2180      	movs	r1, #128	@ 0x80
 8000b6a:	02c9      	lsls	r1, r1, #11
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	615a      	str	r2, [r3, #20]
 8000b70:	4b34      	ldr	r3, [pc, #208]	@ (8000c44 <HAL_I2C_MspInit+0x104>)
 8000b72:	695a      	ldr	r2, [r3, #20]
 8000b74:	2380      	movs	r3, #128	@ 0x80
 8000b76:	02db      	lsls	r3, r3, #11
 8000b78:	4013      	ands	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]
 8000b7c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b7e:	0021      	movs	r1, r4
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	22c0      	movs	r2, #192	@ 0xc0
 8000b84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2212      	movs	r2, #18
 8000b8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2203      	movs	r2, #3
 8000b96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	4a29      	ldr	r2, [pc, #164]	@ (8000c48 <HAL_I2C_MspInit+0x108>)
 8000ba2:	0019      	movs	r1, r3
 8000ba4:	0010      	movs	r0, r2
 8000ba6:	f000 ff05 	bl	80019b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000baa:	4b26      	ldr	r3, [pc, #152]	@ (8000c44 <HAL_I2C_MspInit+0x104>)
 8000bac:	69da      	ldr	r2, [r3, #28]
 8000bae:	4b25      	ldr	r3, [pc, #148]	@ (8000c44 <HAL_I2C_MspInit+0x104>)
 8000bb0:	2180      	movs	r1, #128	@ 0x80
 8000bb2:	0389      	lsls	r1, r1, #14
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	61da      	str	r2, [r3, #28]
 8000bb8:	4b22      	ldr	r3, [pc, #136]	@ (8000c44 <HAL_I2C_MspInit+0x104>)
 8000bba:	69da      	ldr	r2, [r3, #28]
 8000bbc:	2380      	movs	r3, #128	@ 0x80
 8000bbe:	039b      	lsls	r3, r3, #14
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000bc6:	e037      	b.n	8000c38 <HAL_I2C_MspInit+0xf8>
  else if(hi2c->Instance==I2C2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8000c4c <HAL_I2C_MspInit+0x10c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d132      	bne.n	8000c38 <HAL_I2C_MspInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <HAL_I2C_MspInit+0x104>)
 8000bd4:	695a      	ldr	r2, [r3, #20]
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <HAL_I2C_MspInit+0x104>)
 8000bd8:	2180      	movs	r1, #128	@ 0x80
 8000bda:	02c9      	lsls	r1, r1, #11
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	615a      	str	r2, [r3, #20]
 8000be0:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <HAL_I2C_MspInit+0x104>)
 8000be2:	695a      	ldr	r2, [r3, #20]
 8000be4:	2380      	movs	r3, #128	@ 0x80
 8000be6:	02db      	lsls	r3, r3, #11
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8000bee:	211c      	movs	r1, #28
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	22c0      	movs	r2, #192	@ 0xc0
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2212      	movs	r2, #18
 8000bfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2201      	movs	r2, #1
 8000c02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2203      	movs	r2, #3
 8000c08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	4a0d      	ldr	r2, [pc, #52]	@ (8000c48 <HAL_I2C_MspInit+0x108>)
 8000c14:	0019      	movs	r1, r3
 8000c16:	0010      	movs	r0, r2
 8000c18:	f000 fecc 	bl	80019b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c1c:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <HAL_I2C_MspInit+0x104>)
 8000c1e:	69da      	ldr	r2, [r3, #28]
 8000c20:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <HAL_I2C_MspInit+0x104>)
 8000c22:	2180      	movs	r1, #128	@ 0x80
 8000c24:	03c9      	lsls	r1, r1, #15
 8000c26:	430a      	orrs	r2, r1
 8000c28:	61da      	str	r2, [r3, #28]
 8000c2a:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HAL_I2C_MspInit+0x104>)
 8000c2c:	69da      	ldr	r2, [r3, #28]
 8000c2e:	2380      	movs	r3, #128	@ 0x80
 8000c30:	03db      	lsls	r3, r3, #15
 8000c32:	4013      	ands	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
}
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b00d      	add	sp, #52	@ 0x34
 8000c3e:	bd90      	pop	{r4, r7, pc}
 8000c40:	40005400 	.word	0x40005400
 8000c44:	40021000 	.word	0x40021000
 8000c48:	48000400 	.word	0x48000400
 8000c4c:	40005800 	.word	0x40005800

08000c50 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b08b      	sub	sp, #44	@ 0x2c
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	2414      	movs	r4, #20
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	2314      	movs	r3, #20
 8000c60:	001a      	movs	r2, r3
 8000c62:	2100      	movs	r1, #0
 8000c64:	f002 fe5c 	bl	8003920 <memset>
  if(hspi->Instance==SPI2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce0 <HAL_SPI_MspInit+0x90>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d132      	bne.n	8000cd8 <HAL_SPI_MspInit+0x88>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce4 <HAL_SPI_MspInit+0x94>)
 8000c74:	69da      	ldr	r2, [r3, #28]
 8000c76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <HAL_SPI_MspInit+0x94>)
 8000c78:	2180      	movs	r1, #128	@ 0x80
 8000c7a:	01c9      	lsls	r1, r1, #7
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	61da      	str	r2, [r3, #28]
 8000c80:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <HAL_SPI_MspInit+0x94>)
 8000c82:	69da      	ldr	r2, [r3, #28]
 8000c84:	2380      	movs	r3, #128	@ 0x80
 8000c86:	01db      	lsls	r3, r3, #7
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <HAL_SPI_MspInit+0x94>)
 8000c90:	695a      	ldr	r2, [r3, #20]
 8000c92:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <HAL_SPI_MspInit+0x94>)
 8000c94:	2180      	movs	r1, #128	@ 0x80
 8000c96:	02c9      	lsls	r1, r1, #11
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	615a      	str	r2, [r3, #20]
 8000c9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <HAL_SPI_MspInit+0x94>)
 8000c9e:	695a      	ldr	r2, [r3, #20]
 8000ca0:	2380      	movs	r3, #128	@ 0x80
 8000ca2:	02db      	lsls	r3, r3, #11
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	22e0      	movs	r2, #224	@ 0xe0
 8000cae:	0212      	lsls	r2, r2, #8
 8000cb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	0021      	movs	r1, r4
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	4a06      	ldr	r2, [pc, #24]	@ (8000ce8 <HAL_SPI_MspInit+0x98>)
 8000cd0:	0019      	movs	r1, r3
 8000cd2:	0010      	movs	r0, r2
 8000cd4:	f000 fe6e 	bl	80019b4 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000cd8:	46c0      	nop			@ (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b00b      	add	sp, #44	@ 0x2c
 8000cde:	bd90      	pop	{r4, r7, pc}
 8000ce0:	40003800 	.word	0x40003800
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	48000400 	.word	0x48000400

08000cec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d24 <HAL_TIM_Base_MspInit+0x38>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d10d      	bne.n	8000d1a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <HAL_TIM_Base_MspInit+0x3c>)
 8000d00:	69da      	ldr	r2, [r3, #28]
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <HAL_TIM_Base_MspInit+0x3c>)
 8000d04:	2180      	movs	r1, #128	@ 0x80
 8000d06:	0049      	lsls	r1, r1, #1
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	61da      	str	r2, [r3, #28]
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_TIM_Base_MspInit+0x3c>)
 8000d0e:	69da      	ldr	r2, [r3, #28]
 8000d10:	2380      	movs	r3, #128	@ 0x80
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4013      	ands	r3, r2
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b004      	add	sp, #16
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	40002000 	.word	0x40002000
 8000d28:	40021000 	.word	0x40021000

08000d2c <HAL_TSC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htsc: TSC handle pointer
  * @retval None
  */
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b08b      	sub	sp, #44	@ 0x2c
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	2414      	movs	r4, #20
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	0018      	movs	r0, r3
 8000d3a:	2314      	movs	r3, #20
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f002 fdee 	bl	8003920 <memset>
  if(htsc->Instance==TSC)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a44      	ldr	r2, [pc, #272]	@ (8000e5c <HAL_TSC_MspInit+0x130>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d000      	beq.n	8000d50 <HAL_TSC_MspInit+0x24>
 8000d4e:	e080      	b.n	8000e52 <HAL_TSC_MspInit+0x126>
  {
    /* USER CODE BEGIN TSC_MspInit 0 */

    /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000d50:	4b43      	ldr	r3, [pc, #268]	@ (8000e60 <HAL_TSC_MspInit+0x134>)
 8000d52:	695a      	ldr	r2, [r3, #20]
 8000d54:	4b42      	ldr	r3, [pc, #264]	@ (8000e60 <HAL_TSC_MspInit+0x134>)
 8000d56:	2180      	movs	r1, #128	@ 0x80
 8000d58:	0449      	lsls	r1, r1, #17
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	615a      	str	r2, [r3, #20]
 8000d5e:	4b40      	ldr	r3, [pc, #256]	@ (8000e60 <HAL_TSC_MspInit+0x134>)
 8000d60:	695a      	ldr	r2, [r3, #20]
 8000d62:	2380      	movs	r3, #128	@ 0x80
 8000d64:	045b      	lsls	r3, r3, #17
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	4b3c      	ldr	r3, [pc, #240]	@ (8000e60 <HAL_TSC_MspInit+0x134>)
 8000d6e:	695a      	ldr	r2, [r3, #20]
 8000d70:	4b3b      	ldr	r3, [pc, #236]	@ (8000e60 <HAL_TSC_MspInit+0x134>)
 8000d72:	2180      	movs	r1, #128	@ 0x80
 8000d74:	0289      	lsls	r1, r1, #10
 8000d76:	430a      	orrs	r2, r1
 8000d78:	615a      	str	r2, [r3, #20]
 8000d7a:	4b39      	ldr	r3, [pc, #228]	@ (8000e60 <HAL_TSC_MspInit+0x134>)
 8000d7c:	695a      	ldr	r2, [r3, #20]
 8000d7e:	2380      	movs	r3, #128	@ 0x80
 8000d80:	029b      	lsls	r3, r3, #10
 8000d82:	4013      	ands	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d88:	4b35      	ldr	r3, [pc, #212]	@ (8000e60 <HAL_TSC_MspInit+0x134>)
 8000d8a:	695a      	ldr	r2, [r3, #20]
 8000d8c:	4b34      	ldr	r3, [pc, #208]	@ (8000e60 <HAL_TSC_MspInit+0x134>)
 8000d8e:	2180      	movs	r1, #128	@ 0x80
 8000d90:	02c9      	lsls	r1, r1, #11
 8000d92:	430a      	orrs	r2, r1
 8000d94:	615a      	str	r2, [r3, #20]
 8000d96:	4b32      	ldr	r3, [pc, #200]	@ (8000e60 <HAL_TSC_MspInit+0x134>)
 8000d98:	695a      	ldr	r2, [r3, #20]
 8000d9a:	2380      	movs	r3, #128	@ 0x80
 8000d9c:	02db      	lsls	r3, r3, #11
 8000d9e:	4013      	ands	r3, r2
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000da4:	193b      	adds	r3, r7, r4
 8000da6:	2244      	movs	r2, #68	@ 0x44
 8000da8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	2202      	movs	r2, #2
 8000dae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000dbc:	193b      	adds	r3, r7, r4
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	193a      	adds	r2, r7, r4
 8000dc4:	2390      	movs	r3, #144	@ 0x90
 8000dc6:	05db      	lsls	r3, r3, #23
 8000dc8:	0011      	movs	r1, r2
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f000 fdf2 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000dd0:	193b      	adds	r3, r7, r4
 8000dd2:	2288      	movs	r2, #136	@ 0x88
 8000dd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	2212      	movs	r2, #18
 8000dda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	193b      	adds	r3, r7, r4
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000de8:	193b      	adds	r3, r7, r4
 8000dea:	2203      	movs	r2, #3
 8000dec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	193a      	adds	r2, r7, r4
 8000df0:	2390      	movs	r3, #144	@ 0x90
 8000df2:	05db      	lsls	r3, r3, #23
 8000df4:	0011      	movs	r1, r2
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 fddc 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dfc:	193b      	adds	r3, r7, r4
 8000dfe:	2201      	movs	r2, #1
 8000e00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	193b      	adds	r3, r7, r4
 8000e04:	2202      	movs	r2, #2
 8000e06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	193b      	adds	r3, r7, r4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	193b      	adds	r3, r7, r4
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000e14:	193b      	adds	r3, r7, r4
 8000e16:	2203      	movs	r2, #3
 8000e18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	4a11      	ldr	r2, [pc, #68]	@ (8000e64 <HAL_TSC_MspInit+0x138>)
 8000e1e:	0019      	movs	r1, r3
 8000e20:	0010      	movs	r0, r2
 8000e22:	f000 fdc7 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e26:	0021      	movs	r1, r4
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2212      	movs	r2, #18
 8000e32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	2203      	movs	r2, #3
 8000e44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	4a06      	ldr	r2, [pc, #24]	@ (8000e64 <HAL_TSC_MspInit+0x138>)
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	0010      	movs	r0, r2
 8000e4e:	f000 fdb1 	bl	80019b4 <HAL_GPIO_Init>

    /* USER CODE END TSC_MspInit 1 */

  }

}
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b00b      	add	sp, #44	@ 0x2c
 8000e58:	bd90      	pop	{r4, r7, pc}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	40024000 	.word	0x40024000
 8000e60:	40021000 	.word	0x40021000
 8000e64:	48000400 	.word	0x48000400

08000e68 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <HAL_PCD_MspInit+0x38>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d10d      	bne.n	8000e96 <HAL_PCD_MspInit+0x2e>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_PCD_MspInit+0x3c>)
 8000e7c:	69da      	ldr	r2, [r3, #28]
 8000e7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <HAL_PCD_MspInit+0x3c>)
 8000e80:	2180      	movs	r1, #128	@ 0x80
 8000e82:	0409      	lsls	r1, r1, #16
 8000e84:	430a      	orrs	r2, r1
 8000e86:	61da      	str	r2, [r3, #28]
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_PCD_MspInit+0x3c>)
 8000e8a:	69da      	ldr	r2, [r3, #28]
 8000e8c:	2380      	movs	r3, #128	@ 0x80
 8000e8e:	041b      	lsls	r3, r3, #16
 8000e90:	4013      	ands	r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b004      	add	sp, #16
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	40005c00 	.word	0x40005c00
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eac:	46c0      	nop			@ (mov r8, r8)
 8000eae:	e7fd      	b.n	8000eac <NMI_Handler+0x4>

08000eb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb4:	46c0      	nop			@ (mov r8, r8)
 8000eb6:	e7fd      	b.n	8000eb4 <HardFault_Handler+0x4>

08000eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ebc:	46c0      	nop			@ (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed0:	f000 f8b2 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed4:	46c0      	nop			@ (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee4:	4a14      	ldr	r2, [pc, #80]	@ (8000f38 <_sbrk+0x5c>)
 8000ee6:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <_sbrk+0x60>)
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef0:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <_sbrk+0x64>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	@ (8000f44 <_sbrk+0x68>)
 8000efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	18d3      	adds	r3, r2, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d207      	bcs.n	8000f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f0c:	f002 fd10 	bl	8003930 <__errno>
 8000f10:	0003      	movs	r3, r0
 8000f12:	220c      	movs	r2, #12
 8000f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f16:	2301      	movs	r3, #1
 8000f18:	425b      	negs	r3, r3
 8000f1a:	e009      	b.n	8000f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f22:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	18d2      	adds	r2, r2, r3
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <_sbrk+0x64>)
 8000f2c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	0018      	movs	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b006      	add	sp, #24
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20004000 	.word	0x20004000
 8000f3c:	00000400 	.word	0x00000400
 8000f40:	2000052c 	.word	0x2000052c
 8000f44:	20000680 	.word	0x20000680

08000f48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f4c:	46c0      	nop			@ (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f54:	480d      	ldr	r0, [pc, #52]	@ (8000f8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f56:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f58:	f7ff fff6 	bl	8000f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f5c:	480c      	ldr	r0, [pc, #48]	@ (8000f90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f5e:	490d      	ldr	r1, [pc, #52]	@ (8000f94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f60:	4a0d      	ldr	r2, [pc, #52]	@ (8000f98 <LoopForever+0xe>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0a      	ldr	r2, [pc, #40]	@ (8000f9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f74:	4c0a      	ldr	r4, [pc, #40]	@ (8000fa0 <LoopForever+0x16>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f82:	f002 fcdb 	bl	800393c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f86:	f7ff faa1 	bl	80004cc <main>

08000f8a <LoopForever>:

LoopForever:
    b LoopForever
 8000f8a:	e7fe      	b.n	8000f8a <LoopForever>
  ldr   r0, =_estack
 8000f8c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f94:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f98:	080042a8 	.word	0x080042a8
  ldr r2, =_sbss
 8000f9c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000fa0:	2000067c 	.word	0x2000067c

08000fa4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC1_COMP_IRQHandler>
	...

08000fa8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b07      	ldr	r3, [pc, #28]	@ (8000fcc <HAL_Init+0x24>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_Init+0x24>)
 8000fb2:	2110      	movs	r1, #16
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f000 f809 	bl	8000fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbe:	f7ff fd55 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	46c0      	nop			@ (mov r8, r8)
 8000fcc:	40022000 	.word	0x40022000

08000fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd8:	4b14      	ldr	r3, [pc, #80]	@ (800102c <HAL_InitTick+0x5c>)
 8000fda:	681c      	ldr	r4, [r3, #0]
 8000fdc:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <HAL_InitTick+0x60>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	23fa      	movs	r3, #250	@ 0xfa
 8000fe4:	0098      	lsls	r0, r3, #2
 8000fe6:	f7ff f899 	bl	800011c <__udivsi3>
 8000fea:	0003      	movs	r3, r0
 8000fec:	0019      	movs	r1, r3
 8000fee:	0020      	movs	r0, r4
 8000ff0:	f7ff f894 	bl	800011c <__udivsi3>
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f000 fccf 	bl	800199a <HAL_SYSTICK_Config>
 8000ffc:	1e03      	subs	r3, r0, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e00f      	b.n	8001024 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b03      	cmp	r3, #3
 8001008:	d80b      	bhi.n	8001022 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	2301      	movs	r3, #1
 800100e:	425b      	negs	r3, r3
 8001010:	2200      	movs	r2, #0
 8001012:	0018      	movs	r0, r3
 8001014:	f000 fcac 	bl	8001970 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <HAL_InitTick+0x64>)
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	e000      	b.n	8001024 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
}
 8001024:	0018      	movs	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	b003      	add	sp, #12
 800102a:	bd90      	pop	{r4, r7, pc}
 800102c:	20000000 	.word	0x20000000
 8001030:	20000008 	.word	0x20000008
 8001034:	20000004 	.word	0x20000004

08001038 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b05      	ldr	r3, [pc, #20]	@ (8001054 <HAL_IncTick+0x1c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	001a      	movs	r2, r3
 8001042:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <HAL_IncTick+0x20>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	18d2      	adds	r2, r2, r3
 8001048:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <HAL_IncTick+0x20>)
 800104a:	601a      	str	r2, [r3, #0]
}
 800104c:	46c0      	nop			@ (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	20000008 	.word	0x20000008
 8001058:	20000530 	.word	0x20000530

0800105c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b02      	ldr	r3, [pc, #8]	@ (800106c <HAL_GetTick+0x10>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	20000530 	.word	0x20000530

08001070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff fff0 	bl	800105c <HAL_GetTick>
 800107c:	0003      	movs	r3, r0
 800107e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3301      	adds	r3, #1
 8001088:	d005      	beq.n	8001096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108a:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <HAL_Delay+0x44>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	001a      	movs	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	189b      	adds	r3, r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001096:	46c0      	nop			@ (mov r8, r8)
 8001098:	f7ff ffe0 	bl	800105c <HAL_GetTick>
 800109c:	0002      	movs	r2, r0
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d8f7      	bhi.n	8001098 <HAL_Delay+0x28>
  {
  }
}
 80010a8:	46c0      	nop			@ (mov r8, r8)
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b004      	add	sp, #16
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			@ (mov r8, r8)
 80010b4:	20000008 	.word	0x20000008

080010b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c0:	230f      	movs	r3, #15
 80010c2:	18fb      	adds	r3, r7, r3
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e125      	b.n	8001322 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10a      	bne.n	80010f4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2234      	movs	r2, #52	@ 0x34
 80010e8:	2100      	movs	r1, #0
 80010ea:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	0018      	movs	r0, r3
 80010f0:	f7ff fce0 	bl	8000ab4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010f8:	2210      	movs	r2, #16
 80010fa:	4013      	ands	r3, r2
 80010fc:	d000      	beq.n	8001100 <HAL_ADC_Init+0x48>
 80010fe:	e103      	b.n	8001308 <HAL_ADC_Init+0x250>
 8001100:	230f      	movs	r3, #15
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d000      	beq.n	800110c <HAL_ADC_Init+0x54>
 800110a:	e0fd      	b.n	8001308 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2204      	movs	r2, #4
 8001114:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001116:	d000      	beq.n	800111a <HAL_ADC_Init+0x62>
 8001118:	e0f6      	b.n	8001308 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800111e:	4a83      	ldr	r2, [pc, #524]	@ (800132c <HAL_ADC_Init+0x274>)
 8001120:	4013      	ands	r3, r2
 8001122:	2202      	movs	r2, #2
 8001124:	431a      	orrs	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2203      	movs	r2, #3
 8001132:	4013      	ands	r3, r2
 8001134:	2b01      	cmp	r3, #1
 8001136:	d112      	bne.n	800115e <HAL_ADC_Init+0xa6>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2201      	movs	r2, #1
 8001140:	4013      	ands	r3, r2
 8001142:	2b01      	cmp	r3, #1
 8001144:	d009      	beq.n	800115a <HAL_ADC_Init+0xa2>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	2380      	movs	r3, #128	@ 0x80
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	401a      	ands	r2, r3
 8001152:	2380      	movs	r3, #128	@ 0x80
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	429a      	cmp	r2, r3
 8001158:	d101      	bne.n	800115e <HAL_ADC_Init+0xa6>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_ADC_Init+0xa8>
 800115e:	2300      	movs	r3, #0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d116      	bne.n	8001192 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	2218      	movs	r2, #24
 800116c:	4393      	bics	r3, r2
 800116e:	0019      	movs	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	0899      	lsrs	r1, r3, #2
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	430a      	orrs	r2, r1
 8001190:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68da      	ldr	r2, [r3, #12]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4964      	ldr	r1, [pc, #400]	@ (8001330 <HAL_ADC_Init+0x278>)
 800119e:	400a      	ands	r2, r1
 80011a0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7e1b      	ldrb	r3, [r3, #24]
 80011a6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7e5b      	ldrb	r3, [r3, #25]
 80011ac:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	7e9b      	ldrb	r3, [r3, #26]
 80011b4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80011b6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d002      	beq.n	80011c6 <HAL_ADC_Init+0x10e>
 80011c0:	2380      	movs	r3, #128	@ 0x80
 80011c2:	015b      	lsls	r3, r3, #5
 80011c4:	e000      	b.n	80011c8 <HAL_ADC_Init+0x110>
 80011c6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80011c8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80011ce:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d101      	bne.n	80011dc <HAL_ADC_Init+0x124>
 80011d8:	2304      	movs	r3, #4
 80011da:	e000      	b.n	80011de <HAL_ADC_Init+0x126>
 80011dc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80011de:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2124      	movs	r1, #36	@ 0x24
 80011e4:	5c5b      	ldrb	r3, [r3, r1]
 80011e6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80011e8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7edb      	ldrb	r3, [r3, #27]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d115      	bne.n	8001224 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7e9b      	ldrb	r3, [r3, #26]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d105      	bne.n	800120c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	2280      	movs	r2, #128	@ 0x80
 8001204:	0252      	lsls	r2, r2, #9
 8001206:	4313      	orrs	r3, r2
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	e00b      	b.n	8001224 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001210:	2220      	movs	r2, #32
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800121c:	2201      	movs	r2, #1
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69da      	ldr	r2, [r3, #28]
 8001228:	23c2      	movs	r3, #194	@ 0xc2
 800122a:	33ff      	adds	r3, #255	@ 0xff
 800122c:	429a      	cmp	r2, r3
 800122e:	d007      	beq.n	8001240 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001238:	4313      	orrs	r3, r2
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	4313      	orrs	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68d9      	ldr	r1, [r3, #12]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	430a      	orrs	r2, r1
 800124e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001254:	2380      	movs	r3, #128	@ 0x80
 8001256:	055b      	lsls	r3, r3, #21
 8001258:	429a      	cmp	r2, r3
 800125a:	d01b      	beq.n	8001294 <HAL_ADC_Init+0x1dc>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001260:	2b01      	cmp	r3, #1
 8001262:	d017      	beq.n	8001294 <HAL_ADC_Init+0x1dc>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001268:	2b02      	cmp	r3, #2
 800126a:	d013      	beq.n	8001294 <HAL_ADC_Init+0x1dc>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001270:	2b03      	cmp	r3, #3
 8001272:	d00f      	beq.n	8001294 <HAL_ADC_Init+0x1dc>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001278:	2b04      	cmp	r3, #4
 800127a:	d00b      	beq.n	8001294 <HAL_ADC_Init+0x1dc>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001280:	2b05      	cmp	r3, #5
 8001282:	d007      	beq.n	8001294 <HAL_ADC_Init+0x1dc>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001288:	2b06      	cmp	r3, #6
 800128a:	d003      	beq.n	8001294 <HAL_ADC_Init+0x1dc>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001290:	2b07      	cmp	r3, #7
 8001292:	d112      	bne.n	80012ba <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	695a      	ldr	r2, [r3, #20]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2107      	movs	r1, #7
 80012a0:	438a      	bics	r2, r1
 80012a2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6959      	ldr	r1, [r3, #20]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ae:	2207      	movs	r2, #7
 80012b0:	401a      	ands	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001334 <HAL_ADC_Init+0x27c>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d10b      	bne.n	80012e2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012d4:	2203      	movs	r2, #3
 80012d6:	4393      	bics	r3, r2
 80012d8:	2201      	movs	r2, #1
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80012e0:	e01c      	b.n	800131c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012e6:	2212      	movs	r2, #18
 80012e8:	4393      	bics	r3, r2
 80012ea:	2210      	movs	r2, #16
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012f6:	2201      	movs	r2, #1
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80012fe:	230f      	movs	r3, #15
 8001300:	18fb      	adds	r3, r7, r3
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001306:	e009      	b.n	800131c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800130c:	2210      	movs	r2, #16
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001314:	230f      	movs	r3, #15
 8001316:	18fb      	adds	r3, r7, r3
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800131c:	230f      	movs	r3, #15
 800131e:	18fb      	adds	r3, r7, r3
 8001320:	781b      	ldrb	r3, [r3, #0]
}
 8001322:	0018      	movs	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	b004      	add	sp, #16
 8001328:	bd80      	pop	{r7, pc}
 800132a:	46c0      	nop			@ (mov r8, r8)
 800132c:	fffffefd 	.word	0xfffffefd
 8001330:	fffe0219 	.word	0xfffe0219
 8001334:	833fffe7 	.word	0x833fffe7

08001338 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001340:	230f      	movs	r3, #15
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2204      	movs	r2, #4
 8001350:	4013      	ands	r3, r2
 8001352:	d138      	bne.n	80013c6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2234      	movs	r2, #52	@ 0x34
 8001358:	5c9b      	ldrb	r3, [r3, r2]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d101      	bne.n	8001362 <HAL_ADC_Start+0x2a>
 800135e:	2302      	movs	r3, #2
 8001360:	e038      	b.n	80013d4 <HAL_ADC_Start+0x9c>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2234      	movs	r2, #52	@ 0x34
 8001366:	2101      	movs	r1, #1
 8001368:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7e5b      	ldrb	r3, [r3, #25]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d007      	beq.n	8001382 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001372:	230f      	movs	r3, #15
 8001374:	18fc      	adds	r4, r7, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	0018      	movs	r0, r3
 800137a:	f000 f9e3 	bl	8001744 <ADC_Enable>
 800137e:	0003      	movs	r3, r0
 8001380:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001382:	230f      	movs	r3, #15
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d120      	bne.n	80013ce <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001390:	4a12      	ldr	r2, [pc, #72]	@ (80013dc <HAL_ADC_Start+0xa4>)
 8001392:	4013      	ands	r3, r2
 8001394:	2280      	movs	r2, #128	@ 0x80
 8001396:	0052      	lsls	r2, r2, #1
 8001398:	431a      	orrs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2234      	movs	r2, #52	@ 0x34
 80013a8:	2100      	movs	r1, #0
 80013aa:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	221c      	movs	r2, #28
 80013b2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2104      	movs	r1, #4
 80013c0:	430a      	orrs	r2, r1
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	e003      	b.n	80013ce <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013c6:	230f      	movs	r3, #15
 80013c8:	18fb      	adds	r3, r7, r3
 80013ca:	2202      	movs	r2, #2
 80013cc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013ce:	230f      	movs	r3, #15
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	781b      	ldrb	r3, [r3, #0]
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b005      	add	sp, #20
 80013da:	bd90      	pop	{r4, r7, pc}
 80013dc:	fffff0fe 	.word	0xfffff0fe

080013e0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d102      	bne.n	80013f8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80013f2:	2308      	movs	r3, #8
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	e014      	b.n	8001422 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	2201      	movs	r2, #1
 8001400:	4013      	ands	r3, r2
 8001402:	2b01      	cmp	r3, #1
 8001404:	d10b      	bne.n	800141e <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800140a:	2220      	movs	r2, #32
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2234      	movs	r2, #52	@ 0x34
 8001416:	2100      	movs	r1, #0
 8001418:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e071      	b.n	8001502 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800141e:	230c      	movs	r3, #12
 8001420:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001422:	f7ff fe1b 	bl	800105c <HAL_GetTick>
 8001426:	0003      	movs	r3, r0
 8001428:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800142a:	e01f      	b.n	800146c <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3301      	adds	r3, #1
 8001430:	d01c      	beq.n	800146c <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d007      	beq.n	8001448 <HAL_ADC_PollForConversion+0x68>
 8001438:	f7ff fe10 	bl	800105c <HAL_GetTick>
 800143c:	0002      	movs	r2, r0
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d211      	bcs.n	800146c <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	4013      	ands	r3, r2
 8001452:	d10b      	bne.n	800146c <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001458:	2204      	movs	r2, #4
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2234      	movs	r2, #52	@ 0x34
 8001464:	2100      	movs	r1, #0
 8001466:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e04a      	b.n	8001502 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4013      	ands	r3, r2
 8001476:	d0d9      	beq.n	800142c <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800147c:	2280      	movs	r2, #128	@ 0x80
 800147e:	0092      	lsls	r2, r2, #2
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68da      	ldr	r2, [r3, #12]
 800148c:	23c0      	movs	r3, #192	@ 0xc0
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	4013      	ands	r3, r2
 8001492:	d12d      	bne.n	80014f0 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001498:	2b00      	cmp	r3, #0
 800149a:	d129      	bne.n	80014f0 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2208      	movs	r2, #8
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d122      	bne.n	80014f0 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2204      	movs	r2, #4
 80014b2:	4013      	ands	r3, r2
 80014b4:	d110      	bne.n	80014d8 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	210c      	movs	r1, #12
 80014c2:	438a      	bics	r2, r1
 80014c4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ca:	4a10      	ldr	r2, [pc, #64]	@ (800150c <HAL_ADC_PollForConversion+0x12c>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	2201      	movs	r2, #1
 80014d0:	431a      	orrs	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80014d6:	e00b      	b.n	80014f0 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014dc:	2220      	movs	r2, #32
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014e8:	2201      	movs	r2, #1
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7e1b      	ldrb	r3, [r3, #24]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d103      	bne.n	8001500 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	220c      	movs	r2, #12
 80014fe:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	0018      	movs	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	b004      	add	sp, #16
 8001508:	bd80      	pop	{r7, pc}
 800150a:	46c0      	nop			@ (mov r8, r8)
 800150c:	fffffefe 	.word	0xfffffefe

08001510 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	b002      	add	sp, #8
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001532:	230f      	movs	r3, #15
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001542:	2380      	movs	r3, #128	@ 0x80
 8001544:	055b      	lsls	r3, r3, #21
 8001546:	429a      	cmp	r2, r3
 8001548:	d011      	beq.n	800156e <HAL_ADC_ConfigChannel+0x46>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800154e:	2b01      	cmp	r3, #1
 8001550:	d00d      	beq.n	800156e <HAL_ADC_ConfigChannel+0x46>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001556:	2b02      	cmp	r3, #2
 8001558:	d009      	beq.n	800156e <HAL_ADC_ConfigChannel+0x46>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800155e:	2b03      	cmp	r3, #3
 8001560:	d005      	beq.n	800156e <HAL_ADC_ConfigChannel+0x46>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001566:	2b04      	cmp	r3, #4
 8001568:	d001      	beq.n	800156e <HAL_ADC_ConfigChannel+0x46>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2234      	movs	r2, #52	@ 0x34
 8001572:	5c9b      	ldrb	r3, [r3, r2]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d101      	bne.n	800157c <HAL_ADC_ConfigChannel+0x54>
 8001578:	2302      	movs	r3, #2
 800157a:	e0d0      	b.n	800171e <HAL_ADC_ConfigChannel+0x1f6>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2234      	movs	r2, #52	@ 0x34
 8001580:	2101      	movs	r1, #1
 8001582:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2204      	movs	r2, #4
 800158c:	4013      	ands	r3, r2
 800158e:	d000      	beq.n	8001592 <HAL_ADC_ConfigChannel+0x6a>
 8001590:	e0b4      	b.n	80016fc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4a64      	ldr	r2, [pc, #400]	@ (8001728 <HAL_ADC_ConfigChannel+0x200>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d100      	bne.n	800159e <HAL_ADC_ConfigChannel+0x76>
 800159c:	e082      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2201      	movs	r2, #1
 80015aa:	409a      	lsls	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015b8:	2380      	movs	r3, #128	@ 0x80
 80015ba:	055b      	lsls	r3, r3, #21
 80015bc:	429a      	cmp	r2, r3
 80015be:	d037      	beq.n	8001630 <HAL_ADC_ConfigChannel+0x108>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d033      	beq.n	8001630 <HAL_ADC_ConfigChannel+0x108>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d02f      	beq.n	8001630 <HAL_ADC_ConfigChannel+0x108>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d02b      	beq.n	8001630 <HAL_ADC_ConfigChannel+0x108>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d027      	beq.n	8001630 <HAL_ADC_ConfigChannel+0x108>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e4:	2b05      	cmp	r3, #5
 80015e6:	d023      	beq.n	8001630 <HAL_ADC_ConfigChannel+0x108>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ec:	2b06      	cmp	r3, #6
 80015ee:	d01f      	beq.n	8001630 <HAL_ADC_ConfigChannel+0x108>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f4:	2b07      	cmp	r3, #7
 80015f6:	d01b      	beq.n	8001630 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	2107      	movs	r1, #7
 8001604:	400b      	ands	r3, r1
 8001606:	429a      	cmp	r2, r3
 8001608:	d012      	beq.n	8001630 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	695a      	ldr	r2, [r3, #20]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2107      	movs	r1, #7
 8001616:	438a      	bics	r2, r1
 8001618:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6959      	ldr	r1, [r3, #20]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2207      	movs	r2, #7
 8001626:	401a      	ands	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b10      	cmp	r3, #16
 8001636:	d007      	beq.n	8001648 <HAL_ADC_ConfigChannel+0x120>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b11      	cmp	r3, #17
 800163e:	d003      	beq.n	8001648 <HAL_ADC_ConfigChannel+0x120>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b12      	cmp	r3, #18
 8001646:	d163      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001648:	4b38      	ldr	r3, [pc, #224]	@ (800172c <HAL_ADC_ConfigChannel+0x204>)
 800164a:	6819      	ldr	r1, [r3, #0]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b10      	cmp	r3, #16
 8001652:	d009      	beq.n	8001668 <HAL_ADC_ConfigChannel+0x140>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b11      	cmp	r3, #17
 800165a:	d102      	bne.n	8001662 <HAL_ADC_ConfigChannel+0x13a>
 800165c:	2380      	movs	r3, #128	@ 0x80
 800165e:	03db      	lsls	r3, r3, #15
 8001660:	e004      	b.n	800166c <HAL_ADC_ConfigChannel+0x144>
 8001662:	2380      	movs	r3, #128	@ 0x80
 8001664:	045b      	lsls	r3, r3, #17
 8001666:	e001      	b.n	800166c <HAL_ADC_ConfigChannel+0x144>
 8001668:	2380      	movs	r3, #128	@ 0x80
 800166a:	041b      	lsls	r3, r3, #16
 800166c:	4a2f      	ldr	r2, [pc, #188]	@ (800172c <HAL_ADC_ConfigChannel+0x204>)
 800166e:	430b      	orrs	r3, r1
 8001670:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b10      	cmp	r3, #16
 8001678:	d14a      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800167a:	4b2d      	ldr	r3, [pc, #180]	@ (8001730 <HAL_ADC_ConfigChannel+0x208>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	492d      	ldr	r1, [pc, #180]	@ (8001734 <HAL_ADC_ConfigChannel+0x20c>)
 8001680:	0018      	movs	r0, r3
 8001682:	f7fe fd4b 	bl	800011c <__udivsi3>
 8001686:	0003      	movs	r3, r0
 8001688:	001a      	movs	r2, r3
 800168a:	0013      	movs	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	189b      	adds	r3, r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001694:	e002      	b.n	800169c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	3b01      	subs	r3, #1
 800169a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f9      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x16e>
 80016a2:	e035      	b.n	8001710 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2101      	movs	r1, #1
 80016b0:	4099      	lsls	r1, r3
 80016b2:	000b      	movs	r3, r1
 80016b4:	43d9      	mvns	r1, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	400a      	ands	r2, r1
 80016bc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b10      	cmp	r3, #16
 80016c4:	d007      	beq.n	80016d6 <HAL_ADC_ConfigChannel+0x1ae>
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b11      	cmp	r3, #17
 80016cc:	d003      	beq.n	80016d6 <HAL_ADC_ConfigChannel+0x1ae>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b12      	cmp	r3, #18
 80016d4:	d11c      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80016d6:	4b15      	ldr	r3, [pc, #84]	@ (800172c <HAL_ADC_ConfigChannel+0x204>)
 80016d8:	6819      	ldr	r1, [r3, #0]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b10      	cmp	r3, #16
 80016e0:	d007      	beq.n	80016f2 <HAL_ADC_ConfigChannel+0x1ca>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b11      	cmp	r3, #17
 80016e8:	d101      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x1c6>
 80016ea:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <HAL_ADC_ConfigChannel+0x210>)
 80016ec:	e002      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x1cc>
 80016ee:	4b13      	ldr	r3, [pc, #76]	@ (800173c <HAL_ADC_ConfigChannel+0x214>)
 80016f0:	e000      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x1cc>
 80016f2:	4b13      	ldr	r3, [pc, #76]	@ (8001740 <HAL_ADC_ConfigChannel+0x218>)
 80016f4:	4a0d      	ldr	r2, [pc, #52]	@ (800172c <HAL_ADC_ConfigChannel+0x204>)
 80016f6:	400b      	ands	r3, r1
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e009      	b.n	8001710 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001700:	2220      	movs	r2, #32
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001708:	230f      	movs	r3, #15
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	2201      	movs	r2, #1
 800170e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2234      	movs	r2, #52	@ 0x34
 8001714:	2100      	movs	r1, #0
 8001716:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001718:	230f      	movs	r3, #15
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	781b      	ldrb	r3, [r3, #0]
}
 800171e:	0018      	movs	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	b004      	add	sp, #16
 8001724:	bd80      	pop	{r7, pc}
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	00001001 	.word	0x00001001
 800172c:	40012708 	.word	0x40012708
 8001730:	20000000 	.word	0x20000000
 8001734:	000f4240 	.word	0x000f4240
 8001738:	ffbfffff 	.word	0xffbfffff
 800173c:	feffffff 	.word	0xfeffffff
 8001740:	ff7fffff 	.word	0xff7fffff

08001744 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2203      	movs	r2, #3
 800175c:	4013      	ands	r3, r2
 800175e:	2b01      	cmp	r3, #1
 8001760:	d112      	bne.n	8001788 <ADC_Enable+0x44>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2201      	movs	r2, #1
 800176a:	4013      	ands	r3, r2
 800176c:	2b01      	cmp	r3, #1
 800176e:	d009      	beq.n	8001784 <ADC_Enable+0x40>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	2380      	movs	r3, #128	@ 0x80
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	401a      	ands	r2, r3
 800177c:	2380      	movs	r3, #128	@ 0x80
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	429a      	cmp	r2, r3
 8001782:	d101      	bne.n	8001788 <ADC_Enable+0x44>
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <ADC_Enable+0x46>
 8001788:	2300      	movs	r3, #0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d152      	bne.n	8001834 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a2a      	ldr	r2, [pc, #168]	@ (8001840 <ADC_Enable+0xfc>)
 8001796:	4013      	ands	r3, r2
 8001798:	d00d      	beq.n	80017b6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800179e:	2210      	movs	r2, #16
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017aa:	2201      	movs	r2, #1
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e03f      	b.n	8001836 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2101      	movs	r1, #1
 80017c2:	430a      	orrs	r2, r1
 80017c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001844 <ADC_Enable+0x100>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	491f      	ldr	r1, [pc, #124]	@ (8001848 <ADC_Enable+0x104>)
 80017cc:	0018      	movs	r0, r3
 80017ce:	f7fe fca5 	bl	800011c <__udivsi3>
 80017d2:	0003      	movs	r3, r0
 80017d4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017d6:	e002      	b.n	80017de <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	3b01      	subs	r3, #1
 80017dc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1f9      	bne.n	80017d8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80017e4:	f7ff fc3a 	bl	800105c <HAL_GetTick>
 80017e8:	0003      	movs	r3, r0
 80017ea:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017ec:	e01b      	b.n	8001826 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017ee:	f7ff fc35 	bl	800105c <HAL_GetTick>
 80017f2:	0002      	movs	r2, r0
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d914      	bls.n	8001826 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2201      	movs	r2, #1
 8001804:	4013      	ands	r3, r2
 8001806:	2b01      	cmp	r3, #1
 8001808:	d00d      	beq.n	8001826 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800180e:	2210      	movs	r2, #16
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800181a:	2201      	movs	r2, #1
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e007      	b.n	8001836 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2201      	movs	r2, #1
 800182e:	4013      	ands	r3, r2
 8001830:	2b01      	cmp	r3, #1
 8001832:	d1dc      	bne.n	80017ee <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	0018      	movs	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	b004      	add	sp, #16
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			@ (mov r8, r8)
 8001840:	80000017 	.word	0x80000017
 8001844:	20000000 	.word	0x20000000
 8001848:	000f4240 	.word	0x000f4240

0800184c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	0002      	movs	r2, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001860:	d828      	bhi.n	80018b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001862:	4a2f      	ldr	r2, [pc, #188]	@ (8001920 <__NVIC_SetPriority+0xd4>)
 8001864:	1dfb      	adds	r3, r7, #7
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	b25b      	sxtb	r3, r3
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	33c0      	adds	r3, #192	@ 0xc0
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	589b      	ldr	r3, [r3, r2]
 8001872:	1dfa      	adds	r2, r7, #7
 8001874:	7812      	ldrb	r2, [r2, #0]
 8001876:	0011      	movs	r1, r2
 8001878:	2203      	movs	r2, #3
 800187a:	400a      	ands	r2, r1
 800187c:	00d2      	lsls	r2, r2, #3
 800187e:	21ff      	movs	r1, #255	@ 0xff
 8001880:	4091      	lsls	r1, r2
 8001882:	000a      	movs	r2, r1
 8001884:	43d2      	mvns	r2, r2
 8001886:	401a      	ands	r2, r3
 8001888:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	019b      	lsls	r3, r3, #6
 800188e:	22ff      	movs	r2, #255	@ 0xff
 8001890:	401a      	ands	r2, r3
 8001892:	1dfb      	adds	r3, r7, #7
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	0018      	movs	r0, r3
 8001898:	2303      	movs	r3, #3
 800189a:	4003      	ands	r3, r0
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018a0:	481f      	ldr	r0, [pc, #124]	@ (8001920 <__NVIC_SetPriority+0xd4>)
 80018a2:	1dfb      	adds	r3, r7, #7
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b25b      	sxtb	r3, r3
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	430a      	orrs	r2, r1
 80018ac:	33c0      	adds	r3, #192	@ 0xc0
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018b2:	e031      	b.n	8001918 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001924 <__NVIC_SetPriority+0xd8>)
 80018b6:	1dfb      	adds	r3, r7, #7
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	0019      	movs	r1, r3
 80018bc:	230f      	movs	r3, #15
 80018be:	400b      	ands	r3, r1
 80018c0:	3b08      	subs	r3, #8
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3306      	adds	r3, #6
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	18d3      	adds	r3, r2, r3
 80018ca:	3304      	adds	r3, #4
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	1dfa      	adds	r2, r7, #7
 80018d0:	7812      	ldrb	r2, [r2, #0]
 80018d2:	0011      	movs	r1, r2
 80018d4:	2203      	movs	r2, #3
 80018d6:	400a      	ands	r2, r1
 80018d8:	00d2      	lsls	r2, r2, #3
 80018da:	21ff      	movs	r1, #255	@ 0xff
 80018dc:	4091      	lsls	r1, r2
 80018de:	000a      	movs	r2, r1
 80018e0:	43d2      	mvns	r2, r2
 80018e2:	401a      	ands	r2, r3
 80018e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	019b      	lsls	r3, r3, #6
 80018ea:	22ff      	movs	r2, #255	@ 0xff
 80018ec:	401a      	ands	r2, r3
 80018ee:	1dfb      	adds	r3, r7, #7
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	0018      	movs	r0, r3
 80018f4:	2303      	movs	r3, #3
 80018f6:	4003      	ands	r3, r0
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018fc:	4809      	ldr	r0, [pc, #36]	@ (8001924 <__NVIC_SetPriority+0xd8>)
 80018fe:	1dfb      	adds	r3, r7, #7
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	001c      	movs	r4, r3
 8001904:	230f      	movs	r3, #15
 8001906:	4023      	ands	r3, r4
 8001908:	3b08      	subs	r3, #8
 800190a:	089b      	lsrs	r3, r3, #2
 800190c:	430a      	orrs	r2, r1
 800190e:	3306      	adds	r3, #6
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	18c3      	adds	r3, r0, r3
 8001914:	3304      	adds	r3, #4
 8001916:	601a      	str	r2, [r3, #0]
}
 8001918:	46c0      	nop			@ (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	b003      	add	sp, #12
 800191e:	bd90      	pop	{r4, r7, pc}
 8001920:	e000e100 	.word	0xe000e100
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	1e5a      	subs	r2, r3, #1
 8001934:	2380      	movs	r3, #128	@ 0x80
 8001936:	045b      	lsls	r3, r3, #17
 8001938:	429a      	cmp	r2, r3
 800193a:	d301      	bcc.n	8001940 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193c:	2301      	movs	r3, #1
 800193e:	e010      	b.n	8001962 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001940:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <SysTick_Config+0x44>)
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	3a01      	subs	r2, #1
 8001946:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001948:	2301      	movs	r3, #1
 800194a:	425b      	negs	r3, r3
 800194c:	2103      	movs	r1, #3
 800194e:	0018      	movs	r0, r3
 8001950:	f7ff ff7c 	bl	800184c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001954:	4b05      	ldr	r3, [pc, #20]	@ (800196c <SysTick_Config+0x44>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195a:	4b04      	ldr	r3, [pc, #16]	@ (800196c <SysTick_Config+0x44>)
 800195c:	2207      	movs	r2, #7
 800195e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001960:	2300      	movs	r3, #0
}
 8001962:	0018      	movs	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	b002      	add	sp, #8
 8001968:	bd80      	pop	{r7, pc}
 800196a:	46c0      	nop			@ (mov r8, r8)
 800196c:	e000e010 	.word	0xe000e010

08001970 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	210f      	movs	r1, #15
 800197c:	187b      	adds	r3, r7, r1
 800197e:	1c02      	adds	r2, r0, #0
 8001980:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	187b      	adds	r3, r7, r1
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	b25b      	sxtb	r3, r3
 800198a:	0011      	movs	r1, r2
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff ff5d 	bl	800184c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001992:	46c0      	nop			@ (mov r8, r8)
 8001994:	46bd      	mov	sp, r7
 8001996:	b004      	add	sp, #16
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7ff ffbf 	bl	8001928 <SysTick_Config>
 80019aa:	0003      	movs	r3, r0
}
 80019ac:	0018      	movs	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b002      	add	sp, #8
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c2:	e155      	b.n	8001c70 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2101      	movs	r1, #1
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	4091      	lsls	r1, r2
 80019ce:	000a      	movs	r2, r1
 80019d0:	4013      	ands	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d100      	bne.n	80019dc <HAL_GPIO_Init+0x28>
 80019da:	e146      	b.n	8001c6a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2203      	movs	r2, #3
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d005      	beq.n	80019f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2203      	movs	r2, #3
 80019ee:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d130      	bne.n	8001a56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	409a      	lsls	r2, r3
 8001a02:	0013      	movs	r3, r2
 8001a04:	43da      	mvns	r2, r3
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	409a      	lsls	r2, r3
 8001a16:	0013      	movs	r3, r2
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	0013      	movs	r3, r2
 8001a32:	43da      	mvns	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	091b      	lsrs	r3, r3, #4
 8001a40:	2201      	movs	r2, #1
 8001a42:	401a      	ands	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	409a      	lsls	r2, r3
 8001a48:	0013      	movs	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d017      	beq.n	8001a92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	0013      	movs	r3, r2
 8001a72:	43da      	mvns	r2, r3
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	409a      	lsls	r2, r3
 8001a84:	0013      	movs	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2203      	movs	r2, #3
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d123      	bne.n	8001ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	08da      	lsrs	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3208      	adds	r2, #8
 8001aa6:	0092      	lsls	r2, r2, #2
 8001aa8:	58d3      	ldr	r3, [r2, r3]
 8001aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2207      	movs	r2, #7
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	0013      	movs	r3, r2
 8001aba:	43da      	mvns	r2, r3
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	691a      	ldr	r2, [r3, #16]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2107      	movs	r1, #7
 8001aca:	400b      	ands	r3, r1
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	0013      	movs	r3, r2
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	08da      	lsrs	r2, r3, #3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3208      	adds	r2, #8
 8001ae0:	0092      	lsls	r2, r2, #2
 8001ae2:	6939      	ldr	r1, [r7, #16]
 8001ae4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	2203      	movs	r2, #3
 8001af2:	409a      	lsls	r2, r3
 8001af4:	0013      	movs	r3, r2
 8001af6:	43da      	mvns	r2, r3
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2203      	movs	r2, #3
 8001b04:	401a      	ands	r2, r3
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	0013      	movs	r3, r2
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	23c0      	movs	r3, #192	@ 0xc0
 8001b20:	029b      	lsls	r3, r3, #10
 8001b22:	4013      	ands	r3, r2
 8001b24:	d100      	bne.n	8001b28 <HAL_GPIO_Init+0x174>
 8001b26:	e0a0      	b.n	8001c6a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b28:	4b57      	ldr	r3, [pc, #348]	@ (8001c88 <HAL_GPIO_Init+0x2d4>)
 8001b2a:	699a      	ldr	r2, [r3, #24]
 8001b2c:	4b56      	ldr	r3, [pc, #344]	@ (8001c88 <HAL_GPIO_Init+0x2d4>)
 8001b2e:	2101      	movs	r1, #1
 8001b30:	430a      	orrs	r2, r1
 8001b32:	619a      	str	r2, [r3, #24]
 8001b34:	4b54      	ldr	r3, [pc, #336]	@ (8001c88 <HAL_GPIO_Init+0x2d4>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b40:	4a52      	ldr	r2, [pc, #328]	@ (8001c8c <HAL_GPIO_Init+0x2d8>)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	3302      	adds	r3, #2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	589b      	ldr	r3, [r3, r2]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2203      	movs	r2, #3
 8001b52:	4013      	ands	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	220f      	movs	r2, #15
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	0013      	movs	r3, r2
 8001b5c:	43da      	mvns	r2, r3
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	2390      	movs	r3, #144	@ 0x90
 8001b68:	05db      	lsls	r3, r3, #23
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d019      	beq.n	8001ba2 <HAL_GPIO_Init+0x1ee>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a47      	ldr	r2, [pc, #284]	@ (8001c90 <HAL_GPIO_Init+0x2dc>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d013      	beq.n	8001b9e <HAL_GPIO_Init+0x1ea>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a46      	ldr	r2, [pc, #280]	@ (8001c94 <HAL_GPIO_Init+0x2e0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00d      	beq.n	8001b9a <HAL_GPIO_Init+0x1e6>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a45      	ldr	r2, [pc, #276]	@ (8001c98 <HAL_GPIO_Init+0x2e4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d007      	beq.n	8001b96 <HAL_GPIO_Init+0x1e2>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a44      	ldr	r2, [pc, #272]	@ (8001c9c <HAL_GPIO_Init+0x2e8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d101      	bne.n	8001b92 <HAL_GPIO_Init+0x1de>
 8001b8e:	2304      	movs	r3, #4
 8001b90:	e008      	b.n	8001ba4 <HAL_GPIO_Init+0x1f0>
 8001b92:	2305      	movs	r3, #5
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x1f0>
 8001b96:	2303      	movs	r3, #3
 8001b98:	e004      	b.n	8001ba4 <HAL_GPIO_Init+0x1f0>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e002      	b.n	8001ba4 <HAL_GPIO_Init+0x1f0>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_GPIO_Init+0x1f0>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	2103      	movs	r1, #3
 8001ba8:	400a      	ands	r2, r1
 8001baa:	0092      	lsls	r2, r2, #2
 8001bac:	4093      	lsls	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bb4:	4935      	ldr	r1, [pc, #212]	@ (8001c8c <HAL_GPIO_Init+0x2d8>)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bc2:	4b37      	ldr	r3, [pc, #220]	@ (8001ca0 <HAL_GPIO_Init+0x2ec>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	2380      	movs	r3, #128	@ 0x80
 8001bd8:	035b      	lsls	r3, r3, #13
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001be6:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca0 <HAL_GPIO_Init+0x2ec>)
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001bec:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca0 <HAL_GPIO_Init+0x2ec>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	43da      	mvns	r2, r3
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	2380      	movs	r3, #128	@ 0x80
 8001c02:	039b      	lsls	r3, r3, #14
 8001c04:	4013      	ands	r3, r2
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c10:	4b23      	ldr	r3, [pc, #140]	@ (8001ca0 <HAL_GPIO_Init+0x2ec>)
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001c16:	4b22      	ldr	r3, [pc, #136]	@ (8001ca0 <HAL_GPIO_Init+0x2ec>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	2380      	movs	r3, #128	@ 0x80
 8001c2c:	029b      	lsls	r3, r3, #10
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c3a:	4b19      	ldr	r3, [pc, #100]	@ (8001ca0 <HAL_GPIO_Init+0x2ec>)
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001c40:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <HAL_GPIO_Init+0x2ec>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	43da      	mvns	r2, r3
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	2380      	movs	r3, #128	@ 0x80
 8001c56:	025b      	lsls	r3, r3, #9
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca0 <HAL_GPIO_Init+0x2ec>)
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	40da      	lsrs	r2, r3
 8001c78:	1e13      	subs	r3, r2, #0
 8001c7a:	d000      	beq.n	8001c7e <HAL_GPIO_Init+0x2ca>
 8001c7c:	e6a2      	b.n	80019c4 <HAL_GPIO_Init+0x10>
  } 
}
 8001c7e:	46c0      	nop			@ (mov r8, r8)
 8001c80:	46c0      	nop			@ (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b006      	add	sp, #24
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40010000 	.word	0x40010000
 8001c90:	48000400 	.word	0x48000400
 8001c94:	48000800 	.word	0x48000800
 8001c98:	48000c00 	.word	0x48000c00
 8001c9c:	48001000 	.word	0x48001000
 8001ca0:	40010400 	.word	0x40010400

08001ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	0008      	movs	r0, r1
 8001cae:	0011      	movs	r1, r2
 8001cb0:	1cbb      	adds	r3, r7, #2
 8001cb2:	1c02      	adds	r2, r0, #0
 8001cb4:	801a      	strh	r2, [r3, #0]
 8001cb6:	1c7b      	adds	r3, r7, #1
 8001cb8:	1c0a      	adds	r2, r1, #0
 8001cba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cbc:	1c7b      	adds	r3, r7, #1
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d004      	beq.n	8001cce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cc4:	1cbb      	adds	r3, r7, #2
 8001cc6:	881a      	ldrh	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ccc:	e003      	b.n	8001cd6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cce:	1cbb      	adds	r3, r7, #2
 8001cd0:	881a      	ldrh	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b002      	add	sp, #8
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e08f      	b.n	8001e12 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2241      	movs	r2, #65	@ 0x41
 8001cf6:	5c9b      	ldrb	r3, [r3, r2]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d107      	bne.n	8001d0e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2240      	movs	r2, #64	@ 0x40
 8001d02:	2100      	movs	r1, #0
 8001d04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f7fe ff19 	bl	8000b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2241      	movs	r2, #65	@ 0x41
 8001d12:	2124      	movs	r1, #36	@ 0x24
 8001d14:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2101      	movs	r1, #1
 8001d22:	438a      	bics	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	493b      	ldr	r1, [pc, #236]	@ (8001e1c <HAL_I2C_Init+0x13c>)
 8001d30:	400a      	ands	r2, r1
 8001d32:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4938      	ldr	r1, [pc, #224]	@ (8001e20 <HAL_I2C_Init+0x140>)
 8001d40:	400a      	ands	r2, r1
 8001d42:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d108      	bne.n	8001d5e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2180      	movs	r1, #128	@ 0x80
 8001d56:	0209      	lsls	r1, r1, #8
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	e007      	b.n	8001d6e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2184      	movs	r1, #132	@ 0x84
 8001d68:	0209      	lsls	r1, r1, #8
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d109      	bne.n	8001d8a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2180      	movs	r1, #128	@ 0x80
 8001d82:	0109      	lsls	r1, r1, #4
 8001d84:	430a      	orrs	r2, r1
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	e007      	b.n	8001d9a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4923      	ldr	r1, [pc, #140]	@ (8001e24 <HAL_I2C_Init+0x144>)
 8001d96:	400a      	ands	r2, r1
 8001d98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4920      	ldr	r1, [pc, #128]	@ (8001e28 <HAL_I2C_Init+0x148>)
 8001da6:	430a      	orrs	r2, r1
 8001da8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	491a      	ldr	r1, [pc, #104]	@ (8001e20 <HAL_I2C_Init+0x140>)
 8001db6:	400a      	ands	r2, r1
 8001db8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69d9      	ldr	r1, [r3, #28]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1a      	ldr	r2, [r3, #32]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2101      	movs	r1, #1
 8001df0:	430a      	orrs	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2241      	movs	r2, #65	@ 0x41
 8001dfe:	2120      	movs	r1, #32
 8001e00:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2242      	movs	r2, #66	@ 0x42
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	0018      	movs	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b002      	add	sp, #8
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			@ (mov r8, r8)
 8001e1c:	f0ffffff 	.word	0xf0ffffff
 8001e20:	ffff7fff 	.word	0xffff7fff
 8001e24:	fffff7ff 	.word	0xfffff7ff
 8001e28:	02008000 	.word	0x02008000

08001e2c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b089      	sub	sp, #36	@ 0x24
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	0008      	movs	r0, r1
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	0019      	movs	r1, r3
 8001e3a:	230a      	movs	r3, #10
 8001e3c:	18fb      	adds	r3, r7, r3
 8001e3e:	1c02      	adds	r2, r0, #0
 8001e40:	801a      	strh	r2, [r3, #0]
 8001e42:	2308      	movs	r3, #8
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	1c0a      	adds	r2, r1, #0
 8001e48:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2241      	movs	r2, #65	@ 0x41
 8001e4e:	5c9b      	ldrb	r3, [r3, r2]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	d000      	beq.n	8001e58 <HAL_I2C_Master_Transmit+0x2c>
 8001e56:	e10a      	b.n	800206e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2240      	movs	r2, #64	@ 0x40
 8001e5c:	5c9b      	ldrb	r3, [r3, r2]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_I2C_Master_Transmit+0x3a>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e104      	b.n	8002070 <HAL_I2C_Master_Transmit+0x244>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2240      	movs	r2, #64	@ 0x40
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e6e:	f7ff f8f5 	bl	800105c <HAL_GetTick>
 8001e72:	0003      	movs	r3, r0
 8001e74:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e76:	2380      	movs	r3, #128	@ 0x80
 8001e78:	0219      	lsls	r1, r3, #8
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2319      	movs	r3, #25
 8001e82:	2201      	movs	r2, #1
 8001e84:	f000 f91e 	bl	80020c4 <I2C_WaitOnFlagUntilTimeout>
 8001e88:	1e03      	subs	r3, r0, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0ef      	b.n	8002070 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2241      	movs	r2, #65	@ 0x41
 8001e94:	2121      	movs	r1, #33	@ 0x21
 8001e96:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2242      	movs	r2, #66	@ 0x42
 8001e9c:	2110      	movs	r1, #16
 8001e9e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2208      	movs	r2, #8
 8001eb0:	18ba      	adds	r2, r7, r2
 8001eb2:	8812      	ldrh	r2, [r2, #0]
 8001eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	2bff      	cmp	r3, #255	@ 0xff
 8001ec4:	d906      	bls.n	8001ed4 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	22ff      	movs	r2, #255	@ 0xff
 8001eca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001ecc:	2380      	movs	r3, #128	@ 0x80
 8001ece:	045b      	lsls	r3, r3, #17
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	e007      	b.n	8001ee4 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001ede:	2380      	movs	r3, #128	@ 0x80
 8001ee0:	049b      	lsls	r3, r3, #18
 8001ee2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d027      	beq.n	8001f3c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef0:	781a      	ldrb	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	3301      	adds	r3, #1
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	697c      	ldr	r4, [r7, #20]
 8001f28:	230a      	movs	r3, #10
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	8819      	ldrh	r1, [r3, #0]
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	4b51      	ldr	r3, [pc, #324]	@ (8002078 <HAL_I2C_Master_Transmit+0x24c>)
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	0023      	movs	r3, r4
 8001f36:	f000 fa9f 	bl	8002478 <I2C_TransferConfig>
 8001f3a:	e06f      	b.n	800201c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	697c      	ldr	r4, [r7, #20]
 8001f44:	230a      	movs	r3, #10
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	8819      	ldrh	r1, [r3, #0]
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	4b4a      	ldr	r3, [pc, #296]	@ (8002078 <HAL_I2C_Master_Transmit+0x24c>)
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	0023      	movs	r3, r4
 8001f52:	f000 fa91 	bl	8002478 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001f56:	e061      	b.n	800201c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f000 f908 	bl	8002174 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f64:	1e03      	subs	r3, r0, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e081      	b.n	8002070 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f70:	781a      	ldrb	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d03a      	beq.n	800201c <HAL_I2C_Master_Transmit+0x1f0>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d136      	bne.n	800201c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	0013      	movs	r3, r2
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2180      	movs	r1, #128	@ 0x80
 8001fbc:	f000 f882 	bl	80020c4 <I2C_WaitOnFlagUntilTimeout>
 8001fc0:	1e03      	subs	r3, r0, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e053      	b.n	8002070 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	2bff      	cmp	r3, #255	@ 0xff
 8001fd0:	d911      	bls.n	8001ff6 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	22ff      	movs	r2, #255	@ 0xff
 8001fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	2380      	movs	r3, #128	@ 0x80
 8001fe0:	045c      	lsls	r4, r3, #17
 8001fe2:	230a      	movs	r3, #10
 8001fe4:	18fb      	adds	r3, r7, r3
 8001fe6:	8819      	ldrh	r1, [r3, #0]
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	2300      	movs	r3, #0
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	0023      	movs	r3, r4
 8001ff0:	f000 fa42 	bl	8002478 <I2C_TransferConfig>
 8001ff4:	e012      	b.n	800201c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002004:	b2da      	uxtb	r2, r3
 8002006:	2380      	movs	r3, #128	@ 0x80
 8002008:	049c      	lsls	r4, r3, #18
 800200a:	230a      	movs	r3, #10
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	8819      	ldrh	r1, [r3, #0]
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	2300      	movs	r3, #0
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	0023      	movs	r3, r4
 8002018:	f000 fa2e 	bl	8002478 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002020:	b29b      	uxth	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d198      	bne.n	8001f58 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	0018      	movs	r0, r3
 800202e:	f000 f8e7 	bl	8002200 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002032:	1e03      	subs	r3, r0, #0
 8002034:	d001      	beq.n	800203a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e01a      	b.n	8002070 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2220      	movs	r2, #32
 8002040:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	490b      	ldr	r1, [pc, #44]	@ (800207c <HAL_I2C_Master_Transmit+0x250>)
 800204e:	400a      	ands	r2, r1
 8002050:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2241      	movs	r2, #65	@ 0x41
 8002056:	2120      	movs	r1, #32
 8002058:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2242      	movs	r2, #66	@ 0x42
 800205e:	2100      	movs	r1, #0
 8002060:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2240      	movs	r2, #64	@ 0x40
 8002066:	2100      	movs	r1, #0
 8002068:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	e000      	b.n	8002070 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800206e:	2302      	movs	r3, #2
  }
}
 8002070:	0018      	movs	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	b007      	add	sp, #28
 8002076:	bd90      	pop	{r4, r7, pc}
 8002078:	80002000 	.word	0x80002000
 800207c:	fe00e800 	.word	0xfe00e800

08002080 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2202      	movs	r2, #2
 8002090:	4013      	ands	r3, r2
 8002092:	2b02      	cmp	r3, #2
 8002094:	d103      	bne.n	800209e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2200      	movs	r2, #0
 800209c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	2201      	movs	r2, #1
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d007      	beq.n	80020bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	699a      	ldr	r2, [r3, #24]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2101      	movs	r1, #1
 80020b8:	430a      	orrs	r2, r1
 80020ba:	619a      	str	r2, [r3, #24]
  }
}
 80020bc:	46c0      	nop			@ (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b002      	add	sp, #8
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	1dfb      	adds	r3, r7, #7
 80020d2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020d4:	e03a      	b.n	800214c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	6839      	ldr	r1, [r7, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	0018      	movs	r0, r3
 80020de:	f000 f8d3 	bl	8002288 <I2C_IsErrorOccurred>
 80020e2:	1e03      	subs	r3, r0, #0
 80020e4:	d001      	beq.n	80020ea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e040      	b.n	800216c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	3301      	adds	r3, #1
 80020ee:	d02d      	beq.n	800214c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f0:	f7fe ffb4 	bl	800105c <HAL_GetTick>
 80020f4:	0002      	movs	r2, r0
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d302      	bcc.n	8002106 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d122      	bne.n	800214c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	4013      	ands	r3, r2
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	425a      	negs	r2, r3
 8002116:	4153      	adcs	r3, r2
 8002118:	b2db      	uxtb	r3, r3
 800211a:	001a      	movs	r2, r3
 800211c:	1dfb      	adds	r3, r7, #7
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d113      	bne.n	800214c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002128:	2220      	movs	r2, #32
 800212a:	431a      	orrs	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2241      	movs	r2, #65	@ 0x41
 8002134:	2120      	movs	r1, #32
 8002136:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2242      	movs	r2, #66	@ 0x42
 800213c:	2100      	movs	r1, #0
 800213e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2240      	movs	r2, #64	@ 0x40
 8002144:	2100      	movs	r1, #0
 8002146:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e00f      	b.n	800216c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	4013      	ands	r3, r2
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	425a      	negs	r2, r3
 800215c:	4153      	adcs	r3, r2
 800215e:	b2db      	uxtb	r3, r3
 8002160:	001a      	movs	r2, r3
 8002162:	1dfb      	adds	r3, r7, #7
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d0b5      	beq.n	80020d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b004      	add	sp, #16
 8002172:	bd80      	pop	{r7, pc}

08002174 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002180:	e032      	b.n	80021e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	0018      	movs	r0, r3
 800218a:	f000 f87d 	bl	8002288 <I2C_IsErrorOccurred>
 800218e:	1e03      	subs	r3, r0, #0
 8002190:	d001      	beq.n	8002196 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e030      	b.n	80021f8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	3301      	adds	r3, #1
 800219a:	d025      	beq.n	80021e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800219c:	f7fe ff5e 	bl	800105c <HAL_GetTick>
 80021a0:	0002      	movs	r2, r0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d302      	bcc.n	80021b2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d11a      	bne.n	80021e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	2202      	movs	r2, #2
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d013      	beq.n	80021e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c4:	2220      	movs	r2, #32
 80021c6:	431a      	orrs	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2241      	movs	r2, #65	@ 0x41
 80021d0:	2120      	movs	r1, #32
 80021d2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2242      	movs	r2, #66	@ 0x42
 80021d8:	2100      	movs	r1, #0
 80021da:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2240      	movs	r2, #64	@ 0x40
 80021e0:	2100      	movs	r1, #0
 80021e2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e007      	b.n	80021f8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	2202      	movs	r2, #2
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d1c5      	bne.n	8002182 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b004      	add	sp, #16
 80021fe:	bd80      	pop	{r7, pc}

08002200 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800220c:	e02f      	b.n	800226e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	0018      	movs	r0, r3
 8002216:	f000 f837 	bl	8002288 <I2C_IsErrorOccurred>
 800221a:	1e03      	subs	r3, r0, #0
 800221c:	d001      	beq.n	8002222 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e02d      	b.n	800227e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002222:	f7fe ff1b 	bl	800105c <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	429a      	cmp	r2, r3
 8002230:	d302      	bcc.n	8002238 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d11a      	bne.n	800226e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	2220      	movs	r2, #32
 8002240:	4013      	ands	r3, r2
 8002242:	2b20      	cmp	r3, #32
 8002244:	d013      	beq.n	800226e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224a:	2220      	movs	r2, #32
 800224c:	431a      	orrs	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2241      	movs	r2, #65	@ 0x41
 8002256:	2120      	movs	r1, #32
 8002258:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2242      	movs	r2, #66	@ 0x42
 800225e:	2100      	movs	r1, #0
 8002260:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2240      	movs	r2, #64	@ 0x40
 8002266:	2100      	movs	r1, #0
 8002268:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e007      	b.n	800227e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	2220      	movs	r2, #32
 8002276:	4013      	ands	r3, r2
 8002278:	2b20      	cmp	r3, #32
 800227a:	d1c8      	bne.n	800220e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	0018      	movs	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	b004      	add	sp, #16
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	@ 0x28
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002294:	2327      	movs	r3, #39	@ 0x27
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2210      	movs	r2, #16
 80022b0:	4013      	ands	r3, r2
 80022b2:	d100      	bne.n	80022b6 <I2C_IsErrorOccurred+0x2e>
 80022b4:	e079      	b.n	80023aa <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2210      	movs	r2, #16
 80022bc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022be:	e057      	b.n	8002370 <I2C_IsErrorOccurred+0xe8>
 80022c0:	2227      	movs	r2, #39	@ 0x27
 80022c2:	18bb      	adds	r3, r7, r2
 80022c4:	18ba      	adds	r2, r7, r2
 80022c6:	7812      	ldrb	r2, [r2, #0]
 80022c8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	3301      	adds	r3, #1
 80022ce:	d04f      	beq.n	8002370 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022d0:	f7fe fec4 	bl	800105c <HAL_GetTick>
 80022d4:	0002      	movs	r2, r0
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d302      	bcc.n	80022e6 <I2C_IsErrorOccurred+0x5e>
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d144      	bne.n	8002370 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	2380      	movs	r3, #128	@ 0x80
 80022ee:	01db      	lsls	r3, r3, #7
 80022f0:	4013      	ands	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022f4:	2013      	movs	r0, #19
 80022f6:	183b      	adds	r3, r7, r0
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	2142      	movs	r1, #66	@ 0x42
 80022fc:	5c52      	ldrb	r2, [r2, r1]
 80022fe:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	2380      	movs	r3, #128	@ 0x80
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	401a      	ands	r2, r3
 800230c:	2380      	movs	r3, #128	@ 0x80
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	429a      	cmp	r2, r3
 8002312:	d126      	bne.n	8002362 <I2C_IsErrorOccurred+0xda>
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	2380      	movs	r3, #128	@ 0x80
 8002318:	01db      	lsls	r3, r3, #7
 800231a:	429a      	cmp	r2, r3
 800231c:	d021      	beq.n	8002362 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800231e:	183b      	adds	r3, r7, r0
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b20      	cmp	r3, #32
 8002324:	d01d      	beq.n	8002362 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2180      	movs	r1, #128	@ 0x80
 8002332:	01c9      	lsls	r1, r1, #7
 8002334:	430a      	orrs	r2, r1
 8002336:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002338:	f7fe fe90 	bl	800105c <HAL_GetTick>
 800233c:	0003      	movs	r3, r0
 800233e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002340:	e00f      	b.n	8002362 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002342:	f7fe fe8b 	bl	800105c <HAL_GetTick>
 8002346:	0002      	movs	r2, r0
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b19      	cmp	r3, #25
 800234e:	d908      	bls.n	8002362 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	2220      	movs	r2, #32
 8002354:	4313      	orrs	r3, r2
 8002356:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002358:	2327      	movs	r3, #39	@ 0x27
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]

              break;
 8002360:	e006      	b.n	8002370 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	2220      	movs	r2, #32
 800236a:	4013      	ands	r3, r2
 800236c:	2b20      	cmp	r3, #32
 800236e:	d1e8      	bne.n	8002342 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	2220      	movs	r2, #32
 8002378:	4013      	ands	r3, r2
 800237a:	2b20      	cmp	r3, #32
 800237c:	d004      	beq.n	8002388 <I2C_IsErrorOccurred+0x100>
 800237e:	2327      	movs	r3, #39	@ 0x27
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d09b      	beq.n	80022c0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002388:	2327      	movs	r3, #39	@ 0x27
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d103      	bne.n	800239a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2220      	movs	r2, #32
 8002398:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	2204      	movs	r2, #4
 800239e:	4313      	orrs	r3, r2
 80023a0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80023a2:	2327      	movs	r3, #39	@ 0x27
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	2201      	movs	r2, #1
 80023a8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	2380      	movs	r3, #128	@ 0x80
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4013      	ands	r3, r2
 80023ba:	d00c      	beq.n	80023d6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	2201      	movs	r2, #1
 80023c0:	4313      	orrs	r3, r2
 80023c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2280      	movs	r2, #128	@ 0x80
 80023ca:	0052      	lsls	r2, r2, #1
 80023cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023ce:	2327      	movs	r3, #39	@ 0x27
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	2380      	movs	r3, #128	@ 0x80
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4013      	ands	r3, r2
 80023de:	d00c      	beq.n	80023fa <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	2208      	movs	r2, #8
 80023e4:	4313      	orrs	r3, r2
 80023e6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2280      	movs	r2, #128	@ 0x80
 80023ee:	00d2      	lsls	r2, r2, #3
 80023f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023f2:	2327      	movs	r3, #39	@ 0x27
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	2380      	movs	r3, #128	@ 0x80
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4013      	ands	r3, r2
 8002402:	d00c      	beq.n	800241e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	2202      	movs	r2, #2
 8002408:	4313      	orrs	r3, r2
 800240a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2280      	movs	r2, #128	@ 0x80
 8002412:	0092      	lsls	r2, r2, #2
 8002414:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002416:	2327      	movs	r3, #39	@ 0x27
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	2201      	movs	r2, #1
 800241c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800241e:	2327      	movs	r3, #39	@ 0x27
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01d      	beq.n	8002464 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	0018      	movs	r0, r3
 800242c:	f7ff fe28 	bl	8002080 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	490e      	ldr	r1, [pc, #56]	@ (8002474 <I2C_IsErrorOccurred+0x1ec>)
 800243c:	400a      	ands	r2, r1
 800243e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	431a      	orrs	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2241      	movs	r2, #65	@ 0x41
 8002450:	2120      	movs	r1, #32
 8002452:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2242      	movs	r2, #66	@ 0x42
 8002458:	2100      	movs	r1, #0
 800245a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2240      	movs	r2, #64	@ 0x40
 8002460:	2100      	movs	r1, #0
 8002462:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002464:	2327      	movs	r3, #39	@ 0x27
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	781b      	ldrb	r3, [r3, #0]
}
 800246a:	0018      	movs	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	b00a      	add	sp, #40	@ 0x28
 8002470:	bd80      	pop	{r7, pc}
 8002472:	46c0      	nop			@ (mov r8, r8)
 8002474:	fe00e800 	.word	0xfe00e800

08002478 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002478:	b590      	push	{r4, r7, lr}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	0008      	movs	r0, r1
 8002482:	0011      	movs	r1, r2
 8002484:	607b      	str	r3, [r7, #4]
 8002486:	240a      	movs	r4, #10
 8002488:	193b      	adds	r3, r7, r4
 800248a:	1c02      	adds	r2, r0, #0
 800248c:	801a      	strh	r2, [r3, #0]
 800248e:	2009      	movs	r0, #9
 8002490:	183b      	adds	r3, r7, r0
 8002492:	1c0a      	adds	r2, r1, #0
 8002494:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002496:	193b      	adds	r3, r7, r4
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	059b      	lsls	r3, r3, #22
 800249c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800249e:	183b      	adds	r3, r7, r0
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	0419      	lsls	r1, r3, #16
 80024a4:	23ff      	movs	r3, #255	@ 0xff
 80024a6:	041b      	lsls	r3, r3, #16
 80024a8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024aa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b2:	4313      	orrs	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	085b      	lsrs	r3, r3, #1
 80024b8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024c2:	0d51      	lsrs	r1, r2, #21
 80024c4:	2280      	movs	r2, #128	@ 0x80
 80024c6:	00d2      	lsls	r2, r2, #3
 80024c8:	400a      	ands	r2, r1
 80024ca:	4907      	ldr	r1, [pc, #28]	@ (80024e8 <I2C_TransferConfig+0x70>)
 80024cc:	430a      	orrs	r2, r1
 80024ce:	43d2      	mvns	r2, r2
 80024d0:	401a      	ands	r2, r3
 80024d2:	0011      	movs	r1, r2
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	430a      	orrs	r2, r1
 80024dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024de:	46c0      	nop			@ (mov r8, r8)
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b007      	add	sp, #28
 80024e4:	bd90      	pop	{r4, r7, pc}
 80024e6:	46c0      	nop			@ (mov r8, r8)
 80024e8:	03ff63ff 	.word	0x03ff63ff

080024ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2241      	movs	r2, #65	@ 0x41
 80024fa:	5c9b      	ldrb	r3, [r3, r2]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d138      	bne.n	8002574 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2240      	movs	r2, #64	@ 0x40
 8002506:	5c9b      	ldrb	r3, [r3, r2]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800250c:	2302      	movs	r3, #2
 800250e:	e032      	b.n	8002576 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2240      	movs	r2, #64	@ 0x40
 8002514:	2101      	movs	r1, #1
 8002516:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2241      	movs	r2, #65	@ 0x41
 800251c:	2124      	movs	r1, #36	@ 0x24
 800251e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2101      	movs	r1, #1
 800252c:	438a      	bics	r2, r1
 800252e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4911      	ldr	r1, [pc, #68]	@ (8002580 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800253c:	400a      	ands	r2, r1
 800253e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6819      	ldr	r1, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2101      	movs	r1, #1
 800255c:	430a      	orrs	r2, r1
 800255e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2241      	movs	r2, #65	@ 0x41
 8002564:	2120      	movs	r1, #32
 8002566:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2240      	movs	r2, #64	@ 0x40
 800256c:	2100      	movs	r1, #0
 800256e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	e000      	b.n	8002576 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002574:	2302      	movs	r3, #2
  }
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b002      	add	sp, #8
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	ffffefff 	.word	0xffffefff

08002584 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2241      	movs	r2, #65	@ 0x41
 8002592:	5c9b      	ldrb	r3, [r3, r2]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b20      	cmp	r3, #32
 8002598:	d139      	bne.n	800260e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2240      	movs	r2, #64	@ 0x40
 800259e:	5c9b      	ldrb	r3, [r3, r2]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e033      	b.n	8002610 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2240      	movs	r2, #64	@ 0x40
 80025ac:	2101      	movs	r1, #1
 80025ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2241      	movs	r2, #65	@ 0x41
 80025b4:	2124      	movs	r1, #36	@ 0x24
 80025b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2101      	movs	r1, #1
 80025c4:	438a      	bics	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4a11      	ldr	r2, [pc, #68]	@ (8002618 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2101      	movs	r1, #1
 80025f6:	430a      	orrs	r2, r1
 80025f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2241      	movs	r2, #65	@ 0x41
 80025fe:	2120      	movs	r1, #32
 8002600:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2240      	movs	r2, #64	@ 0x40
 8002606:	2100      	movs	r1, #0
 8002608:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	e000      	b.n	8002610 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800260e:	2302      	movs	r3, #2
  }
}
 8002610:	0018      	movs	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	b004      	add	sp, #16
 8002616:	bd80      	pop	{r7, pc}
 8002618:	fffff0ff 	.word	0xfffff0ff

0800261c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800261c:	b590      	push	{r4, r7, lr}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e0e4      	b.n	80027f8 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a73      	ldr	r2, [pc, #460]	@ (8002800 <HAL_PCD_Init+0x1e4>)
 8002632:	5c9b      	ldrb	r3, [r3, r2]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d108      	bne.n	800264c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	23a4      	movs	r3, #164	@ 0xa4
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	2100      	movs	r1, #0
 8002642:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	0018      	movs	r0, r3
 8002648:	f7fe fc0e 	bl	8000e68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a6c      	ldr	r2, [pc, #432]	@ (8002800 <HAL_PCD_Init+0x1e4>)
 8002650:	2103      	movs	r1, #3
 8002652:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	0018      	movs	r0, r3
 800265a:	f001 f909 	bl	8003870 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800265e:	230f      	movs	r3, #15
 8002660:	18fb      	adds	r3, r7, r3
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	e047      	b.n	80026f8 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002668:	200f      	movs	r0, #15
 800266a:	183b      	adds	r3, r7, r0
 800266c:	781a      	ldrb	r2, [r3, #0]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	0013      	movs	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	189b      	adds	r3, r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	18cb      	adds	r3, r1, r3
 800267a:	3311      	adds	r3, #17
 800267c:	2201      	movs	r2, #1
 800267e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002680:	183b      	adds	r3, r7, r0
 8002682:	781a      	ldrb	r2, [r3, #0]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	0013      	movs	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	189b      	adds	r3, r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	18cb      	adds	r3, r1, r3
 8002690:	3310      	adds	r3, #16
 8002692:	183a      	adds	r2, r7, r0
 8002694:	7812      	ldrb	r2, [r2, #0]
 8002696:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002698:	183b      	adds	r3, r7, r0
 800269a:	781a      	ldrb	r2, [r3, #0]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	0013      	movs	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	189b      	adds	r3, r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	18cb      	adds	r3, r1, r3
 80026a8:	3313      	adds	r3, #19
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026ae:	183b      	adds	r3, r7, r0
 80026b0:	781a      	ldrb	r2, [r3, #0]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	0013      	movs	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	189b      	adds	r3, r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	18cb      	adds	r3, r1, r3
 80026be:	3320      	adds	r3, #32
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026c4:	183b      	adds	r3, r7, r0
 80026c6:	781a      	ldrb	r2, [r3, #0]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	0013      	movs	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	189b      	adds	r3, r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	18cb      	adds	r3, r1, r3
 80026d4:	3324      	adds	r3, #36	@ 0x24
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026da:	183b      	adds	r3, r7, r0
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	0013      	movs	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	189b      	adds	r3, r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	2200      	movs	r2, #0
 80026ec:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ee:	183b      	adds	r3, r7, r0
 80026f0:	781a      	ldrb	r2, [r3, #0]
 80026f2:	183b      	adds	r3, r7, r0
 80026f4:	3201      	adds	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	791b      	ldrb	r3, [r3, #4]
 80026fc:	210f      	movs	r1, #15
 80026fe:	187a      	adds	r2, r7, r1
 8002700:	7812      	ldrb	r2, [r2, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d3b0      	bcc.n	8002668 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002706:	187b      	adds	r3, r7, r1
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	e056      	b.n	80027bc <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800270e:	240f      	movs	r4, #15
 8002710:	193b      	adds	r3, r7, r4
 8002712:	781a      	ldrb	r2, [r3, #0]
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	2352      	movs	r3, #82	@ 0x52
 8002718:	33ff      	adds	r3, #255	@ 0xff
 800271a:	0019      	movs	r1, r3
 800271c:	0013      	movs	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	189b      	adds	r3, r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	18c3      	adds	r3, r0, r3
 8002726:	185b      	adds	r3, r3, r1
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800272c:	193b      	adds	r3, r7, r4
 800272e:	781a      	ldrb	r2, [r3, #0]
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	23a8      	movs	r3, #168	@ 0xa8
 8002734:	0059      	lsls	r1, r3, #1
 8002736:	0013      	movs	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	189b      	adds	r3, r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	18c3      	adds	r3, r0, r3
 8002740:	185b      	adds	r3, r3, r1
 8002742:	193a      	adds	r2, r7, r4
 8002744:	7812      	ldrb	r2, [r2, #0]
 8002746:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002748:	193b      	adds	r3, r7, r4
 800274a:	781a      	ldrb	r2, [r3, #0]
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	2354      	movs	r3, #84	@ 0x54
 8002750:	33ff      	adds	r3, #255	@ 0xff
 8002752:	0019      	movs	r1, r3
 8002754:	0013      	movs	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	189b      	adds	r3, r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	18c3      	adds	r3, r0, r3
 800275e:	185b      	adds	r3, r3, r1
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002764:	193b      	adds	r3, r7, r4
 8002766:	781a      	ldrb	r2, [r3, #0]
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	23b0      	movs	r3, #176	@ 0xb0
 800276c:	0059      	lsls	r1, r3, #1
 800276e:	0013      	movs	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	189b      	adds	r3, r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	18c3      	adds	r3, r0, r3
 8002778:	185b      	adds	r3, r3, r1
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800277e:	193b      	adds	r3, r7, r4
 8002780:	781a      	ldrb	r2, [r3, #0]
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	23b2      	movs	r3, #178	@ 0xb2
 8002786:	0059      	lsls	r1, r3, #1
 8002788:	0013      	movs	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	189b      	adds	r3, r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	18c3      	adds	r3, r0, r3
 8002792:	185b      	adds	r3, r3, r1
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002798:	193b      	adds	r3, r7, r4
 800279a:	781a      	ldrb	r2, [r3, #0]
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	23b4      	movs	r3, #180	@ 0xb4
 80027a0:	0059      	lsls	r1, r3, #1
 80027a2:	0013      	movs	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	189b      	adds	r3, r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	18c3      	adds	r3, r0, r3
 80027ac:	185b      	adds	r3, r3, r1
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b2:	193b      	adds	r3, r7, r4
 80027b4:	781a      	ldrb	r2, [r3, #0]
 80027b6:	193b      	adds	r3, r7, r4
 80027b8:	3201      	adds	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	791b      	ldrb	r3, [r3, #4]
 80027c0:	220f      	movs	r2, #15
 80027c2:	18ba      	adds	r2, r7, r2
 80027c4:	7812      	ldrb	r2, [r2, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d3a1      	bcc.n	800270e <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6859      	ldr	r1, [r3, #4]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	f001 f866 	bl	80038a4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a07      	ldr	r2, [pc, #28]	@ (8002800 <HAL_PCD_Init+0x1e4>)
 80027e2:	2101      	movs	r1, #1
 80027e4:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	7a9b      	ldrb	r3, [r3, #10]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d103      	bne.n	80027f6 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	0018      	movs	r0, r3
 80027f2:	f000 f807 	bl	8002804 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	0018      	movs	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b005      	add	sp, #20
 80027fe:	bd90      	pop	{r4, r7, pc}
 8002800:	00000291 	.word	0x00000291

08002804 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	23b4      	movs	r3, #180	@ 0xb4
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	2101      	movs	r1, #1
 800281a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	23b2      	movs	r3, #178	@ 0xb2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	2100      	movs	r1, #0
 8002824:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2254      	movs	r2, #84	@ 0x54
 800282a:	5a9b      	ldrh	r3, [r3, r2]
 800282c:	b29b      	uxth	r3, r3
 800282e:	2201      	movs	r2, #1
 8002830:	4313      	orrs	r3, r2
 8002832:	b299      	uxth	r1, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2254      	movs	r2, #84	@ 0x54
 8002838:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2254      	movs	r2, #84	@ 0x54
 800283e:	5a9b      	ldrh	r3, [r3, r2]
 8002840:	b29b      	uxth	r3, r3
 8002842:	2202      	movs	r2, #2
 8002844:	4313      	orrs	r3, r2
 8002846:	b299      	uxth	r1, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2254      	movs	r2, #84	@ 0x54
 800284c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	0018      	movs	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	b004      	add	sp, #16
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d102      	bne.n	800286c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	f000 fb76 	bl	8002f58 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2201      	movs	r2, #1
 8002872:	4013      	ands	r3, r2
 8002874:	d100      	bne.n	8002878 <HAL_RCC_OscConfig+0x20>
 8002876:	e08e      	b.n	8002996 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002878:	4bc5      	ldr	r3, [pc, #788]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	220c      	movs	r2, #12
 800287e:	4013      	ands	r3, r2
 8002880:	2b04      	cmp	r3, #4
 8002882:	d00e      	beq.n	80028a2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002884:	4bc2      	ldr	r3, [pc, #776]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	220c      	movs	r2, #12
 800288a:	4013      	ands	r3, r2
 800288c:	2b08      	cmp	r3, #8
 800288e:	d117      	bne.n	80028c0 <HAL_RCC_OscConfig+0x68>
 8002890:	4bbf      	ldr	r3, [pc, #764]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	23c0      	movs	r3, #192	@ 0xc0
 8002896:	025b      	lsls	r3, r3, #9
 8002898:	401a      	ands	r2, r3
 800289a:	2380      	movs	r3, #128	@ 0x80
 800289c:	025b      	lsls	r3, r3, #9
 800289e:	429a      	cmp	r2, r3
 80028a0:	d10e      	bne.n	80028c0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a2:	4bbb      	ldr	r3, [pc, #748]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	2380      	movs	r3, #128	@ 0x80
 80028a8:	029b      	lsls	r3, r3, #10
 80028aa:	4013      	ands	r3, r2
 80028ac:	d100      	bne.n	80028b0 <HAL_RCC_OscConfig+0x58>
 80028ae:	e071      	b.n	8002994 <HAL_RCC_OscConfig+0x13c>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d000      	beq.n	80028ba <HAL_RCC_OscConfig+0x62>
 80028b8:	e06c      	b.n	8002994 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	f000 fb4c 	bl	8002f58 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d107      	bne.n	80028d8 <HAL_RCC_OscConfig+0x80>
 80028c8:	4bb1      	ldr	r3, [pc, #708]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4bb0      	ldr	r3, [pc, #704]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 80028ce:	2180      	movs	r1, #128	@ 0x80
 80028d0:	0249      	lsls	r1, r1, #9
 80028d2:	430a      	orrs	r2, r1
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	e02f      	b.n	8002938 <HAL_RCC_OscConfig+0xe0>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10c      	bne.n	80028fa <HAL_RCC_OscConfig+0xa2>
 80028e0:	4bab      	ldr	r3, [pc, #684]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4baa      	ldr	r3, [pc, #680]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 80028e6:	49ab      	ldr	r1, [pc, #684]	@ (8002b94 <HAL_RCC_OscConfig+0x33c>)
 80028e8:	400a      	ands	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	4ba8      	ldr	r3, [pc, #672]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4ba7      	ldr	r3, [pc, #668]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 80028f2:	49a9      	ldr	r1, [pc, #676]	@ (8002b98 <HAL_RCC_OscConfig+0x340>)
 80028f4:	400a      	ands	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e01e      	b.n	8002938 <HAL_RCC_OscConfig+0xe0>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b05      	cmp	r3, #5
 8002900:	d10e      	bne.n	8002920 <HAL_RCC_OscConfig+0xc8>
 8002902:	4ba3      	ldr	r3, [pc, #652]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4ba2      	ldr	r3, [pc, #648]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002908:	2180      	movs	r1, #128	@ 0x80
 800290a:	02c9      	lsls	r1, r1, #11
 800290c:	430a      	orrs	r2, r1
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	4b9f      	ldr	r3, [pc, #636]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b9e      	ldr	r3, [pc, #632]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002916:	2180      	movs	r1, #128	@ 0x80
 8002918:	0249      	lsls	r1, r1, #9
 800291a:	430a      	orrs	r2, r1
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	e00b      	b.n	8002938 <HAL_RCC_OscConfig+0xe0>
 8002920:	4b9b      	ldr	r3, [pc, #620]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b9a      	ldr	r3, [pc, #616]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002926:	499b      	ldr	r1, [pc, #620]	@ (8002b94 <HAL_RCC_OscConfig+0x33c>)
 8002928:	400a      	ands	r2, r1
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	4b98      	ldr	r3, [pc, #608]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4b97      	ldr	r3, [pc, #604]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002932:	4999      	ldr	r1, [pc, #612]	@ (8002b98 <HAL_RCC_OscConfig+0x340>)
 8002934:	400a      	ands	r2, r1
 8002936:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d014      	beq.n	800296a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7fe fb8c 	bl	800105c <HAL_GetTick>
 8002944:	0003      	movs	r3, r0
 8002946:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800294a:	f7fe fb87 	bl	800105c <HAL_GetTick>
 800294e:	0002      	movs	r2, r0
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b64      	cmp	r3, #100	@ 0x64
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e2fd      	b.n	8002f58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295c:	4b8c      	ldr	r3, [pc, #560]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	2380      	movs	r3, #128	@ 0x80
 8002962:	029b      	lsls	r3, r3, #10
 8002964:	4013      	ands	r3, r2
 8002966:	d0f0      	beq.n	800294a <HAL_RCC_OscConfig+0xf2>
 8002968:	e015      	b.n	8002996 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7fe fb77 	bl	800105c <HAL_GetTick>
 800296e:	0003      	movs	r3, r0
 8002970:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002974:	f7fe fb72 	bl	800105c <HAL_GetTick>
 8002978:	0002      	movs	r2, r0
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	@ 0x64
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e2e8      	b.n	8002f58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002986:	4b82      	ldr	r3, [pc, #520]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	2380      	movs	r3, #128	@ 0x80
 800298c:	029b      	lsls	r3, r3, #10
 800298e:	4013      	ands	r3, r2
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x11c>
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002994:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2202      	movs	r2, #2
 800299c:	4013      	ands	r3, r2
 800299e:	d100      	bne.n	80029a2 <HAL_RCC_OscConfig+0x14a>
 80029a0:	e06c      	b.n	8002a7c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029a2:	4b7b      	ldr	r3, [pc, #492]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	220c      	movs	r2, #12
 80029a8:	4013      	ands	r3, r2
 80029aa:	d00e      	beq.n	80029ca <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029ac:	4b78      	ldr	r3, [pc, #480]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	220c      	movs	r2, #12
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d11f      	bne.n	80029f8 <HAL_RCC_OscConfig+0x1a0>
 80029b8:	4b75      	ldr	r3, [pc, #468]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	23c0      	movs	r3, #192	@ 0xc0
 80029be:	025b      	lsls	r3, r3, #9
 80029c0:	401a      	ands	r2, r3
 80029c2:	2380      	movs	r3, #128	@ 0x80
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d116      	bne.n	80029f8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ca:	4b71      	ldr	r3, [pc, #452]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2202      	movs	r2, #2
 80029d0:	4013      	ands	r3, r2
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_OscConfig+0x188>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e2bb      	b.n	8002f58 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e0:	4b6b      	ldr	r3, [pc, #428]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	22f8      	movs	r2, #248	@ 0xf8
 80029e6:	4393      	bics	r3, r2
 80029e8:	0019      	movs	r1, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	00da      	lsls	r2, r3, #3
 80029f0:	4b67      	ldr	r3, [pc, #412]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 80029f2:	430a      	orrs	r2, r1
 80029f4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f6:	e041      	b.n	8002a7c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d024      	beq.n	8002a4a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a00:	4b63      	ldr	r3, [pc, #396]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b62      	ldr	r3, [pc, #392]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002a06:	2101      	movs	r1, #1
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fb26 	bl	800105c <HAL_GetTick>
 8002a10:	0003      	movs	r3, r0
 8002a12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a16:	f7fe fb21 	bl	800105c <HAL_GetTick>
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e297      	b.n	8002f58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a28:	4b59      	ldr	r3, [pc, #356]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d0f1      	beq.n	8002a16 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a32:	4b57      	ldr	r3, [pc, #348]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	22f8      	movs	r2, #248	@ 0xf8
 8002a38:	4393      	bics	r3, r2
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	00da      	lsls	r2, r3, #3
 8002a42:	4b53      	ldr	r3, [pc, #332]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002a44:	430a      	orrs	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	e018      	b.n	8002a7c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4a:	4b51      	ldr	r3, [pc, #324]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4b50      	ldr	r3, [pc, #320]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002a50:	2101      	movs	r1, #1
 8002a52:	438a      	bics	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7fe fb01 	bl	800105c <HAL_GetTick>
 8002a5a:	0003      	movs	r3, r0
 8002a5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a60:	f7fe fafc 	bl	800105c <HAL_GetTick>
 8002a64:	0002      	movs	r2, r0
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e272      	b.n	8002f58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a72:	4b47      	ldr	r3, [pc, #284]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2202      	movs	r2, #2
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d1f1      	bne.n	8002a60 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2208      	movs	r2, #8
 8002a82:	4013      	ands	r3, r2
 8002a84:	d036      	beq.n	8002af4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d019      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8e:	4b40      	ldr	r3, [pc, #256]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002a90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a92:	4b3f      	ldr	r3, [pc, #252]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002a94:	2101      	movs	r1, #1
 8002a96:	430a      	orrs	r2, r1
 8002a98:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9a:	f7fe fadf 	bl	800105c <HAL_GetTick>
 8002a9e:	0003      	movs	r3, r0
 8002aa0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa4:	f7fe fada 	bl	800105c <HAL_GetTick>
 8002aa8:	0002      	movs	r2, r0
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e250      	b.n	8002f58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab6:	4b36      	ldr	r3, [pc, #216]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aba:	2202      	movs	r2, #2
 8002abc:	4013      	ands	r3, r2
 8002abe:	d0f1      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x24c>
 8002ac0:	e018      	b.n	8002af4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac2:	4b33      	ldr	r3, [pc, #204]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002ac4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ac6:	4b32      	ldr	r3, [pc, #200]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002ac8:	2101      	movs	r1, #1
 8002aca:	438a      	bics	r2, r1
 8002acc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ace:	f7fe fac5 	bl	800105c <HAL_GetTick>
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad8:	f7fe fac0 	bl	800105c <HAL_GetTick>
 8002adc:	0002      	movs	r2, r0
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e236      	b.n	8002f58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aea:	4b29      	ldr	r3, [pc, #164]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aee:	2202      	movs	r2, #2
 8002af0:	4013      	ands	r3, r2
 8002af2:	d1f1      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2204      	movs	r2, #4
 8002afa:	4013      	ands	r3, r2
 8002afc:	d100      	bne.n	8002b00 <HAL_RCC_OscConfig+0x2a8>
 8002afe:	e0b5      	b.n	8002c6c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b00:	201f      	movs	r0, #31
 8002b02:	183b      	adds	r3, r7, r0
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b08:	4b21      	ldr	r3, [pc, #132]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002b0a:	69da      	ldr	r2, [r3, #28]
 8002b0c:	2380      	movs	r3, #128	@ 0x80
 8002b0e:	055b      	lsls	r3, r3, #21
 8002b10:	4013      	ands	r3, r2
 8002b12:	d110      	bne.n	8002b36 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b14:	4b1e      	ldr	r3, [pc, #120]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002b16:	69da      	ldr	r2, [r3, #28]
 8002b18:	4b1d      	ldr	r3, [pc, #116]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002b1a:	2180      	movs	r1, #128	@ 0x80
 8002b1c:	0549      	lsls	r1, r1, #21
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	61da      	str	r2, [r3, #28]
 8002b22:	4b1b      	ldr	r3, [pc, #108]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002b24:	69da      	ldr	r2, [r3, #28]
 8002b26:	2380      	movs	r3, #128	@ 0x80
 8002b28:	055b      	lsls	r3, r3, #21
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b30:	183b      	adds	r3, r7, r0
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b36:	4b19      	ldr	r3, [pc, #100]	@ (8002b9c <HAL_RCC_OscConfig+0x344>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	2380      	movs	r3, #128	@ 0x80
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d11a      	bne.n	8002b78 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b42:	4b16      	ldr	r3, [pc, #88]	@ (8002b9c <HAL_RCC_OscConfig+0x344>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	4b15      	ldr	r3, [pc, #84]	@ (8002b9c <HAL_RCC_OscConfig+0x344>)
 8002b48:	2180      	movs	r1, #128	@ 0x80
 8002b4a:	0049      	lsls	r1, r1, #1
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b50:	f7fe fa84 	bl	800105c <HAL_GetTick>
 8002b54:	0003      	movs	r3, r0
 8002b56:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5a:	f7fe fa7f 	bl	800105c <HAL_GetTick>
 8002b5e:	0002      	movs	r2, r0
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b64      	cmp	r3, #100	@ 0x64
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e1f5      	b.n	8002f58 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b9c <HAL_RCC_OscConfig+0x344>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	2380      	movs	r3, #128	@ 0x80
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4013      	ands	r3, r2
 8002b76:	d0f0      	beq.n	8002b5a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d10f      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x348>
 8002b80:	4b03      	ldr	r3, [pc, #12]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002b82:	6a1a      	ldr	r2, [r3, #32]
 8002b84:	4b02      	ldr	r3, [pc, #8]	@ (8002b90 <HAL_RCC_OscConfig+0x338>)
 8002b86:	2101      	movs	r1, #1
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	621a      	str	r2, [r3, #32]
 8002b8c:	e036      	b.n	8002bfc <HAL_RCC_OscConfig+0x3a4>
 8002b8e:	46c0      	nop			@ (mov r8, r8)
 8002b90:	40021000 	.word	0x40021000
 8002b94:	fffeffff 	.word	0xfffeffff
 8002b98:	fffbffff 	.word	0xfffbffff
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10c      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x36a>
 8002ba8:	4bca      	ldr	r3, [pc, #808]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002baa:	6a1a      	ldr	r2, [r3, #32]
 8002bac:	4bc9      	ldr	r3, [pc, #804]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002bae:	2101      	movs	r1, #1
 8002bb0:	438a      	bics	r2, r1
 8002bb2:	621a      	str	r2, [r3, #32]
 8002bb4:	4bc7      	ldr	r3, [pc, #796]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002bb6:	6a1a      	ldr	r2, [r3, #32]
 8002bb8:	4bc6      	ldr	r3, [pc, #792]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002bba:	2104      	movs	r1, #4
 8002bbc:	438a      	bics	r2, r1
 8002bbe:	621a      	str	r2, [r3, #32]
 8002bc0:	e01c      	b.n	8002bfc <HAL_RCC_OscConfig+0x3a4>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b05      	cmp	r3, #5
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x38c>
 8002bca:	4bc2      	ldr	r3, [pc, #776]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002bcc:	6a1a      	ldr	r2, [r3, #32]
 8002bce:	4bc1      	ldr	r3, [pc, #772]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002bd0:	2104      	movs	r1, #4
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	621a      	str	r2, [r3, #32]
 8002bd6:	4bbf      	ldr	r3, [pc, #764]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002bd8:	6a1a      	ldr	r2, [r3, #32]
 8002bda:	4bbe      	ldr	r3, [pc, #760]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002bdc:	2101      	movs	r1, #1
 8002bde:	430a      	orrs	r2, r1
 8002be0:	621a      	str	r2, [r3, #32]
 8002be2:	e00b      	b.n	8002bfc <HAL_RCC_OscConfig+0x3a4>
 8002be4:	4bbb      	ldr	r3, [pc, #748]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002be6:	6a1a      	ldr	r2, [r3, #32]
 8002be8:	4bba      	ldr	r3, [pc, #744]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002bea:	2101      	movs	r1, #1
 8002bec:	438a      	bics	r2, r1
 8002bee:	621a      	str	r2, [r3, #32]
 8002bf0:	4bb8      	ldr	r3, [pc, #736]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002bf2:	6a1a      	ldr	r2, [r3, #32]
 8002bf4:	4bb7      	ldr	r3, [pc, #732]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002bf6:	2104      	movs	r1, #4
 8002bf8:	438a      	bics	r2, r1
 8002bfa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d014      	beq.n	8002c2e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c04:	f7fe fa2a 	bl	800105c <HAL_GetTick>
 8002c08:	0003      	movs	r3, r0
 8002c0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0c:	e009      	b.n	8002c22 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7fe fa25 	bl	800105c <HAL_GetTick>
 8002c12:	0002      	movs	r2, r0
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	4aaf      	ldr	r2, [pc, #700]	@ (8002ed8 <HAL_RCC_OscConfig+0x680>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e19a      	b.n	8002f58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c22:	4bac      	ldr	r3, [pc, #688]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	2202      	movs	r2, #2
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x3b6>
 8002c2c:	e013      	b.n	8002c56 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2e:	f7fe fa15 	bl	800105c <HAL_GetTick>
 8002c32:	0003      	movs	r3, r0
 8002c34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c36:	e009      	b.n	8002c4c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c38:	f7fe fa10 	bl	800105c <HAL_GetTick>
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	4aa5      	ldr	r2, [pc, #660]	@ (8002ed8 <HAL_RCC_OscConfig+0x680>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e185      	b.n	8002f58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c4c:	4ba1      	ldr	r3, [pc, #644]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	2202      	movs	r2, #2
 8002c52:	4013      	ands	r3, r2
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c56:	231f      	movs	r3, #31
 8002c58:	18fb      	adds	r3, r7, r3
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d105      	bne.n	8002c6c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c60:	4b9c      	ldr	r3, [pc, #624]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002c62:	69da      	ldr	r2, [r3, #28]
 8002c64:	4b9b      	ldr	r3, [pc, #620]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002c66:	499d      	ldr	r1, [pc, #628]	@ (8002edc <HAL_RCC_OscConfig+0x684>)
 8002c68:	400a      	ands	r2, r1
 8002c6a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2210      	movs	r2, #16
 8002c72:	4013      	ands	r3, r2
 8002c74:	d063      	beq.n	8002d3e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d12a      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c7e:	4b95      	ldr	r3, [pc, #596]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002c80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c82:	4b94      	ldr	r3, [pc, #592]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002c84:	2104      	movs	r1, #4
 8002c86:	430a      	orrs	r2, r1
 8002c88:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002c8a:	4b92      	ldr	r3, [pc, #584]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002c8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c8e:	4b91      	ldr	r3, [pc, #580]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002c90:	2101      	movs	r1, #1
 8002c92:	430a      	orrs	r2, r1
 8002c94:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c96:	f7fe f9e1 	bl	800105c <HAL_GetTick>
 8002c9a:	0003      	movs	r3, r0
 8002c9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ca0:	f7fe f9dc 	bl	800105c <HAL_GetTick>
 8002ca4:	0002      	movs	r2, r0
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e152      	b.n	8002f58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002cb2:	4b88      	ldr	r3, [pc, #544]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d0f1      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002cbc:	4b85      	ldr	r3, [pc, #532]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc0:	22f8      	movs	r2, #248	@ 0xf8
 8002cc2:	4393      	bics	r3, r2
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	00da      	lsls	r2, r3, #3
 8002ccc:	4b81      	ldr	r3, [pc, #516]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cd2:	e034      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	3305      	adds	r3, #5
 8002cda:	d111      	bne.n	8002d00 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002cdc:	4b7d      	ldr	r3, [pc, #500]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002cde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ce0:	4b7c      	ldr	r3, [pc, #496]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002ce2:	2104      	movs	r1, #4
 8002ce4:	438a      	bics	r2, r1
 8002ce6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ce8:	4b7a      	ldr	r3, [pc, #488]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cec:	22f8      	movs	r2, #248	@ 0xf8
 8002cee:	4393      	bics	r3, r2
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	00da      	lsls	r2, r3, #3
 8002cf8:	4b76      	ldr	r3, [pc, #472]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cfe:	e01e      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d00:	4b74      	ldr	r3, [pc, #464]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002d02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d04:	4b73      	ldr	r3, [pc, #460]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002d06:	2104      	movs	r1, #4
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002d0c:	4b71      	ldr	r3, [pc, #452]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002d0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d10:	4b70      	ldr	r3, [pc, #448]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002d12:	2101      	movs	r1, #1
 8002d14:	438a      	bics	r2, r1
 8002d16:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d18:	f7fe f9a0 	bl	800105c <HAL_GetTick>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d22:	f7fe f99b 	bl	800105c <HAL_GetTick>
 8002d26:	0002      	movs	r2, r0
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e111      	b.n	8002f58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d34:	4b67      	ldr	r3, [pc, #412]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d38:	2202      	movs	r2, #2
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d1f1      	bne.n	8002d22 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2220      	movs	r2, #32
 8002d44:	4013      	ands	r3, r2
 8002d46:	d05c      	beq.n	8002e02 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d48:	4b62      	ldr	r3, [pc, #392]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	220c      	movs	r2, #12
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b0c      	cmp	r3, #12
 8002d52:	d00e      	beq.n	8002d72 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d54:	4b5f      	ldr	r3, [pc, #380]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	220c      	movs	r2, #12
 8002d5a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d114      	bne.n	8002d8a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d60:	4b5c      	ldr	r3, [pc, #368]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	23c0      	movs	r3, #192	@ 0xc0
 8002d66:	025b      	lsls	r3, r3, #9
 8002d68:	401a      	ands	r2, r3
 8002d6a:	23c0      	movs	r3, #192	@ 0xc0
 8002d6c:	025b      	lsls	r3, r3, #9
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d10b      	bne.n	8002d8a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002d72:	4b58      	ldr	r3, [pc, #352]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002d74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d76:	2380      	movs	r3, #128	@ 0x80
 8002d78:	029b      	lsls	r3, r3, #10
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d040      	beq.n	8002e00 <HAL_RCC_OscConfig+0x5a8>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d03c      	beq.n	8002e00 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e0e6      	b.n	8002f58 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d01b      	beq.n	8002dca <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002d92:	4b50      	ldr	r3, [pc, #320]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002d94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d96:	4b4f      	ldr	r3, [pc, #316]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002d98:	2180      	movs	r1, #128	@ 0x80
 8002d9a:	0249      	lsls	r1, r1, #9
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fe f95c 	bl	800105c <HAL_GetTick>
 8002da4:	0003      	movs	r3, r0
 8002da6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002daa:	f7fe f957 	bl	800105c <HAL_GetTick>
 8002dae:	0002      	movs	r2, r0
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e0cd      	b.n	8002f58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002dbc:	4b45      	ldr	r3, [pc, #276]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002dbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dc0:	2380      	movs	r3, #128	@ 0x80
 8002dc2:	029b      	lsls	r3, r3, #10
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x552>
 8002dc8:	e01b      	b.n	8002e02 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002dca:	4b42      	ldr	r3, [pc, #264]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002dcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dce:	4b41      	ldr	r3, [pc, #260]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002dd0:	4943      	ldr	r1, [pc, #268]	@ (8002ee0 <HAL_RCC_OscConfig+0x688>)
 8002dd2:	400a      	ands	r2, r1
 8002dd4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd6:	f7fe f941 	bl	800105c <HAL_GetTick>
 8002dda:	0003      	movs	r3, r0
 8002ddc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002de0:	f7fe f93c 	bl	800105c <HAL_GetTick>
 8002de4:	0002      	movs	r2, r0
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e0b2      	b.n	8002f58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002df2:	4b38      	ldr	r3, [pc, #224]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002df4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002df6:	2380      	movs	r3, #128	@ 0x80
 8002df8:	029b      	lsls	r3, r3, #10
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x588>
 8002dfe:	e000      	b.n	8002e02 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002e00:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d100      	bne.n	8002e0c <HAL_RCC_OscConfig+0x5b4>
 8002e0a:	e0a4      	b.n	8002f56 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e0c:	4b31      	ldr	r3, [pc, #196]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	220c      	movs	r2, #12
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d100      	bne.n	8002e1a <HAL_RCC_OscConfig+0x5c2>
 8002e18:	e078      	b.n	8002f0c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d14c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e22:	4b2c      	ldr	r3, [pc, #176]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4b2b      	ldr	r3, [pc, #172]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002e28:	492e      	ldr	r1, [pc, #184]	@ (8002ee4 <HAL_RCC_OscConfig+0x68c>)
 8002e2a:	400a      	ands	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7fe f915 	bl	800105c <HAL_GetTick>
 8002e32:	0003      	movs	r3, r0
 8002e34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e38:	f7fe f910 	bl	800105c <HAL_GetTick>
 8002e3c:	0002      	movs	r2, r0
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e086      	b.n	8002f58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e4a:	4b22      	ldr	r3, [pc, #136]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	2380      	movs	r3, #128	@ 0x80
 8002e50:	049b      	lsls	r3, r3, #18
 8002e52:	4013      	ands	r3, r2
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e56:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5a:	220f      	movs	r2, #15
 8002e5c:	4393      	bics	r3, r2
 8002e5e:	0019      	movs	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e64:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002e66:	430a      	orrs	r2, r1
 8002e68:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee8 <HAL_RCC_OscConfig+0x690>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	0019      	movs	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002e80:	430a      	orrs	r2, r1
 8002e82:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e84:	4b13      	ldr	r3, [pc, #76]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	4b12      	ldr	r3, [pc, #72]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002e8a:	2180      	movs	r1, #128	@ 0x80
 8002e8c:	0449      	lsls	r1, r1, #17
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e92:	f7fe f8e3 	bl	800105c <HAL_GetTick>
 8002e96:	0003      	movs	r3, r0
 8002e98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7fe f8de 	bl	800105c <HAL_GetTick>
 8002ea0:	0002      	movs	r2, r0
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e054      	b.n	8002f58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eae:	4b09      	ldr	r3, [pc, #36]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	2380      	movs	r3, #128	@ 0x80
 8002eb4:	049b      	lsls	r3, r3, #18
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x644>
 8002eba:	e04c      	b.n	8002f56 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebc:	4b05      	ldr	r3, [pc, #20]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4b04      	ldr	r3, [pc, #16]	@ (8002ed4 <HAL_RCC_OscConfig+0x67c>)
 8002ec2:	4908      	ldr	r1, [pc, #32]	@ (8002ee4 <HAL_RCC_OscConfig+0x68c>)
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fe f8c8 	bl	800105c <HAL_GetTick>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed0:	e015      	b.n	8002efe <HAL_RCC_OscConfig+0x6a6>
 8002ed2:	46c0      	nop			@ (mov r8, r8)
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	00001388 	.word	0x00001388
 8002edc:	efffffff 	.word	0xefffffff
 8002ee0:	fffeffff 	.word	0xfffeffff
 8002ee4:	feffffff 	.word	0xfeffffff
 8002ee8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eec:	f7fe f8b6 	bl	800105c <HAL_GetTick>
 8002ef0:	0002      	movs	r2, r0
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e02c      	b.n	8002f58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002efe:	4b18      	ldr	r3, [pc, #96]	@ (8002f60 <HAL_RCC_OscConfig+0x708>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	2380      	movs	r3, #128	@ 0x80
 8002f04:	049b      	lsls	r3, r3, #18
 8002f06:	4013      	ands	r3, r2
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x694>
 8002f0a:	e024      	b.n	8002f56 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e01f      	b.n	8002f58 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002f18:	4b11      	ldr	r3, [pc, #68]	@ (8002f60 <HAL_RCC_OscConfig+0x708>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002f1e:	4b10      	ldr	r3, [pc, #64]	@ (8002f60 <HAL_RCC_OscConfig+0x708>)
 8002f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f22:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	23c0      	movs	r3, #192	@ 0xc0
 8002f28:	025b      	lsls	r3, r3, #9
 8002f2a:	401a      	ands	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d10e      	bne.n	8002f52 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	220f      	movs	r2, #15
 8002f38:	401a      	ands	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d107      	bne.n	8002f52 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	23f0      	movs	r3, #240	@ 0xf0
 8002f46:	039b      	lsls	r3, r3, #14
 8002f48:	401a      	ands	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d001      	beq.n	8002f56 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b008      	add	sp, #32
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40021000 	.word	0x40021000

08002f64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0bf      	b.n	80030f8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f78:	4b61      	ldr	r3, [pc, #388]	@ (8003100 <HAL_RCC_ClockConfig+0x19c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	4013      	ands	r3, r2
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d911      	bls.n	8002faa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b5e      	ldr	r3, [pc, #376]	@ (8003100 <HAL_RCC_ClockConfig+0x19c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	4393      	bics	r3, r2
 8002f8e:	0019      	movs	r1, r3
 8002f90:	4b5b      	ldr	r3, [pc, #364]	@ (8003100 <HAL_RCC_ClockConfig+0x19c>)
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f98:	4b59      	ldr	r3, [pc, #356]	@ (8003100 <HAL_RCC_ClockConfig+0x19c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d001      	beq.n	8002faa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e0a6      	b.n	80030f8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d015      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2204      	movs	r2, #4
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d006      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002fbe:	4b51      	ldr	r3, [pc, #324]	@ (8003104 <HAL_RCC_ClockConfig+0x1a0>)
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	4b50      	ldr	r3, [pc, #320]	@ (8003104 <HAL_RCC_ClockConfig+0x1a0>)
 8002fc4:	21e0      	movs	r1, #224	@ 0xe0
 8002fc6:	00c9      	lsls	r1, r1, #3
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fcc:	4b4d      	ldr	r3, [pc, #308]	@ (8003104 <HAL_RCC_ClockConfig+0x1a0>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	22f0      	movs	r2, #240	@ 0xf0
 8002fd2:	4393      	bics	r3, r2
 8002fd4:	0019      	movs	r1, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	4b4a      	ldr	r3, [pc, #296]	@ (8003104 <HAL_RCC_ClockConfig+0x1a0>)
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d04c      	beq.n	8003084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d107      	bne.n	8003002 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	4b44      	ldr	r3, [pc, #272]	@ (8003104 <HAL_RCC_ClockConfig+0x1a0>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	2380      	movs	r3, #128	@ 0x80
 8002ff8:	029b      	lsls	r3, r3, #10
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d120      	bne.n	8003040 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e07a      	b.n	80030f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300a:	4b3e      	ldr	r3, [pc, #248]	@ (8003104 <HAL_RCC_ClockConfig+0x1a0>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	2380      	movs	r3, #128	@ 0x80
 8003010:	049b      	lsls	r3, r3, #18
 8003012:	4013      	ands	r3, r2
 8003014:	d114      	bne.n	8003040 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e06e      	b.n	80030f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b03      	cmp	r3, #3
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003022:	4b38      	ldr	r3, [pc, #224]	@ (8003104 <HAL_RCC_ClockConfig+0x1a0>)
 8003024:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003026:	2380      	movs	r3, #128	@ 0x80
 8003028:	029b      	lsls	r3, r3, #10
 800302a:	4013      	ands	r3, r2
 800302c:	d108      	bne.n	8003040 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e062      	b.n	80030f8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003032:	4b34      	ldr	r3, [pc, #208]	@ (8003104 <HAL_RCC_ClockConfig+0x1a0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2202      	movs	r2, #2
 8003038:	4013      	ands	r3, r2
 800303a:	d101      	bne.n	8003040 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e05b      	b.n	80030f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003040:	4b30      	ldr	r3, [pc, #192]	@ (8003104 <HAL_RCC_ClockConfig+0x1a0>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2203      	movs	r2, #3
 8003046:	4393      	bics	r3, r2
 8003048:	0019      	movs	r1, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	4b2d      	ldr	r3, [pc, #180]	@ (8003104 <HAL_RCC_ClockConfig+0x1a0>)
 8003050:	430a      	orrs	r2, r1
 8003052:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003054:	f7fe f802 	bl	800105c <HAL_GetTick>
 8003058:	0003      	movs	r3, r0
 800305a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305c:	e009      	b.n	8003072 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305e:	f7fd fffd 	bl	800105c <HAL_GetTick>
 8003062:	0002      	movs	r2, r0
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	4a27      	ldr	r2, [pc, #156]	@ (8003108 <HAL_RCC_ClockConfig+0x1a4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e042      	b.n	80030f8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	4b24      	ldr	r3, [pc, #144]	@ (8003104 <HAL_RCC_ClockConfig+0x1a0>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	220c      	movs	r2, #12
 8003078:	401a      	ands	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	429a      	cmp	r2, r3
 8003082:	d1ec      	bne.n	800305e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003084:	4b1e      	ldr	r3, [pc, #120]	@ (8003100 <HAL_RCC_ClockConfig+0x19c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2201      	movs	r2, #1
 800308a:	4013      	ands	r3, r2
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d211      	bcs.n	80030b6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b1b      	ldr	r3, [pc, #108]	@ (8003100 <HAL_RCC_ClockConfig+0x19c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2201      	movs	r2, #1
 8003098:	4393      	bics	r3, r2
 800309a:	0019      	movs	r1, r3
 800309c:	4b18      	ldr	r3, [pc, #96]	@ (8003100 <HAL_RCC_ClockConfig+0x19c>)
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a4:	4b16      	ldr	r3, [pc, #88]	@ (8003100 <HAL_RCC_ClockConfig+0x19c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2201      	movs	r2, #1
 80030aa:	4013      	ands	r3, r2
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d001      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e020      	b.n	80030f8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2204      	movs	r2, #4
 80030bc:	4013      	ands	r3, r2
 80030be:	d009      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030c0:	4b10      	ldr	r3, [pc, #64]	@ (8003104 <HAL_RCC_ClockConfig+0x1a0>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a11      	ldr	r2, [pc, #68]	@ (800310c <HAL_RCC_ClockConfig+0x1a8>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003104 <HAL_RCC_ClockConfig+0x1a0>)
 80030d0:	430a      	orrs	r2, r1
 80030d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030d4:	f000 f820 	bl	8003118 <HAL_RCC_GetSysClockFreq>
 80030d8:	0001      	movs	r1, r0
 80030da:	4b0a      	ldr	r3, [pc, #40]	@ (8003104 <HAL_RCC_ClockConfig+0x1a0>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	091b      	lsrs	r3, r3, #4
 80030e0:	220f      	movs	r2, #15
 80030e2:	4013      	ands	r3, r2
 80030e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003110 <HAL_RCC_ClockConfig+0x1ac>)
 80030e6:	5cd3      	ldrb	r3, [r2, r3]
 80030e8:	000a      	movs	r2, r1
 80030ea:	40da      	lsrs	r2, r3
 80030ec:	4b09      	ldr	r3, [pc, #36]	@ (8003114 <HAL_RCC_ClockConfig+0x1b0>)
 80030ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80030f0:	2000      	movs	r0, #0
 80030f2:	f7fd ff6d 	bl	8000fd0 <HAL_InitTick>
  
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	0018      	movs	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b004      	add	sp, #16
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40022000 	.word	0x40022000
 8003104:	40021000 	.word	0x40021000
 8003108:	00001388 	.word	0x00001388
 800310c:	fffff8ff 	.word	0xfffff8ff
 8003110:	0800423c 	.word	0x0800423c
 8003114:	20000000 	.word	0x20000000

08003118 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	2300      	movs	r3, #0
 800312c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800312e:	2300      	movs	r3, #0
 8003130:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003132:	4b2d      	ldr	r3, [pc, #180]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	220c      	movs	r2, #12
 800313c:	4013      	ands	r3, r2
 800313e:	2b0c      	cmp	r3, #12
 8003140:	d046      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0xb8>
 8003142:	d848      	bhi.n	80031d6 <HAL_RCC_GetSysClockFreq+0xbe>
 8003144:	2b04      	cmp	r3, #4
 8003146:	d002      	beq.n	800314e <HAL_RCC_GetSysClockFreq+0x36>
 8003148:	2b08      	cmp	r3, #8
 800314a:	d003      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x3c>
 800314c:	e043      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800314e:	4b27      	ldr	r3, [pc, #156]	@ (80031ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8003150:	613b      	str	r3, [r7, #16]
      break;
 8003152:	e043      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	0c9b      	lsrs	r3, r3, #18
 8003158:	220f      	movs	r2, #15
 800315a:	4013      	ands	r3, r2
 800315c:	4a24      	ldr	r2, [pc, #144]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800315e:	5cd3      	ldrb	r3, [r2, r3]
 8003160:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003162:	4b21      	ldr	r3, [pc, #132]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003166:	220f      	movs	r2, #15
 8003168:	4013      	ands	r3, r2
 800316a:	4a22      	ldr	r2, [pc, #136]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800316c:	5cd3      	ldrb	r3, [r2, r3]
 800316e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	23c0      	movs	r3, #192	@ 0xc0
 8003174:	025b      	lsls	r3, r3, #9
 8003176:	401a      	ands	r2, r3
 8003178:	2380      	movs	r3, #128	@ 0x80
 800317a:	025b      	lsls	r3, r3, #9
 800317c:	429a      	cmp	r2, r3
 800317e:	d109      	bne.n	8003194 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	481a      	ldr	r0, [pc, #104]	@ (80031ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8003184:	f7fc ffca 	bl	800011c <__udivsi3>
 8003188:	0003      	movs	r3, r0
 800318a:	001a      	movs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4353      	muls	r3, r2
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	e01a      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	23c0      	movs	r3, #192	@ 0xc0
 8003198:	025b      	lsls	r3, r3, #9
 800319a:	401a      	ands	r2, r3
 800319c:	23c0      	movs	r3, #192	@ 0xc0
 800319e:	025b      	lsls	r3, r3, #9
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d109      	bne.n	80031b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	4814      	ldr	r0, [pc, #80]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80031a8:	f7fc ffb8 	bl	800011c <__udivsi3>
 80031ac:	0003      	movs	r3, r0
 80031ae:	001a      	movs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4353      	muls	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	e008      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	480c      	ldr	r0, [pc, #48]	@ (80031ec <HAL_RCC_GetSysClockFreq+0xd4>)
 80031bc:	f7fc ffae 	bl	800011c <__udivsi3>
 80031c0:	0003      	movs	r3, r0
 80031c2:	001a      	movs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4353      	muls	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	613b      	str	r3, [r7, #16]
      break;
 80031ce:	e005      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80031d0:	4b09      	ldr	r3, [pc, #36]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80031d2:	613b      	str	r3, [r7, #16]
      break;
 80031d4:	e002      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031d6:	4b05      	ldr	r3, [pc, #20]	@ (80031ec <HAL_RCC_GetSysClockFreq+0xd4>)
 80031d8:	613b      	str	r3, [r7, #16]
      break;
 80031da:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80031dc:	693b      	ldr	r3, [r7, #16]
}
 80031de:	0018      	movs	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	b006      	add	sp, #24
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	46c0      	nop			@ (mov r8, r8)
 80031e8:	40021000 	.word	0x40021000
 80031ec:	007a1200 	.word	0x007a1200
 80031f0:	0800424c 	.word	0x0800424c
 80031f4:	0800425c 	.word	0x0800425c
 80031f8:	02dc6c00 	.word	0x02dc6c00

080031fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	2380      	movs	r3, #128	@ 0x80
 8003212:	025b      	lsls	r3, r3, #9
 8003214:	4013      	ands	r3, r2
 8003216:	d100      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003218:	e08e      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800321a:	2017      	movs	r0, #23
 800321c:	183b      	adds	r3, r7, r0
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003222:	4b6e      	ldr	r3, [pc, #440]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003224:	69da      	ldr	r2, [r3, #28]
 8003226:	2380      	movs	r3, #128	@ 0x80
 8003228:	055b      	lsls	r3, r3, #21
 800322a:	4013      	ands	r3, r2
 800322c:	d110      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800322e:	4b6b      	ldr	r3, [pc, #428]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	4b6a      	ldr	r3, [pc, #424]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003234:	2180      	movs	r1, #128	@ 0x80
 8003236:	0549      	lsls	r1, r1, #21
 8003238:	430a      	orrs	r2, r1
 800323a:	61da      	str	r2, [r3, #28]
 800323c:	4b67      	ldr	r3, [pc, #412]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800323e:	69da      	ldr	r2, [r3, #28]
 8003240:	2380      	movs	r3, #128	@ 0x80
 8003242:	055b      	lsls	r3, r3, #21
 8003244:	4013      	ands	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800324a:	183b      	adds	r3, r7, r0
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003250:	4b63      	ldr	r3, [pc, #396]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	2380      	movs	r3, #128	@ 0x80
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4013      	ands	r3, r2
 800325a:	d11a      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800325c:	4b60      	ldr	r3, [pc, #384]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4b5f      	ldr	r3, [pc, #380]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003262:	2180      	movs	r1, #128	@ 0x80
 8003264:	0049      	lsls	r1, r1, #1
 8003266:	430a      	orrs	r2, r1
 8003268:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326a:	f7fd fef7 	bl	800105c <HAL_GetTick>
 800326e:	0003      	movs	r3, r0
 8003270:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003272:	e008      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003274:	f7fd fef2 	bl	800105c <HAL_GetTick>
 8003278:	0002      	movs	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	@ 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e0a6      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003286:	4b56      	ldr	r3, [pc, #344]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	2380      	movs	r3, #128	@ 0x80
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4013      	ands	r3, r2
 8003290:	d0f0      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003292:	4b52      	ldr	r3, [pc, #328]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003294:	6a1a      	ldr	r2, [r3, #32]
 8003296:	23c0      	movs	r3, #192	@ 0xc0
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4013      	ands	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d034      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	23c0      	movs	r3, #192	@ 0xc0
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4013      	ands	r3, r2
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d02c      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032b4:	4b49      	ldr	r3, [pc, #292]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	4a4a      	ldr	r2, [pc, #296]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032be:	4b47      	ldr	r3, [pc, #284]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032c0:	6a1a      	ldr	r2, [r3, #32]
 80032c2:	4b46      	ldr	r3, [pc, #280]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032c4:	2180      	movs	r1, #128	@ 0x80
 80032c6:	0249      	lsls	r1, r1, #9
 80032c8:	430a      	orrs	r2, r1
 80032ca:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032cc:	4b43      	ldr	r3, [pc, #268]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032ce:	6a1a      	ldr	r2, [r3, #32]
 80032d0:	4b42      	ldr	r3, [pc, #264]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032d2:	4945      	ldr	r1, [pc, #276]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80032d4:	400a      	ands	r2, r1
 80032d6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032d8:	4b40      	ldr	r3, [pc, #256]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	4013      	ands	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e6:	f7fd feb9 	bl	800105c <HAL_GetTick>
 80032ea:	0003      	movs	r3, r0
 80032ec:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ee:	e009      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f0:	f7fd feb4 	bl	800105c <HAL_GetTick>
 80032f4:	0002      	movs	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	4a3c      	ldr	r2, [pc, #240]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d901      	bls.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e067      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003304:	4b35      	ldr	r3, [pc, #212]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	2202      	movs	r2, #2
 800330a:	4013      	ands	r3, r2
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800330e:	4b33      	ldr	r3, [pc, #204]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	4a34      	ldr	r2, [pc, #208]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003314:	4013      	ands	r3, r2
 8003316:	0019      	movs	r1, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	4b2f      	ldr	r3, [pc, #188]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800331e:	430a      	orrs	r2, r1
 8003320:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003322:	2317      	movs	r3, #23
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d105      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332c:	4b2b      	ldr	r3, [pc, #172]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800332e:	69da      	ldr	r2, [r3, #28]
 8003330:	4b2a      	ldr	r3, [pc, #168]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003332:	492f      	ldr	r1, [pc, #188]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003334:	400a      	ands	r2, r1
 8003336:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2201      	movs	r2, #1
 800333e:	4013      	ands	r3, r2
 8003340:	d009      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003342:	4b26      	ldr	r3, [pc, #152]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	2203      	movs	r2, #3
 8003348:	4393      	bics	r3, r2
 800334a:	0019      	movs	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	4b22      	ldr	r3, [pc, #136]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003352:	430a      	orrs	r2, r1
 8003354:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2202      	movs	r2, #2
 800335c:	4013      	ands	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003360:	4b1e      	ldr	r3, [pc, #120]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003364:	4a23      	ldr	r2, [pc, #140]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003366:	4013      	ands	r3, r2
 8003368:	0019      	movs	r1, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	4b1b      	ldr	r3, [pc, #108]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003370:	430a      	orrs	r2, r1
 8003372:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2220      	movs	r2, #32
 800337a:	4013      	ands	r3, r2
 800337c:	d009      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800337e:	4b17      	ldr	r3, [pc, #92]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	2210      	movs	r2, #16
 8003384:	4393      	bics	r3, r2
 8003386:	0019      	movs	r1, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	4b13      	ldr	r3, [pc, #76]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800338e:	430a      	orrs	r2, r1
 8003390:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	2380      	movs	r3, #128	@ 0x80
 8003398:	029b      	lsls	r3, r3, #10
 800339a:	4013      	ands	r3, r2
 800339c:	d009      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800339e:	4b0f      	ldr	r3, [pc, #60]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a2:	2280      	movs	r2, #128	@ 0x80
 80033a4:	4393      	bics	r3, r2
 80033a6:	0019      	movs	r1, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699a      	ldr	r2, [r3, #24]
 80033ac:	4b0b      	ldr	r3, [pc, #44]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033ae:	430a      	orrs	r2, r1
 80033b0:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	2380      	movs	r3, #128	@ 0x80
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4013      	ands	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033be:	4b07      	ldr	r3, [pc, #28]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c2:	2240      	movs	r2, #64	@ 0x40
 80033c4:	4393      	bics	r3, r2
 80033c6:	0019      	movs	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	695a      	ldr	r2, [r3, #20]
 80033cc:	4b03      	ldr	r3, [pc, #12]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033ce:	430a      	orrs	r2, r1
 80033d0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	0018      	movs	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b006      	add	sp, #24
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40007000 	.word	0x40007000
 80033e4:	fffffcff 	.word	0xfffffcff
 80033e8:	fffeffff 	.word	0xfffeffff
 80033ec:	00001388 	.word	0x00001388
 80033f0:	efffffff 	.word	0xefffffff
 80033f4:	fffcffff 	.word	0xfffcffff

080033f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e0a8      	b.n	800355c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	2382      	movs	r3, #130	@ 0x82
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	429a      	cmp	r2, r3
 800341c:	d009      	beq.n	8003432 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	61da      	str	r2, [r3, #28]
 8003424:	e005      	b.n	8003432 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	225d      	movs	r2, #93	@ 0x5d
 800343c:	5c9b      	ldrb	r3, [r3, r2]
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d107      	bne.n	8003454 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	225c      	movs	r2, #92	@ 0x5c
 8003448:	2100      	movs	r1, #0
 800344a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	0018      	movs	r0, r3
 8003450:	f7fd fbfe 	bl	8000c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	225d      	movs	r2, #93	@ 0x5d
 8003458:	2102      	movs	r1, #2
 800345a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2140      	movs	r1, #64	@ 0x40
 8003468:	438a      	bics	r2, r1
 800346a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	23e0      	movs	r3, #224	@ 0xe0
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	429a      	cmp	r2, r3
 8003476:	d902      	bls.n	800347e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	e002      	b.n	8003484 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800347e:	2380      	movs	r3, #128	@ 0x80
 8003480:	015b      	lsls	r3, r3, #5
 8003482:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	23f0      	movs	r3, #240	@ 0xf0
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	429a      	cmp	r2, r3
 800348e:	d008      	beq.n	80034a2 <HAL_SPI_Init+0xaa>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	23e0      	movs	r3, #224	@ 0xe0
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	429a      	cmp	r2, r3
 800349a:	d002      	beq.n	80034a2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	2382      	movs	r3, #130	@ 0x82
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	401a      	ands	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6899      	ldr	r1, [r3, #8]
 80034b0:	2384      	movs	r3, #132	@ 0x84
 80034b2:	021b      	lsls	r3, r3, #8
 80034b4:	400b      	ands	r3, r1
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	2102      	movs	r1, #2
 80034be:	400b      	ands	r3, r1
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	2101      	movs	r1, #1
 80034c8:	400b      	ands	r3, r1
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6999      	ldr	r1, [r3, #24]
 80034d0:	2380      	movs	r3, #128	@ 0x80
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	400b      	ands	r3, r1
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	2138      	movs	r1, #56	@ 0x38
 80034de:	400b      	ands	r3, r1
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	2180      	movs	r1, #128	@ 0x80
 80034e8:	400b      	ands	r3, r1
 80034ea:	431a      	orrs	r2, r3
 80034ec:	0011      	movs	r1, r2
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034f2:	2380      	movs	r3, #128	@ 0x80
 80034f4:	019b      	lsls	r3, r3, #6
 80034f6:	401a      	ands	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	0c1b      	lsrs	r3, r3, #16
 8003506:	2204      	movs	r2, #4
 8003508:	401a      	ands	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350e:	2110      	movs	r1, #16
 8003510:	400b      	ands	r3, r1
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003518:	2108      	movs	r1, #8
 800351a:	400b      	ands	r3, r1
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68d9      	ldr	r1, [r3, #12]
 8003522:	23f0      	movs	r3, #240	@ 0xf0
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	400b      	ands	r3, r1
 8003528:	431a      	orrs	r2, r3
 800352a:	0011      	movs	r1, r2
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	2380      	movs	r3, #128	@ 0x80
 8003530:	015b      	lsls	r3, r3, #5
 8003532:	401a      	ands	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69da      	ldr	r2, [r3, #28]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4907      	ldr	r1, [pc, #28]	@ (8003564 <HAL_SPI_Init+0x16c>)
 8003548:	400a      	ands	r2, r1
 800354a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	225d      	movs	r2, #93	@ 0x5d
 8003556:	2101      	movs	r1, #1
 8003558:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	0018      	movs	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	b004      	add	sp, #16
 8003562:	bd80      	pop	{r7, pc}
 8003564:	fffff7ff 	.word	0xfffff7ff

08003568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e042      	b.n	8003600 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	223d      	movs	r2, #61	@ 0x3d
 800357e:	5c9b      	ldrb	r3, [r3, r2]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d107      	bne.n	8003596 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	223c      	movs	r2, #60	@ 0x3c
 800358a:	2100      	movs	r1, #0
 800358c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	0018      	movs	r0, r3
 8003592:	f7fd fbab 	bl	8000cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	223d      	movs	r2, #61	@ 0x3d
 800359a:	2102      	movs	r1, #2
 800359c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3304      	adds	r3, #4
 80035a6:	0019      	movs	r1, r3
 80035a8:	0010      	movs	r0, r2
 80035aa:	f000 f82d 	bl	8003608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2246      	movs	r2, #70	@ 0x46
 80035b2:	2101      	movs	r1, #1
 80035b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	223e      	movs	r2, #62	@ 0x3e
 80035ba:	2101      	movs	r1, #1
 80035bc:	5499      	strb	r1, [r3, r2]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	223f      	movs	r2, #63	@ 0x3f
 80035c2:	2101      	movs	r1, #1
 80035c4:	5499      	strb	r1, [r3, r2]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2240      	movs	r2, #64	@ 0x40
 80035ca:	2101      	movs	r1, #1
 80035cc:	5499      	strb	r1, [r3, r2]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2241      	movs	r2, #65	@ 0x41
 80035d2:	2101      	movs	r1, #1
 80035d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2242      	movs	r2, #66	@ 0x42
 80035da:	2101      	movs	r1, #1
 80035dc:	5499      	strb	r1, [r3, r2]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2243      	movs	r2, #67	@ 0x43
 80035e2:	2101      	movs	r1, #1
 80035e4:	5499      	strb	r1, [r3, r2]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2244      	movs	r2, #68	@ 0x44
 80035ea:	2101      	movs	r1, #1
 80035ec:	5499      	strb	r1, [r3, r2]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2245      	movs	r2, #69	@ 0x45
 80035f2:	2101      	movs	r1, #1
 80035f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	223d      	movs	r2, #61	@ 0x3d
 80035fa:	2101      	movs	r1, #1
 80035fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	0018      	movs	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	b002      	add	sp, #8
 8003606:	bd80      	pop	{r7, pc}

08003608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a3b      	ldr	r2, [pc, #236]	@ (8003708 <TIM_Base_SetConfig+0x100>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d008      	beq.n	8003632 <TIM_Base_SetConfig+0x2a>
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	2380      	movs	r3, #128	@ 0x80
 8003624:	05db      	lsls	r3, r3, #23
 8003626:	429a      	cmp	r2, r3
 8003628:	d003      	beq.n	8003632 <TIM_Base_SetConfig+0x2a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a37      	ldr	r2, [pc, #220]	@ (800370c <TIM_Base_SetConfig+0x104>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d108      	bne.n	8003644 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2270      	movs	r2, #112	@ 0x70
 8003636:	4393      	bics	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a30      	ldr	r2, [pc, #192]	@ (8003708 <TIM_Base_SetConfig+0x100>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d018      	beq.n	800367e <TIM_Base_SetConfig+0x76>
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	2380      	movs	r3, #128	@ 0x80
 8003650:	05db      	lsls	r3, r3, #23
 8003652:	429a      	cmp	r2, r3
 8003654:	d013      	beq.n	800367e <TIM_Base_SetConfig+0x76>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a2c      	ldr	r2, [pc, #176]	@ (800370c <TIM_Base_SetConfig+0x104>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00f      	beq.n	800367e <TIM_Base_SetConfig+0x76>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a2b      	ldr	r2, [pc, #172]	@ (8003710 <TIM_Base_SetConfig+0x108>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00b      	beq.n	800367e <TIM_Base_SetConfig+0x76>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a2a      	ldr	r2, [pc, #168]	@ (8003714 <TIM_Base_SetConfig+0x10c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d007      	beq.n	800367e <TIM_Base_SetConfig+0x76>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a29      	ldr	r2, [pc, #164]	@ (8003718 <TIM_Base_SetConfig+0x110>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d003      	beq.n	800367e <TIM_Base_SetConfig+0x76>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a28      	ldr	r2, [pc, #160]	@ (800371c <TIM_Base_SetConfig+0x114>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d108      	bne.n	8003690 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4a27      	ldr	r2, [pc, #156]	@ (8003720 <TIM_Base_SetConfig+0x118>)
 8003682:	4013      	ands	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4313      	orrs	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2280      	movs	r2, #128	@ 0x80
 8003694:	4393      	bics	r3, r2
 8003696:	001a      	movs	r2, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a13      	ldr	r2, [pc, #76]	@ (8003708 <TIM_Base_SetConfig+0x100>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00b      	beq.n	80036d6 <TIM_Base_SetConfig+0xce>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a14      	ldr	r2, [pc, #80]	@ (8003714 <TIM_Base_SetConfig+0x10c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d007      	beq.n	80036d6 <TIM_Base_SetConfig+0xce>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a13      	ldr	r2, [pc, #76]	@ (8003718 <TIM_Base_SetConfig+0x110>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d003      	beq.n	80036d6 <TIM_Base_SetConfig+0xce>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a12      	ldr	r2, [pc, #72]	@ (800371c <TIM_Base_SetConfig+0x114>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d103      	bne.n	80036de <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2201      	movs	r2, #1
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d106      	bne.n	80036fe <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2201      	movs	r2, #1
 80036f6:	4393      	bics	r3, r2
 80036f8:	001a      	movs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	611a      	str	r2, [r3, #16]
  }
}
 80036fe:	46c0      	nop			@ (mov r8, r8)
 8003700:	46bd      	mov	sp, r7
 8003702:	b004      	add	sp, #16
 8003704:	bd80      	pop	{r7, pc}
 8003706:	46c0      	nop			@ (mov r8, r8)
 8003708:	40012c00 	.word	0x40012c00
 800370c:	40000400 	.word	0x40000400
 8003710:	40002000 	.word	0x40002000
 8003714:	40014000 	.word	0x40014000
 8003718:	40014400 	.word	0x40014400
 800371c:	40014800 	.word	0x40014800
 8003720:	fffffcff 	.word	0xfffffcff

08003724 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8003724:	b590      	push	{r4, r7, lr}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e074      	b.n	8003820 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	223c      	movs	r2, #60	@ 0x3c
 800373a:	5c9b      	ldrb	r3, [r3, r2]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d107      	bne.n	8003752 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	223d      	movs	r2, #61	@ 0x3d
 8003746:	2100      	movs	r1, #0
 8003748:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	0018      	movs	r0, r3
 800374e:	f7fd faed 	bl	8000d2c <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	223c      	movs	r2, #60	@ 0x3c
 8003756:	2102      	movs	r1, #2
 8003758:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2201      	movs	r2, #1
 8003760:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6819      	ldr	r1, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003770:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8003778:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800377e:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8003784:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800378a:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         htsc->Init.MaxCountValue |
 8003790:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         htsc->Init.SynchroPinPolarity |
 8003796:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	7b1b      	ldrb	r3, [r3, #12]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d108      	bne.n	80037ba <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2180      	movs	r1, #128	@ 0x80
 80037b4:	0249      	lsls	r1, r1, #9
 80037b6:	430a      	orrs	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	43d2      	mvns	r2, r2
 80037d0:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037ea:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681c      	ldr	r4, [r3, #0]
 80037f4:	0010      	movs	r0, r2
 80037f6:	f000 f817 	bl	8003828 <TSC_extract_groups>
 80037fa:	0003      	movs	r3, r0
 80037fc:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2103      	movs	r1, #3
 800380a:	438a      	bics	r2, r1
 800380c:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2203      	movs	r2, #3
 8003814:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	223c      	movs	r2, #60	@ 0x3c
 800381a:	2101      	movs	r1, #1
 800381c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	0018      	movs	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	b003      	add	sp, #12
 8003826:	bd90      	pop	{r4, r7, pc}

08003828 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8003834:	2300      	movs	r3, #0
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	e011      	b.n	800385e <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	220f      	movs	r2, #15
 8003840:	409a      	lsls	r2, r3
 8003842:	0013      	movs	r3, r2
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	4013      	ands	r3, r2
 8003848:	d006      	beq.n	8003858 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 800384a:	2201      	movs	r2, #1
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	409a      	lsls	r2, r3
 8003850:	0013      	movs	r3, r2
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4313      	orrs	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	3301      	adds	r3, #1
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b07      	cmp	r3, #7
 8003862:	d9ea      	bls.n	800383a <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8003864:	68fb      	ldr	r3, [r7, #12]
}
 8003866:	0018      	movs	r0, r3
 8003868:	46bd      	mov	sp, r7
 800386a:	b004      	add	sp, #16
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003878:	4b09      	ldr	r3, [pc, #36]	@ (80038a0 <USB_DisableGlobalInt+0x30>)
 800387a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2240      	movs	r2, #64	@ 0x40
 8003880:	5a9b      	ldrh	r3, [r3, r2]
 8003882:	b29b      	uxth	r3, r3
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	b292      	uxth	r2, r2
 8003888:	43d2      	mvns	r2, r2
 800388a:	b292      	uxth	r2, r2
 800388c:	4013      	ands	r3, r2
 800388e:	b299      	uxth	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2240      	movs	r2, #64	@ 0x40
 8003894:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	0018      	movs	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	b004      	add	sp, #16
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	0000bf80 	.word	0x0000bf80

080038a4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	1d3b      	adds	r3, r7, #4
 80038ae:	6019      	str	r1, [r3, #0]
 80038b0:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2240      	movs	r2, #64	@ 0x40
 80038b6:	2101      	movs	r1, #1
 80038b8:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2240      	movs	r2, #64	@ 0x40
 80038be:	2100      	movs	r1, #0
 80038c0:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2244      	movs	r2, #68	@ 0x44
 80038c6:	2100      	movs	r1, #0
 80038c8:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2250      	movs	r2, #80	@ 0x50
 80038ce:	2100      	movs	r1, #0
 80038d0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	0018      	movs	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b004      	add	sp, #16
 80038da:	bd80      	pop	{r7, pc}

080038dc <siprintf>:
 80038dc:	b40e      	push	{r1, r2, r3}
 80038de:	b510      	push	{r4, lr}
 80038e0:	2400      	movs	r4, #0
 80038e2:	490c      	ldr	r1, [pc, #48]	@ (8003914 <siprintf+0x38>)
 80038e4:	b09d      	sub	sp, #116	@ 0x74
 80038e6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80038e8:	9002      	str	r0, [sp, #8]
 80038ea:	9006      	str	r0, [sp, #24]
 80038ec:	9107      	str	r1, [sp, #28]
 80038ee:	9104      	str	r1, [sp, #16]
 80038f0:	4809      	ldr	r0, [pc, #36]	@ (8003918 <siprintf+0x3c>)
 80038f2:	490a      	ldr	r1, [pc, #40]	@ (800391c <siprintf+0x40>)
 80038f4:	cb04      	ldmia	r3!, {r2}
 80038f6:	9105      	str	r1, [sp, #20]
 80038f8:	6800      	ldr	r0, [r0, #0]
 80038fa:	a902      	add	r1, sp, #8
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003900:	f000 f8a2 	bl	8003a48 <_svfiprintf_r>
 8003904:	9b02      	ldr	r3, [sp, #8]
 8003906:	701c      	strb	r4, [r3, #0]
 8003908:	b01d      	add	sp, #116	@ 0x74
 800390a:	bc10      	pop	{r4}
 800390c:	bc08      	pop	{r3}
 800390e:	b003      	add	sp, #12
 8003910:	4718      	bx	r3
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	7fffffff 	.word	0x7fffffff
 8003918:	2000000c 	.word	0x2000000c
 800391c:	ffff0208 	.word	0xffff0208

08003920 <memset>:
 8003920:	0003      	movs	r3, r0
 8003922:	1882      	adds	r2, r0, r2
 8003924:	4293      	cmp	r3, r2
 8003926:	d100      	bne.n	800392a <memset+0xa>
 8003928:	4770      	bx	lr
 800392a:	7019      	strb	r1, [r3, #0]
 800392c:	3301      	adds	r3, #1
 800392e:	e7f9      	b.n	8003924 <memset+0x4>

08003930 <__errno>:
 8003930:	4b01      	ldr	r3, [pc, #4]	@ (8003938 <__errno+0x8>)
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	4770      	bx	lr
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	2000000c 	.word	0x2000000c

0800393c <__libc_init_array>:
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	2600      	movs	r6, #0
 8003940:	4c0c      	ldr	r4, [pc, #48]	@ (8003974 <__libc_init_array+0x38>)
 8003942:	4d0d      	ldr	r5, [pc, #52]	@ (8003978 <__libc_init_array+0x3c>)
 8003944:	1b64      	subs	r4, r4, r5
 8003946:	10a4      	asrs	r4, r4, #2
 8003948:	42a6      	cmp	r6, r4
 800394a:	d109      	bne.n	8003960 <__libc_init_array+0x24>
 800394c:	2600      	movs	r6, #0
 800394e:	f000 fc61 	bl	8004214 <_init>
 8003952:	4c0a      	ldr	r4, [pc, #40]	@ (800397c <__libc_init_array+0x40>)
 8003954:	4d0a      	ldr	r5, [pc, #40]	@ (8003980 <__libc_init_array+0x44>)
 8003956:	1b64      	subs	r4, r4, r5
 8003958:	10a4      	asrs	r4, r4, #2
 800395a:	42a6      	cmp	r6, r4
 800395c:	d105      	bne.n	800396a <__libc_init_array+0x2e>
 800395e:	bd70      	pop	{r4, r5, r6, pc}
 8003960:	00b3      	lsls	r3, r6, #2
 8003962:	58eb      	ldr	r3, [r5, r3]
 8003964:	4798      	blx	r3
 8003966:	3601      	adds	r6, #1
 8003968:	e7ee      	b.n	8003948 <__libc_init_array+0xc>
 800396a:	00b3      	lsls	r3, r6, #2
 800396c:	58eb      	ldr	r3, [r5, r3]
 800396e:	4798      	blx	r3
 8003970:	3601      	adds	r6, #1
 8003972:	e7f2      	b.n	800395a <__libc_init_array+0x1e>
 8003974:	080042a0 	.word	0x080042a0
 8003978:	080042a0 	.word	0x080042a0
 800397c:	080042a4 	.word	0x080042a4
 8003980:	080042a0 	.word	0x080042a0

08003984 <__retarget_lock_acquire_recursive>:
 8003984:	4770      	bx	lr

08003986 <__retarget_lock_release_recursive>:
 8003986:	4770      	bx	lr

08003988 <__ssputs_r>:
 8003988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800398a:	688e      	ldr	r6, [r1, #8]
 800398c:	b085      	sub	sp, #20
 800398e:	001f      	movs	r7, r3
 8003990:	000c      	movs	r4, r1
 8003992:	680b      	ldr	r3, [r1, #0]
 8003994:	9002      	str	r0, [sp, #8]
 8003996:	9203      	str	r2, [sp, #12]
 8003998:	42be      	cmp	r6, r7
 800399a:	d830      	bhi.n	80039fe <__ssputs_r+0x76>
 800399c:	210c      	movs	r1, #12
 800399e:	5e62      	ldrsh	r2, [r4, r1]
 80039a0:	2190      	movs	r1, #144	@ 0x90
 80039a2:	00c9      	lsls	r1, r1, #3
 80039a4:	420a      	tst	r2, r1
 80039a6:	d028      	beq.n	80039fa <__ssputs_r+0x72>
 80039a8:	2003      	movs	r0, #3
 80039aa:	6921      	ldr	r1, [r4, #16]
 80039ac:	1a5b      	subs	r3, r3, r1
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	6963      	ldr	r3, [r4, #20]
 80039b2:	4343      	muls	r3, r0
 80039b4:	9801      	ldr	r0, [sp, #4]
 80039b6:	0fdd      	lsrs	r5, r3, #31
 80039b8:	18ed      	adds	r5, r5, r3
 80039ba:	1c7b      	adds	r3, r7, #1
 80039bc:	181b      	adds	r3, r3, r0
 80039be:	106d      	asrs	r5, r5, #1
 80039c0:	42ab      	cmp	r3, r5
 80039c2:	d900      	bls.n	80039c6 <__ssputs_r+0x3e>
 80039c4:	001d      	movs	r5, r3
 80039c6:	0552      	lsls	r2, r2, #21
 80039c8:	d528      	bpl.n	8003a1c <__ssputs_r+0x94>
 80039ca:	0029      	movs	r1, r5
 80039cc:	9802      	ldr	r0, [sp, #8]
 80039ce:	f000 f95b 	bl	8003c88 <_malloc_r>
 80039d2:	1e06      	subs	r6, r0, #0
 80039d4:	d02c      	beq.n	8003a30 <__ssputs_r+0xa8>
 80039d6:	9a01      	ldr	r2, [sp, #4]
 80039d8:	6921      	ldr	r1, [r4, #16]
 80039da:	f000 fbc0 	bl	800415e <memcpy>
 80039de:	89a2      	ldrh	r2, [r4, #12]
 80039e0:	4b18      	ldr	r3, [pc, #96]	@ (8003a44 <__ssputs_r+0xbc>)
 80039e2:	401a      	ands	r2, r3
 80039e4:	2380      	movs	r3, #128	@ 0x80
 80039e6:	4313      	orrs	r3, r2
 80039e8:	81a3      	strh	r3, [r4, #12]
 80039ea:	9b01      	ldr	r3, [sp, #4]
 80039ec:	6126      	str	r6, [r4, #16]
 80039ee:	18f6      	adds	r6, r6, r3
 80039f0:	6026      	str	r6, [r4, #0]
 80039f2:	003e      	movs	r6, r7
 80039f4:	6165      	str	r5, [r4, #20]
 80039f6:	1aed      	subs	r5, r5, r3
 80039f8:	60a5      	str	r5, [r4, #8]
 80039fa:	42be      	cmp	r6, r7
 80039fc:	d900      	bls.n	8003a00 <__ssputs_r+0x78>
 80039fe:	003e      	movs	r6, r7
 8003a00:	0032      	movs	r2, r6
 8003a02:	9903      	ldr	r1, [sp, #12]
 8003a04:	6820      	ldr	r0, [r4, #0]
 8003a06:	f000 fb7b 	bl	8004100 <memmove>
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	68a3      	ldr	r3, [r4, #8]
 8003a0e:	1b9b      	subs	r3, r3, r6
 8003a10:	60a3      	str	r3, [r4, #8]
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	199b      	adds	r3, r3, r6
 8003a16:	6023      	str	r3, [r4, #0]
 8003a18:	b005      	add	sp, #20
 8003a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a1c:	002a      	movs	r2, r5
 8003a1e:	9802      	ldr	r0, [sp, #8]
 8003a20:	f000 fb3e 	bl	80040a0 <_realloc_r>
 8003a24:	1e06      	subs	r6, r0, #0
 8003a26:	d1e0      	bne.n	80039ea <__ssputs_r+0x62>
 8003a28:	6921      	ldr	r1, [r4, #16]
 8003a2a:	9802      	ldr	r0, [sp, #8]
 8003a2c:	f000 fba0 	bl	8004170 <_free_r>
 8003a30:	230c      	movs	r3, #12
 8003a32:	2001      	movs	r0, #1
 8003a34:	9a02      	ldr	r2, [sp, #8]
 8003a36:	4240      	negs	r0, r0
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	89a2      	ldrh	r2, [r4, #12]
 8003a3c:	3334      	adds	r3, #52	@ 0x34
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	81a3      	strh	r3, [r4, #12]
 8003a42:	e7e9      	b.n	8003a18 <__ssputs_r+0x90>
 8003a44:	fffffb7f 	.word	0xfffffb7f

08003a48 <_svfiprintf_r>:
 8003a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a4a:	b0a1      	sub	sp, #132	@ 0x84
 8003a4c:	9003      	str	r0, [sp, #12]
 8003a4e:	001d      	movs	r5, r3
 8003a50:	898b      	ldrh	r3, [r1, #12]
 8003a52:	000f      	movs	r7, r1
 8003a54:	0016      	movs	r6, r2
 8003a56:	061b      	lsls	r3, r3, #24
 8003a58:	d511      	bpl.n	8003a7e <_svfiprintf_r+0x36>
 8003a5a:	690b      	ldr	r3, [r1, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10e      	bne.n	8003a7e <_svfiprintf_r+0x36>
 8003a60:	2140      	movs	r1, #64	@ 0x40
 8003a62:	f000 f911 	bl	8003c88 <_malloc_r>
 8003a66:	6038      	str	r0, [r7, #0]
 8003a68:	6138      	str	r0, [r7, #16]
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	d105      	bne.n	8003a7a <_svfiprintf_r+0x32>
 8003a6e:	230c      	movs	r3, #12
 8003a70:	9a03      	ldr	r2, [sp, #12]
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	2001      	movs	r0, #1
 8003a76:	4240      	negs	r0, r0
 8003a78:	e0cf      	b.n	8003c1a <_svfiprintf_r+0x1d2>
 8003a7a:	2340      	movs	r3, #64	@ 0x40
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	ac08      	add	r4, sp, #32
 8003a82:	6163      	str	r3, [r4, #20]
 8003a84:	3320      	adds	r3, #32
 8003a86:	7663      	strb	r3, [r4, #25]
 8003a88:	3310      	adds	r3, #16
 8003a8a:	76a3      	strb	r3, [r4, #26]
 8003a8c:	9507      	str	r5, [sp, #28]
 8003a8e:	0035      	movs	r5, r6
 8003a90:	782b      	ldrb	r3, [r5, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <_svfiprintf_r+0x52>
 8003a96:	2b25      	cmp	r3, #37	@ 0x25
 8003a98:	d148      	bne.n	8003b2c <_svfiprintf_r+0xe4>
 8003a9a:	1bab      	subs	r3, r5, r6
 8003a9c:	9305      	str	r3, [sp, #20]
 8003a9e:	42b5      	cmp	r5, r6
 8003aa0:	d00b      	beq.n	8003aba <_svfiprintf_r+0x72>
 8003aa2:	0032      	movs	r2, r6
 8003aa4:	0039      	movs	r1, r7
 8003aa6:	9803      	ldr	r0, [sp, #12]
 8003aa8:	f7ff ff6e 	bl	8003988 <__ssputs_r>
 8003aac:	3001      	adds	r0, #1
 8003aae:	d100      	bne.n	8003ab2 <_svfiprintf_r+0x6a>
 8003ab0:	e0ae      	b.n	8003c10 <_svfiprintf_r+0x1c8>
 8003ab2:	6963      	ldr	r3, [r4, #20]
 8003ab4:	9a05      	ldr	r2, [sp, #20]
 8003ab6:	189b      	adds	r3, r3, r2
 8003ab8:	6163      	str	r3, [r4, #20]
 8003aba:	782b      	ldrb	r3, [r5, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d100      	bne.n	8003ac2 <_svfiprintf_r+0x7a>
 8003ac0:	e0a6      	b.n	8003c10 <_svfiprintf_r+0x1c8>
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	4252      	negs	r2, r2
 8003ac8:	6062      	str	r2, [r4, #4]
 8003aca:	a904      	add	r1, sp, #16
 8003acc:	3254      	adds	r2, #84	@ 0x54
 8003ace:	1852      	adds	r2, r2, r1
 8003ad0:	1c6e      	adds	r6, r5, #1
 8003ad2:	6023      	str	r3, [r4, #0]
 8003ad4:	60e3      	str	r3, [r4, #12]
 8003ad6:	60a3      	str	r3, [r4, #8]
 8003ad8:	7013      	strb	r3, [r2, #0]
 8003ada:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003adc:	4b54      	ldr	r3, [pc, #336]	@ (8003c30 <_svfiprintf_r+0x1e8>)
 8003ade:	2205      	movs	r2, #5
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	7831      	ldrb	r1, [r6, #0]
 8003ae4:	9305      	str	r3, [sp, #20]
 8003ae6:	f000 fb2f 	bl	8004148 <memchr>
 8003aea:	1c75      	adds	r5, r6, #1
 8003aec:	2800      	cmp	r0, #0
 8003aee:	d11f      	bne.n	8003b30 <_svfiprintf_r+0xe8>
 8003af0:	6822      	ldr	r2, [r4, #0]
 8003af2:	06d3      	lsls	r3, r2, #27
 8003af4:	d504      	bpl.n	8003b00 <_svfiprintf_r+0xb8>
 8003af6:	2353      	movs	r3, #83	@ 0x53
 8003af8:	a904      	add	r1, sp, #16
 8003afa:	185b      	adds	r3, r3, r1
 8003afc:	2120      	movs	r1, #32
 8003afe:	7019      	strb	r1, [r3, #0]
 8003b00:	0713      	lsls	r3, r2, #28
 8003b02:	d504      	bpl.n	8003b0e <_svfiprintf_r+0xc6>
 8003b04:	2353      	movs	r3, #83	@ 0x53
 8003b06:	a904      	add	r1, sp, #16
 8003b08:	185b      	adds	r3, r3, r1
 8003b0a:	212b      	movs	r1, #43	@ 0x2b
 8003b0c:	7019      	strb	r1, [r3, #0]
 8003b0e:	7833      	ldrb	r3, [r6, #0]
 8003b10:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b12:	d016      	beq.n	8003b42 <_svfiprintf_r+0xfa>
 8003b14:	0035      	movs	r5, r6
 8003b16:	2100      	movs	r1, #0
 8003b18:	200a      	movs	r0, #10
 8003b1a:	68e3      	ldr	r3, [r4, #12]
 8003b1c:	782a      	ldrb	r2, [r5, #0]
 8003b1e:	1c6e      	adds	r6, r5, #1
 8003b20:	3a30      	subs	r2, #48	@ 0x30
 8003b22:	2a09      	cmp	r2, #9
 8003b24:	d950      	bls.n	8003bc8 <_svfiprintf_r+0x180>
 8003b26:	2900      	cmp	r1, #0
 8003b28:	d111      	bne.n	8003b4e <_svfiprintf_r+0x106>
 8003b2a:	e017      	b.n	8003b5c <_svfiprintf_r+0x114>
 8003b2c:	3501      	adds	r5, #1
 8003b2e:	e7af      	b.n	8003a90 <_svfiprintf_r+0x48>
 8003b30:	9b05      	ldr	r3, [sp, #20]
 8003b32:	6822      	ldr	r2, [r4, #0]
 8003b34:	1ac0      	subs	r0, r0, r3
 8003b36:	2301      	movs	r3, #1
 8003b38:	4083      	lsls	r3, r0
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	002e      	movs	r6, r5
 8003b3e:	6023      	str	r3, [r4, #0]
 8003b40:	e7cc      	b.n	8003adc <_svfiprintf_r+0x94>
 8003b42:	9b07      	ldr	r3, [sp, #28]
 8003b44:	1d19      	adds	r1, r3, #4
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	9107      	str	r1, [sp, #28]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	db01      	blt.n	8003b52 <_svfiprintf_r+0x10a>
 8003b4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003b50:	e004      	b.n	8003b5c <_svfiprintf_r+0x114>
 8003b52:	425b      	negs	r3, r3
 8003b54:	60e3      	str	r3, [r4, #12]
 8003b56:	2302      	movs	r3, #2
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	6023      	str	r3, [r4, #0]
 8003b5c:	782b      	ldrb	r3, [r5, #0]
 8003b5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b60:	d10c      	bne.n	8003b7c <_svfiprintf_r+0x134>
 8003b62:	786b      	ldrb	r3, [r5, #1]
 8003b64:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b66:	d134      	bne.n	8003bd2 <_svfiprintf_r+0x18a>
 8003b68:	9b07      	ldr	r3, [sp, #28]
 8003b6a:	3502      	adds	r5, #2
 8003b6c:	1d1a      	adds	r2, r3, #4
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	9207      	str	r2, [sp, #28]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	da01      	bge.n	8003b7a <_svfiprintf_r+0x132>
 8003b76:	2301      	movs	r3, #1
 8003b78:	425b      	negs	r3, r3
 8003b7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b7c:	4e2d      	ldr	r6, [pc, #180]	@ (8003c34 <_svfiprintf_r+0x1ec>)
 8003b7e:	2203      	movs	r2, #3
 8003b80:	0030      	movs	r0, r6
 8003b82:	7829      	ldrb	r1, [r5, #0]
 8003b84:	f000 fae0 	bl	8004148 <memchr>
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	d006      	beq.n	8003b9a <_svfiprintf_r+0x152>
 8003b8c:	2340      	movs	r3, #64	@ 0x40
 8003b8e:	1b80      	subs	r0, r0, r6
 8003b90:	4083      	lsls	r3, r0
 8003b92:	6822      	ldr	r2, [r4, #0]
 8003b94:	3501      	adds	r5, #1
 8003b96:	4313      	orrs	r3, r2
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	7829      	ldrb	r1, [r5, #0]
 8003b9c:	2206      	movs	r2, #6
 8003b9e:	4826      	ldr	r0, [pc, #152]	@ (8003c38 <_svfiprintf_r+0x1f0>)
 8003ba0:	1c6e      	adds	r6, r5, #1
 8003ba2:	7621      	strb	r1, [r4, #24]
 8003ba4:	f000 fad0 	bl	8004148 <memchr>
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	d038      	beq.n	8003c1e <_svfiprintf_r+0x1d6>
 8003bac:	4b23      	ldr	r3, [pc, #140]	@ (8003c3c <_svfiprintf_r+0x1f4>)
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d122      	bne.n	8003bf8 <_svfiprintf_r+0x1b0>
 8003bb2:	2207      	movs	r2, #7
 8003bb4:	9b07      	ldr	r3, [sp, #28]
 8003bb6:	3307      	adds	r3, #7
 8003bb8:	4393      	bics	r3, r2
 8003bba:	3308      	adds	r3, #8
 8003bbc:	9307      	str	r3, [sp, #28]
 8003bbe:	6963      	ldr	r3, [r4, #20]
 8003bc0:	9a04      	ldr	r2, [sp, #16]
 8003bc2:	189b      	adds	r3, r3, r2
 8003bc4:	6163      	str	r3, [r4, #20]
 8003bc6:	e762      	b.n	8003a8e <_svfiprintf_r+0x46>
 8003bc8:	4343      	muls	r3, r0
 8003bca:	0035      	movs	r5, r6
 8003bcc:	2101      	movs	r1, #1
 8003bce:	189b      	adds	r3, r3, r2
 8003bd0:	e7a4      	b.n	8003b1c <_svfiprintf_r+0xd4>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	200a      	movs	r0, #10
 8003bd6:	0019      	movs	r1, r3
 8003bd8:	3501      	adds	r5, #1
 8003bda:	6063      	str	r3, [r4, #4]
 8003bdc:	782a      	ldrb	r2, [r5, #0]
 8003bde:	1c6e      	adds	r6, r5, #1
 8003be0:	3a30      	subs	r2, #48	@ 0x30
 8003be2:	2a09      	cmp	r2, #9
 8003be4:	d903      	bls.n	8003bee <_svfiprintf_r+0x1a6>
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0c8      	beq.n	8003b7c <_svfiprintf_r+0x134>
 8003bea:	9109      	str	r1, [sp, #36]	@ 0x24
 8003bec:	e7c6      	b.n	8003b7c <_svfiprintf_r+0x134>
 8003bee:	4341      	muls	r1, r0
 8003bf0:	0035      	movs	r5, r6
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	1889      	adds	r1, r1, r2
 8003bf6:	e7f1      	b.n	8003bdc <_svfiprintf_r+0x194>
 8003bf8:	aa07      	add	r2, sp, #28
 8003bfa:	9200      	str	r2, [sp, #0]
 8003bfc:	0021      	movs	r1, r4
 8003bfe:	003a      	movs	r2, r7
 8003c00:	4b0f      	ldr	r3, [pc, #60]	@ (8003c40 <_svfiprintf_r+0x1f8>)
 8003c02:	9803      	ldr	r0, [sp, #12]
 8003c04:	e000      	b.n	8003c08 <_svfiprintf_r+0x1c0>
 8003c06:	bf00      	nop
 8003c08:	9004      	str	r0, [sp, #16]
 8003c0a:	9b04      	ldr	r3, [sp, #16]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	d1d6      	bne.n	8003bbe <_svfiprintf_r+0x176>
 8003c10:	89bb      	ldrh	r3, [r7, #12]
 8003c12:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003c14:	065b      	lsls	r3, r3, #25
 8003c16:	d500      	bpl.n	8003c1a <_svfiprintf_r+0x1d2>
 8003c18:	e72c      	b.n	8003a74 <_svfiprintf_r+0x2c>
 8003c1a:	b021      	add	sp, #132	@ 0x84
 8003c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c1e:	aa07      	add	r2, sp, #28
 8003c20:	9200      	str	r2, [sp, #0]
 8003c22:	0021      	movs	r1, r4
 8003c24:	003a      	movs	r2, r7
 8003c26:	4b06      	ldr	r3, [pc, #24]	@ (8003c40 <_svfiprintf_r+0x1f8>)
 8003c28:	9803      	ldr	r0, [sp, #12]
 8003c2a:	f000 f91d 	bl	8003e68 <_printf_i>
 8003c2e:	e7eb      	b.n	8003c08 <_svfiprintf_r+0x1c0>
 8003c30:	0800426c 	.word	0x0800426c
 8003c34:	08004272 	.word	0x08004272
 8003c38:	08004276 	.word	0x08004276
 8003c3c:	00000000 	.word	0x00000000
 8003c40:	08003989 	.word	0x08003989

08003c44 <sbrk_aligned>:
 8003c44:	b570      	push	{r4, r5, r6, lr}
 8003c46:	4e0f      	ldr	r6, [pc, #60]	@ (8003c84 <sbrk_aligned+0x40>)
 8003c48:	000d      	movs	r5, r1
 8003c4a:	6831      	ldr	r1, [r6, #0]
 8003c4c:	0004      	movs	r4, r0
 8003c4e:	2900      	cmp	r1, #0
 8003c50:	d102      	bne.n	8003c58 <sbrk_aligned+0x14>
 8003c52:	f000 fa67 	bl	8004124 <_sbrk_r>
 8003c56:	6030      	str	r0, [r6, #0]
 8003c58:	0029      	movs	r1, r5
 8003c5a:	0020      	movs	r0, r4
 8003c5c:	f000 fa62 	bl	8004124 <_sbrk_r>
 8003c60:	1c43      	adds	r3, r0, #1
 8003c62:	d103      	bne.n	8003c6c <sbrk_aligned+0x28>
 8003c64:	2501      	movs	r5, #1
 8003c66:	426d      	negs	r5, r5
 8003c68:	0028      	movs	r0, r5
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	1cc5      	adds	r5, r0, #3
 8003c70:	439d      	bics	r5, r3
 8003c72:	42a8      	cmp	r0, r5
 8003c74:	d0f8      	beq.n	8003c68 <sbrk_aligned+0x24>
 8003c76:	1a29      	subs	r1, r5, r0
 8003c78:	0020      	movs	r0, r4
 8003c7a:	f000 fa53 	bl	8004124 <_sbrk_r>
 8003c7e:	3001      	adds	r0, #1
 8003c80:	d1f2      	bne.n	8003c68 <sbrk_aligned+0x24>
 8003c82:	e7ef      	b.n	8003c64 <sbrk_aligned+0x20>
 8003c84:	20000670 	.word	0x20000670

08003c88 <_malloc_r>:
 8003c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c8a:	2203      	movs	r2, #3
 8003c8c:	1ccb      	adds	r3, r1, #3
 8003c8e:	4393      	bics	r3, r2
 8003c90:	3308      	adds	r3, #8
 8003c92:	0005      	movs	r5, r0
 8003c94:	001f      	movs	r7, r3
 8003c96:	2b0c      	cmp	r3, #12
 8003c98:	d234      	bcs.n	8003d04 <_malloc_r+0x7c>
 8003c9a:	270c      	movs	r7, #12
 8003c9c:	42b9      	cmp	r1, r7
 8003c9e:	d833      	bhi.n	8003d08 <_malloc_r+0x80>
 8003ca0:	0028      	movs	r0, r5
 8003ca2:	f000 f9ed 	bl	8004080 <__malloc_lock>
 8003ca6:	4e37      	ldr	r6, [pc, #220]	@ (8003d84 <_malloc_r+0xfc>)
 8003ca8:	6833      	ldr	r3, [r6, #0]
 8003caa:	001c      	movs	r4, r3
 8003cac:	2c00      	cmp	r4, #0
 8003cae:	d12f      	bne.n	8003d10 <_malloc_r+0x88>
 8003cb0:	0039      	movs	r1, r7
 8003cb2:	0028      	movs	r0, r5
 8003cb4:	f7ff ffc6 	bl	8003c44 <sbrk_aligned>
 8003cb8:	0004      	movs	r4, r0
 8003cba:	1c43      	adds	r3, r0, #1
 8003cbc:	d15f      	bne.n	8003d7e <_malloc_r+0xf6>
 8003cbe:	6834      	ldr	r4, [r6, #0]
 8003cc0:	9400      	str	r4, [sp, #0]
 8003cc2:	9b00      	ldr	r3, [sp, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d14a      	bne.n	8003d5e <_malloc_r+0xd6>
 8003cc8:	2c00      	cmp	r4, #0
 8003cca:	d052      	beq.n	8003d72 <_malloc_r+0xea>
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	0028      	movs	r0, r5
 8003cd0:	18e3      	adds	r3, r4, r3
 8003cd2:	9900      	ldr	r1, [sp, #0]
 8003cd4:	9301      	str	r3, [sp, #4]
 8003cd6:	f000 fa25 	bl	8004124 <_sbrk_r>
 8003cda:	9b01      	ldr	r3, [sp, #4]
 8003cdc:	4283      	cmp	r3, r0
 8003cde:	d148      	bne.n	8003d72 <_malloc_r+0xea>
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	0028      	movs	r0, r5
 8003ce4:	1aff      	subs	r7, r7, r3
 8003ce6:	0039      	movs	r1, r7
 8003ce8:	f7ff ffac 	bl	8003c44 <sbrk_aligned>
 8003cec:	3001      	adds	r0, #1
 8003cee:	d040      	beq.n	8003d72 <_malloc_r+0xea>
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	19db      	adds	r3, r3, r7
 8003cf4:	6023      	str	r3, [r4, #0]
 8003cf6:	6833      	ldr	r3, [r6, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	2a00      	cmp	r2, #0
 8003cfc:	d133      	bne.n	8003d66 <_malloc_r+0xde>
 8003cfe:	9b00      	ldr	r3, [sp, #0]
 8003d00:	6033      	str	r3, [r6, #0]
 8003d02:	e019      	b.n	8003d38 <_malloc_r+0xb0>
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	dac9      	bge.n	8003c9c <_malloc_r+0x14>
 8003d08:	230c      	movs	r3, #12
 8003d0a:	602b      	str	r3, [r5, #0]
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d10:	6821      	ldr	r1, [r4, #0]
 8003d12:	1bc9      	subs	r1, r1, r7
 8003d14:	d420      	bmi.n	8003d58 <_malloc_r+0xd0>
 8003d16:	290b      	cmp	r1, #11
 8003d18:	d90a      	bls.n	8003d30 <_malloc_r+0xa8>
 8003d1a:	19e2      	adds	r2, r4, r7
 8003d1c:	6027      	str	r7, [r4, #0]
 8003d1e:	42a3      	cmp	r3, r4
 8003d20:	d104      	bne.n	8003d2c <_malloc_r+0xa4>
 8003d22:	6032      	str	r2, [r6, #0]
 8003d24:	6863      	ldr	r3, [r4, #4]
 8003d26:	6011      	str	r1, [r2, #0]
 8003d28:	6053      	str	r3, [r2, #4]
 8003d2a:	e005      	b.n	8003d38 <_malloc_r+0xb0>
 8003d2c:	605a      	str	r2, [r3, #4]
 8003d2e:	e7f9      	b.n	8003d24 <_malloc_r+0x9c>
 8003d30:	6862      	ldr	r2, [r4, #4]
 8003d32:	42a3      	cmp	r3, r4
 8003d34:	d10e      	bne.n	8003d54 <_malloc_r+0xcc>
 8003d36:	6032      	str	r2, [r6, #0]
 8003d38:	0028      	movs	r0, r5
 8003d3a:	f000 f9a9 	bl	8004090 <__malloc_unlock>
 8003d3e:	0020      	movs	r0, r4
 8003d40:	2207      	movs	r2, #7
 8003d42:	300b      	adds	r0, #11
 8003d44:	1d23      	adds	r3, r4, #4
 8003d46:	4390      	bics	r0, r2
 8003d48:	1ac2      	subs	r2, r0, r3
 8003d4a:	4298      	cmp	r0, r3
 8003d4c:	d0df      	beq.n	8003d0e <_malloc_r+0x86>
 8003d4e:	1a1b      	subs	r3, r3, r0
 8003d50:	50a3      	str	r3, [r4, r2]
 8003d52:	e7dc      	b.n	8003d0e <_malloc_r+0x86>
 8003d54:	605a      	str	r2, [r3, #4]
 8003d56:	e7ef      	b.n	8003d38 <_malloc_r+0xb0>
 8003d58:	0023      	movs	r3, r4
 8003d5a:	6864      	ldr	r4, [r4, #4]
 8003d5c:	e7a6      	b.n	8003cac <_malloc_r+0x24>
 8003d5e:	9c00      	ldr	r4, [sp, #0]
 8003d60:	6863      	ldr	r3, [r4, #4]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	e7ad      	b.n	8003cc2 <_malloc_r+0x3a>
 8003d66:	001a      	movs	r2, r3
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	42a3      	cmp	r3, r4
 8003d6c:	d1fb      	bne.n	8003d66 <_malloc_r+0xde>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e7da      	b.n	8003d28 <_malloc_r+0xa0>
 8003d72:	230c      	movs	r3, #12
 8003d74:	0028      	movs	r0, r5
 8003d76:	602b      	str	r3, [r5, #0]
 8003d78:	f000 f98a 	bl	8004090 <__malloc_unlock>
 8003d7c:	e7c6      	b.n	8003d0c <_malloc_r+0x84>
 8003d7e:	6007      	str	r7, [r0, #0]
 8003d80:	e7da      	b.n	8003d38 <_malloc_r+0xb0>
 8003d82:	46c0      	nop			@ (mov r8, r8)
 8003d84:	20000674 	.word	0x20000674

08003d88 <_printf_common>:
 8003d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d8a:	0016      	movs	r6, r2
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	688a      	ldr	r2, [r1, #8]
 8003d90:	690b      	ldr	r3, [r1, #16]
 8003d92:	000c      	movs	r4, r1
 8003d94:	9000      	str	r0, [sp, #0]
 8003d96:	4293      	cmp	r3, r2
 8003d98:	da00      	bge.n	8003d9c <_printf_common+0x14>
 8003d9a:	0013      	movs	r3, r2
 8003d9c:	0022      	movs	r2, r4
 8003d9e:	6033      	str	r3, [r6, #0]
 8003da0:	3243      	adds	r2, #67	@ 0x43
 8003da2:	7812      	ldrb	r2, [r2, #0]
 8003da4:	2a00      	cmp	r2, #0
 8003da6:	d001      	beq.n	8003dac <_printf_common+0x24>
 8003da8:	3301      	adds	r3, #1
 8003daa:	6033      	str	r3, [r6, #0]
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	069b      	lsls	r3, r3, #26
 8003db0:	d502      	bpl.n	8003db8 <_printf_common+0x30>
 8003db2:	6833      	ldr	r3, [r6, #0]
 8003db4:	3302      	adds	r3, #2
 8003db6:	6033      	str	r3, [r6, #0]
 8003db8:	6822      	ldr	r2, [r4, #0]
 8003dba:	2306      	movs	r3, #6
 8003dbc:	0015      	movs	r5, r2
 8003dbe:	401d      	ands	r5, r3
 8003dc0:	421a      	tst	r2, r3
 8003dc2:	d027      	beq.n	8003e14 <_printf_common+0x8c>
 8003dc4:	0023      	movs	r3, r4
 8003dc6:	3343      	adds	r3, #67	@ 0x43
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	1e5a      	subs	r2, r3, #1
 8003dcc:	4193      	sbcs	r3, r2
 8003dce:	6822      	ldr	r2, [r4, #0]
 8003dd0:	0692      	lsls	r2, r2, #26
 8003dd2:	d430      	bmi.n	8003e36 <_printf_common+0xae>
 8003dd4:	0022      	movs	r2, r4
 8003dd6:	9901      	ldr	r1, [sp, #4]
 8003dd8:	9800      	ldr	r0, [sp, #0]
 8003dda:	9d08      	ldr	r5, [sp, #32]
 8003ddc:	3243      	adds	r2, #67	@ 0x43
 8003dde:	47a8      	blx	r5
 8003de0:	3001      	adds	r0, #1
 8003de2:	d025      	beq.n	8003e30 <_printf_common+0xa8>
 8003de4:	2206      	movs	r2, #6
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	2500      	movs	r5, #0
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d105      	bne.n	8003dfc <_printf_common+0x74>
 8003df0:	6833      	ldr	r3, [r6, #0]
 8003df2:	68e5      	ldr	r5, [r4, #12]
 8003df4:	1aed      	subs	r5, r5, r3
 8003df6:	43eb      	mvns	r3, r5
 8003df8:	17db      	asrs	r3, r3, #31
 8003dfa:	401d      	ands	r5, r3
 8003dfc:	68a3      	ldr	r3, [r4, #8]
 8003dfe:	6922      	ldr	r2, [r4, #16]
 8003e00:	4293      	cmp	r3, r2
 8003e02:	dd01      	ble.n	8003e08 <_printf_common+0x80>
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	18ed      	adds	r5, r5, r3
 8003e08:	2600      	movs	r6, #0
 8003e0a:	42b5      	cmp	r5, r6
 8003e0c:	d120      	bne.n	8003e50 <_printf_common+0xc8>
 8003e0e:	2000      	movs	r0, #0
 8003e10:	e010      	b.n	8003e34 <_printf_common+0xac>
 8003e12:	3501      	adds	r5, #1
 8003e14:	68e3      	ldr	r3, [r4, #12]
 8003e16:	6832      	ldr	r2, [r6, #0]
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	42ab      	cmp	r3, r5
 8003e1c:	ddd2      	ble.n	8003dc4 <_printf_common+0x3c>
 8003e1e:	0022      	movs	r2, r4
 8003e20:	2301      	movs	r3, #1
 8003e22:	9901      	ldr	r1, [sp, #4]
 8003e24:	9800      	ldr	r0, [sp, #0]
 8003e26:	9f08      	ldr	r7, [sp, #32]
 8003e28:	3219      	adds	r2, #25
 8003e2a:	47b8      	blx	r7
 8003e2c:	3001      	adds	r0, #1
 8003e2e:	d1f0      	bne.n	8003e12 <_printf_common+0x8a>
 8003e30:	2001      	movs	r0, #1
 8003e32:	4240      	negs	r0, r0
 8003e34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e36:	2030      	movs	r0, #48	@ 0x30
 8003e38:	18e1      	adds	r1, r4, r3
 8003e3a:	3143      	adds	r1, #67	@ 0x43
 8003e3c:	7008      	strb	r0, [r1, #0]
 8003e3e:	0021      	movs	r1, r4
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	3145      	adds	r1, #69	@ 0x45
 8003e44:	7809      	ldrb	r1, [r1, #0]
 8003e46:	18a2      	adds	r2, r4, r2
 8003e48:	3243      	adds	r2, #67	@ 0x43
 8003e4a:	3302      	adds	r3, #2
 8003e4c:	7011      	strb	r1, [r2, #0]
 8003e4e:	e7c1      	b.n	8003dd4 <_printf_common+0x4c>
 8003e50:	0022      	movs	r2, r4
 8003e52:	2301      	movs	r3, #1
 8003e54:	9901      	ldr	r1, [sp, #4]
 8003e56:	9800      	ldr	r0, [sp, #0]
 8003e58:	9f08      	ldr	r7, [sp, #32]
 8003e5a:	321a      	adds	r2, #26
 8003e5c:	47b8      	blx	r7
 8003e5e:	3001      	adds	r0, #1
 8003e60:	d0e6      	beq.n	8003e30 <_printf_common+0xa8>
 8003e62:	3601      	adds	r6, #1
 8003e64:	e7d1      	b.n	8003e0a <_printf_common+0x82>
	...

08003e68 <_printf_i>:
 8003e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e6a:	b08b      	sub	sp, #44	@ 0x2c
 8003e6c:	9206      	str	r2, [sp, #24]
 8003e6e:	000a      	movs	r2, r1
 8003e70:	3243      	adds	r2, #67	@ 0x43
 8003e72:	9307      	str	r3, [sp, #28]
 8003e74:	9005      	str	r0, [sp, #20]
 8003e76:	9203      	str	r2, [sp, #12]
 8003e78:	7e0a      	ldrb	r2, [r1, #24]
 8003e7a:	000c      	movs	r4, r1
 8003e7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003e7e:	2a78      	cmp	r2, #120	@ 0x78
 8003e80:	d809      	bhi.n	8003e96 <_printf_i+0x2e>
 8003e82:	2a62      	cmp	r2, #98	@ 0x62
 8003e84:	d80b      	bhi.n	8003e9e <_printf_i+0x36>
 8003e86:	2a00      	cmp	r2, #0
 8003e88:	d100      	bne.n	8003e8c <_printf_i+0x24>
 8003e8a:	e0ba      	b.n	8004002 <_printf_i+0x19a>
 8003e8c:	497a      	ldr	r1, [pc, #488]	@ (8004078 <_printf_i+0x210>)
 8003e8e:	9104      	str	r1, [sp, #16]
 8003e90:	2a58      	cmp	r2, #88	@ 0x58
 8003e92:	d100      	bne.n	8003e96 <_printf_i+0x2e>
 8003e94:	e08e      	b.n	8003fb4 <_printf_i+0x14c>
 8003e96:	0025      	movs	r5, r4
 8003e98:	3542      	adds	r5, #66	@ 0x42
 8003e9a:	702a      	strb	r2, [r5, #0]
 8003e9c:	e022      	b.n	8003ee4 <_printf_i+0x7c>
 8003e9e:	0010      	movs	r0, r2
 8003ea0:	3863      	subs	r0, #99	@ 0x63
 8003ea2:	2815      	cmp	r0, #21
 8003ea4:	d8f7      	bhi.n	8003e96 <_printf_i+0x2e>
 8003ea6:	f7fc f92f 	bl	8000108 <__gnu_thumb1_case_shi>
 8003eaa:	0016      	.short	0x0016
 8003eac:	fff6001f 	.word	0xfff6001f
 8003eb0:	fff6fff6 	.word	0xfff6fff6
 8003eb4:	001ffff6 	.word	0x001ffff6
 8003eb8:	fff6fff6 	.word	0xfff6fff6
 8003ebc:	fff6fff6 	.word	0xfff6fff6
 8003ec0:	0036009f 	.word	0x0036009f
 8003ec4:	fff6007e 	.word	0xfff6007e
 8003ec8:	00b0fff6 	.word	0x00b0fff6
 8003ecc:	0036fff6 	.word	0x0036fff6
 8003ed0:	fff6fff6 	.word	0xfff6fff6
 8003ed4:	0082      	.short	0x0082
 8003ed6:	0025      	movs	r5, r4
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	3542      	adds	r5, #66	@ 0x42
 8003edc:	1d11      	adds	r1, r2, #4
 8003ede:	6019      	str	r1, [r3, #0]
 8003ee0:	6813      	ldr	r3, [r2, #0]
 8003ee2:	702b      	strb	r3, [r5, #0]
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e09e      	b.n	8004026 <_printf_i+0x1be>
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	6809      	ldr	r1, [r1, #0]
 8003eec:	1d02      	adds	r2, r0, #4
 8003eee:	060d      	lsls	r5, r1, #24
 8003ef0:	d50b      	bpl.n	8003f0a <_printf_i+0xa2>
 8003ef2:	6806      	ldr	r6, [r0, #0]
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	2e00      	cmp	r6, #0
 8003ef8:	da03      	bge.n	8003f02 <_printf_i+0x9a>
 8003efa:	232d      	movs	r3, #45	@ 0x2d
 8003efc:	9a03      	ldr	r2, [sp, #12]
 8003efe:	4276      	negs	r6, r6
 8003f00:	7013      	strb	r3, [r2, #0]
 8003f02:	4b5d      	ldr	r3, [pc, #372]	@ (8004078 <_printf_i+0x210>)
 8003f04:	270a      	movs	r7, #10
 8003f06:	9304      	str	r3, [sp, #16]
 8003f08:	e018      	b.n	8003f3c <_printf_i+0xd4>
 8003f0a:	6806      	ldr	r6, [r0, #0]
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	0649      	lsls	r1, r1, #25
 8003f10:	d5f1      	bpl.n	8003ef6 <_printf_i+0x8e>
 8003f12:	b236      	sxth	r6, r6
 8003f14:	e7ef      	b.n	8003ef6 <_printf_i+0x8e>
 8003f16:	6808      	ldr	r0, [r1, #0]
 8003f18:	6819      	ldr	r1, [r3, #0]
 8003f1a:	c940      	ldmia	r1!, {r6}
 8003f1c:	0605      	lsls	r5, r0, #24
 8003f1e:	d402      	bmi.n	8003f26 <_printf_i+0xbe>
 8003f20:	0640      	lsls	r0, r0, #25
 8003f22:	d500      	bpl.n	8003f26 <_printf_i+0xbe>
 8003f24:	b2b6      	uxth	r6, r6
 8003f26:	6019      	str	r1, [r3, #0]
 8003f28:	4b53      	ldr	r3, [pc, #332]	@ (8004078 <_printf_i+0x210>)
 8003f2a:	270a      	movs	r7, #10
 8003f2c:	9304      	str	r3, [sp, #16]
 8003f2e:	2a6f      	cmp	r2, #111	@ 0x6f
 8003f30:	d100      	bne.n	8003f34 <_printf_i+0xcc>
 8003f32:	3f02      	subs	r7, #2
 8003f34:	0023      	movs	r3, r4
 8003f36:	2200      	movs	r2, #0
 8003f38:	3343      	adds	r3, #67	@ 0x43
 8003f3a:	701a      	strb	r2, [r3, #0]
 8003f3c:	6863      	ldr	r3, [r4, #4]
 8003f3e:	60a3      	str	r3, [r4, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	db06      	blt.n	8003f52 <_printf_i+0xea>
 8003f44:	2104      	movs	r1, #4
 8003f46:	6822      	ldr	r2, [r4, #0]
 8003f48:	9d03      	ldr	r5, [sp, #12]
 8003f4a:	438a      	bics	r2, r1
 8003f4c:	6022      	str	r2, [r4, #0]
 8003f4e:	4333      	orrs	r3, r6
 8003f50:	d00c      	beq.n	8003f6c <_printf_i+0x104>
 8003f52:	9d03      	ldr	r5, [sp, #12]
 8003f54:	0030      	movs	r0, r6
 8003f56:	0039      	movs	r1, r7
 8003f58:	f7fc f966 	bl	8000228 <__aeabi_uidivmod>
 8003f5c:	9b04      	ldr	r3, [sp, #16]
 8003f5e:	3d01      	subs	r5, #1
 8003f60:	5c5b      	ldrb	r3, [r3, r1]
 8003f62:	702b      	strb	r3, [r5, #0]
 8003f64:	0033      	movs	r3, r6
 8003f66:	0006      	movs	r6, r0
 8003f68:	429f      	cmp	r7, r3
 8003f6a:	d9f3      	bls.n	8003f54 <_printf_i+0xec>
 8003f6c:	2f08      	cmp	r7, #8
 8003f6e:	d109      	bne.n	8003f84 <_printf_i+0x11c>
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	07db      	lsls	r3, r3, #31
 8003f74:	d506      	bpl.n	8003f84 <_printf_i+0x11c>
 8003f76:	6862      	ldr	r2, [r4, #4]
 8003f78:	6923      	ldr	r3, [r4, #16]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	dc02      	bgt.n	8003f84 <_printf_i+0x11c>
 8003f7e:	2330      	movs	r3, #48	@ 0x30
 8003f80:	3d01      	subs	r5, #1
 8003f82:	702b      	strb	r3, [r5, #0]
 8003f84:	9b03      	ldr	r3, [sp, #12]
 8003f86:	1b5b      	subs	r3, r3, r5
 8003f88:	6123      	str	r3, [r4, #16]
 8003f8a:	9b07      	ldr	r3, [sp, #28]
 8003f8c:	0021      	movs	r1, r4
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	9805      	ldr	r0, [sp, #20]
 8003f92:	9b06      	ldr	r3, [sp, #24]
 8003f94:	aa09      	add	r2, sp, #36	@ 0x24
 8003f96:	f7ff fef7 	bl	8003d88 <_printf_common>
 8003f9a:	3001      	adds	r0, #1
 8003f9c:	d148      	bne.n	8004030 <_printf_i+0x1c8>
 8003f9e:	2001      	movs	r0, #1
 8003fa0:	4240      	negs	r0, r0
 8003fa2:	b00b      	add	sp, #44	@ 0x2c
 8003fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	6809      	ldr	r1, [r1, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	6022      	str	r2, [r4, #0]
 8003fae:	2278      	movs	r2, #120	@ 0x78
 8003fb0:	4932      	ldr	r1, [pc, #200]	@ (800407c <_printf_i+0x214>)
 8003fb2:	9104      	str	r1, [sp, #16]
 8003fb4:	0021      	movs	r1, r4
 8003fb6:	3145      	adds	r1, #69	@ 0x45
 8003fb8:	700a      	strb	r2, [r1, #0]
 8003fba:	6819      	ldr	r1, [r3, #0]
 8003fbc:	6822      	ldr	r2, [r4, #0]
 8003fbe:	c940      	ldmia	r1!, {r6}
 8003fc0:	0610      	lsls	r0, r2, #24
 8003fc2:	d402      	bmi.n	8003fca <_printf_i+0x162>
 8003fc4:	0650      	lsls	r0, r2, #25
 8003fc6:	d500      	bpl.n	8003fca <_printf_i+0x162>
 8003fc8:	b2b6      	uxth	r6, r6
 8003fca:	6019      	str	r1, [r3, #0]
 8003fcc:	07d3      	lsls	r3, r2, #31
 8003fce:	d502      	bpl.n	8003fd6 <_printf_i+0x16e>
 8003fd0:	2320      	movs	r3, #32
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	2e00      	cmp	r6, #0
 8003fd8:	d001      	beq.n	8003fde <_printf_i+0x176>
 8003fda:	2710      	movs	r7, #16
 8003fdc:	e7aa      	b.n	8003f34 <_printf_i+0xcc>
 8003fde:	2220      	movs	r2, #32
 8003fe0:	6823      	ldr	r3, [r4, #0]
 8003fe2:	4393      	bics	r3, r2
 8003fe4:	6023      	str	r3, [r4, #0]
 8003fe6:	e7f8      	b.n	8003fda <_printf_i+0x172>
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	680d      	ldr	r5, [r1, #0]
 8003fec:	1d10      	adds	r0, r2, #4
 8003fee:	6949      	ldr	r1, [r1, #20]
 8003ff0:	6018      	str	r0, [r3, #0]
 8003ff2:	6813      	ldr	r3, [r2, #0]
 8003ff4:	062e      	lsls	r6, r5, #24
 8003ff6:	d501      	bpl.n	8003ffc <_printf_i+0x194>
 8003ff8:	6019      	str	r1, [r3, #0]
 8003ffa:	e002      	b.n	8004002 <_printf_i+0x19a>
 8003ffc:	066d      	lsls	r5, r5, #25
 8003ffe:	d5fb      	bpl.n	8003ff8 <_printf_i+0x190>
 8004000:	8019      	strh	r1, [r3, #0]
 8004002:	2300      	movs	r3, #0
 8004004:	9d03      	ldr	r5, [sp, #12]
 8004006:	6123      	str	r3, [r4, #16]
 8004008:	e7bf      	b.n	8003f8a <_printf_i+0x122>
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	1d11      	adds	r1, r2, #4
 800400e:	6019      	str	r1, [r3, #0]
 8004010:	6815      	ldr	r5, [r2, #0]
 8004012:	2100      	movs	r1, #0
 8004014:	0028      	movs	r0, r5
 8004016:	6862      	ldr	r2, [r4, #4]
 8004018:	f000 f896 	bl	8004148 <memchr>
 800401c:	2800      	cmp	r0, #0
 800401e:	d001      	beq.n	8004024 <_printf_i+0x1bc>
 8004020:	1b40      	subs	r0, r0, r5
 8004022:	6060      	str	r0, [r4, #4]
 8004024:	6863      	ldr	r3, [r4, #4]
 8004026:	6123      	str	r3, [r4, #16]
 8004028:	2300      	movs	r3, #0
 800402a:	9a03      	ldr	r2, [sp, #12]
 800402c:	7013      	strb	r3, [r2, #0]
 800402e:	e7ac      	b.n	8003f8a <_printf_i+0x122>
 8004030:	002a      	movs	r2, r5
 8004032:	6923      	ldr	r3, [r4, #16]
 8004034:	9906      	ldr	r1, [sp, #24]
 8004036:	9805      	ldr	r0, [sp, #20]
 8004038:	9d07      	ldr	r5, [sp, #28]
 800403a:	47a8      	blx	r5
 800403c:	3001      	adds	r0, #1
 800403e:	d0ae      	beq.n	8003f9e <_printf_i+0x136>
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	079b      	lsls	r3, r3, #30
 8004044:	d415      	bmi.n	8004072 <_printf_i+0x20a>
 8004046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004048:	68e0      	ldr	r0, [r4, #12]
 800404a:	4298      	cmp	r0, r3
 800404c:	daa9      	bge.n	8003fa2 <_printf_i+0x13a>
 800404e:	0018      	movs	r0, r3
 8004050:	e7a7      	b.n	8003fa2 <_printf_i+0x13a>
 8004052:	0022      	movs	r2, r4
 8004054:	2301      	movs	r3, #1
 8004056:	9906      	ldr	r1, [sp, #24]
 8004058:	9805      	ldr	r0, [sp, #20]
 800405a:	9e07      	ldr	r6, [sp, #28]
 800405c:	3219      	adds	r2, #25
 800405e:	47b0      	blx	r6
 8004060:	3001      	adds	r0, #1
 8004062:	d09c      	beq.n	8003f9e <_printf_i+0x136>
 8004064:	3501      	adds	r5, #1
 8004066:	68e3      	ldr	r3, [r4, #12]
 8004068:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	42ab      	cmp	r3, r5
 800406e:	dcf0      	bgt.n	8004052 <_printf_i+0x1ea>
 8004070:	e7e9      	b.n	8004046 <_printf_i+0x1de>
 8004072:	2500      	movs	r5, #0
 8004074:	e7f7      	b.n	8004066 <_printf_i+0x1fe>
 8004076:	46c0      	nop			@ (mov r8, r8)
 8004078:	0800427d 	.word	0x0800427d
 800407c:	0800428e 	.word	0x0800428e

08004080 <__malloc_lock>:
 8004080:	b510      	push	{r4, lr}
 8004082:	4802      	ldr	r0, [pc, #8]	@ (800408c <__malloc_lock+0xc>)
 8004084:	f7ff fc7e 	bl	8003984 <__retarget_lock_acquire_recursive>
 8004088:	bd10      	pop	{r4, pc}
 800408a:	46c0      	nop			@ (mov r8, r8)
 800408c:	2000066c 	.word	0x2000066c

08004090 <__malloc_unlock>:
 8004090:	b510      	push	{r4, lr}
 8004092:	4802      	ldr	r0, [pc, #8]	@ (800409c <__malloc_unlock+0xc>)
 8004094:	f7ff fc77 	bl	8003986 <__retarget_lock_release_recursive>
 8004098:	bd10      	pop	{r4, pc}
 800409a:	46c0      	nop			@ (mov r8, r8)
 800409c:	2000066c 	.word	0x2000066c

080040a0 <_realloc_r>:
 80040a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040a2:	0006      	movs	r6, r0
 80040a4:	000c      	movs	r4, r1
 80040a6:	0015      	movs	r5, r2
 80040a8:	2900      	cmp	r1, #0
 80040aa:	d105      	bne.n	80040b8 <_realloc_r+0x18>
 80040ac:	0011      	movs	r1, r2
 80040ae:	f7ff fdeb 	bl	8003c88 <_malloc_r>
 80040b2:	0004      	movs	r4, r0
 80040b4:	0020      	movs	r0, r4
 80040b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80040b8:	2a00      	cmp	r2, #0
 80040ba:	d103      	bne.n	80040c4 <_realloc_r+0x24>
 80040bc:	f000 f858 	bl	8004170 <_free_r>
 80040c0:	002c      	movs	r4, r5
 80040c2:	e7f7      	b.n	80040b4 <_realloc_r+0x14>
 80040c4:	f000 f89e 	bl	8004204 <_malloc_usable_size_r>
 80040c8:	0007      	movs	r7, r0
 80040ca:	4285      	cmp	r5, r0
 80040cc:	d802      	bhi.n	80040d4 <_realloc_r+0x34>
 80040ce:	0843      	lsrs	r3, r0, #1
 80040d0:	42ab      	cmp	r3, r5
 80040d2:	d3ef      	bcc.n	80040b4 <_realloc_r+0x14>
 80040d4:	0029      	movs	r1, r5
 80040d6:	0030      	movs	r0, r6
 80040d8:	f7ff fdd6 	bl	8003c88 <_malloc_r>
 80040dc:	9001      	str	r0, [sp, #4]
 80040de:	2800      	cmp	r0, #0
 80040e0:	d101      	bne.n	80040e6 <_realloc_r+0x46>
 80040e2:	9c01      	ldr	r4, [sp, #4]
 80040e4:	e7e6      	b.n	80040b4 <_realloc_r+0x14>
 80040e6:	002a      	movs	r2, r5
 80040e8:	42bd      	cmp	r5, r7
 80040ea:	d900      	bls.n	80040ee <_realloc_r+0x4e>
 80040ec:	003a      	movs	r2, r7
 80040ee:	0021      	movs	r1, r4
 80040f0:	9801      	ldr	r0, [sp, #4]
 80040f2:	f000 f834 	bl	800415e <memcpy>
 80040f6:	0021      	movs	r1, r4
 80040f8:	0030      	movs	r0, r6
 80040fa:	f000 f839 	bl	8004170 <_free_r>
 80040fe:	e7f0      	b.n	80040e2 <_realloc_r+0x42>

08004100 <memmove>:
 8004100:	b510      	push	{r4, lr}
 8004102:	4288      	cmp	r0, r1
 8004104:	d902      	bls.n	800410c <memmove+0xc>
 8004106:	188b      	adds	r3, r1, r2
 8004108:	4298      	cmp	r0, r3
 800410a:	d308      	bcc.n	800411e <memmove+0x1e>
 800410c:	2300      	movs	r3, #0
 800410e:	429a      	cmp	r2, r3
 8004110:	d007      	beq.n	8004122 <memmove+0x22>
 8004112:	5ccc      	ldrb	r4, [r1, r3]
 8004114:	54c4      	strb	r4, [r0, r3]
 8004116:	3301      	adds	r3, #1
 8004118:	e7f9      	b.n	800410e <memmove+0xe>
 800411a:	5c8b      	ldrb	r3, [r1, r2]
 800411c:	5483      	strb	r3, [r0, r2]
 800411e:	3a01      	subs	r2, #1
 8004120:	d2fb      	bcs.n	800411a <memmove+0x1a>
 8004122:	bd10      	pop	{r4, pc}

08004124 <_sbrk_r>:
 8004124:	2300      	movs	r3, #0
 8004126:	b570      	push	{r4, r5, r6, lr}
 8004128:	4d06      	ldr	r5, [pc, #24]	@ (8004144 <_sbrk_r+0x20>)
 800412a:	0004      	movs	r4, r0
 800412c:	0008      	movs	r0, r1
 800412e:	602b      	str	r3, [r5, #0]
 8004130:	f7fc fed4 	bl	8000edc <_sbrk>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d103      	bne.n	8004140 <_sbrk_r+0x1c>
 8004138:	682b      	ldr	r3, [r5, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d000      	beq.n	8004140 <_sbrk_r+0x1c>
 800413e:	6023      	str	r3, [r4, #0]
 8004140:	bd70      	pop	{r4, r5, r6, pc}
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	20000678 	.word	0x20000678

08004148 <memchr>:
 8004148:	b2c9      	uxtb	r1, r1
 800414a:	1882      	adds	r2, r0, r2
 800414c:	4290      	cmp	r0, r2
 800414e:	d101      	bne.n	8004154 <memchr+0xc>
 8004150:	2000      	movs	r0, #0
 8004152:	4770      	bx	lr
 8004154:	7803      	ldrb	r3, [r0, #0]
 8004156:	428b      	cmp	r3, r1
 8004158:	d0fb      	beq.n	8004152 <memchr+0xa>
 800415a:	3001      	adds	r0, #1
 800415c:	e7f6      	b.n	800414c <memchr+0x4>

0800415e <memcpy>:
 800415e:	2300      	movs	r3, #0
 8004160:	b510      	push	{r4, lr}
 8004162:	429a      	cmp	r2, r3
 8004164:	d100      	bne.n	8004168 <memcpy+0xa>
 8004166:	bd10      	pop	{r4, pc}
 8004168:	5ccc      	ldrb	r4, [r1, r3]
 800416a:	54c4      	strb	r4, [r0, r3]
 800416c:	3301      	adds	r3, #1
 800416e:	e7f8      	b.n	8004162 <memcpy+0x4>

08004170 <_free_r>:
 8004170:	b570      	push	{r4, r5, r6, lr}
 8004172:	0005      	movs	r5, r0
 8004174:	1e0c      	subs	r4, r1, #0
 8004176:	d010      	beq.n	800419a <_free_r+0x2a>
 8004178:	3c04      	subs	r4, #4
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	da00      	bge.n	8004182 <_free_r+0x12>
 8004180:	18e4      	adds	r4, r4, r3
 8004182:	0028      	movs	r0, r5
 8004184:	f7ff ff7c 	bl	8004080 <__malloc_lock>
 8004188:	4a1d      	ldr	r2, [pc, #116]	@ (8004200 <_free_r+0x90>)
 800418a:	6813      	ldr	r3, [r2, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d105      	bne.n	800419c <_free_r+0x2c>
 8004190:	6063      	str	r3, [r4, #4]
 8004192:	6014      	str	r4, [r2, #0]
 8004194:	0028      	movs	r0, r5
 8004196:	f7ff ff7b 	bl	8004090 <__malloc_unlock>
 800419a:	bd70      	pop	{r4, r5, r6, pc}
 800419c:	42a3      	cmp	r3, r4
 800419e:	d908      	bls.n	80041b2 <_free_r+0x42>
 80041a0:	6820      	ldr	r0, [r4, #0]
 80041a2:	1821      	adds	r1, r4, r0
 80041a4:	428b      	cmp	r3, r1
 80041a6:	d1f3      	bne.n	8004190 <_free_r+0x20>
 80041a8:	6819      	ldr	r1, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	1809      	adds	r1, r1, r0
 80041ae:	6021      	str	r1, [r4, #0]
 80041b0:	e7ee      	b.n	8004190 <_free_r+0x20>
 80041b2:	001a      	movs	r2, r3
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <_free_r+0x4e>
 80041ba:	42a3      	cmp	r3, r4
 80041bc:	d9f9      	bls.n	80041b2 <_free_r+0x42>
 80041be:	6811      	ldr	r1, [r2, #0]
 80041c0:	1850      	adds	r0, r2, r1
 80041c2:	42a0      	cmp	r0, r4
 80041c4:	d10b      	bne.n	80041de <_free_r+0x6e>
 80041c6:	6820      	ldr	r0, [r4, #0]
 80041c8:	1809      	adds	r1, r1, r0
 80041ca:	1850      	adds	r0, r2, r1
 80041cc:	6011      	str	r1, [r2, #0]
 80041ce:	4283      	cmp	r3, r0
 80041d0:	d1e0      	bne.n	8004194 <_free_r+0x24>
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	1841      	adds	r1, r0, r1
 80041d8:	6011      	str	r1, [r2, #0]
 80041da:	6053      	str	r3, [r2, #4]
 80041dc:	e7da      	b.n	8004194 <_free_r+0x24>
 80041de:	42a0      	cmp	r0, r4
 80041e0:	d902      	bls.n	80041e8 <_free_r+0x78>
 80041e2:	230c      	movs	r3, #12
 80041e4:	602b      	str	r3, [r5, #0]
 80041e6:	e7d5      	b.n	8004194 <_free_r+0x24>
 80041e8:	6820      	ldr	r0, [r4, #0]
 80041ea:	1821      	adds	r1, r4, r0
 80041ec:	428b      	cmp	r3, r1
 80041ee:	d103      	bne.n	80041f8 <_free_r+0x88>
 80041f0:	6819      	ldr	r1, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	1809      	adds	r1, r1, r0
 80041f6:	6021      	str	r1, [r4, #0]
 80041f8:	6063      	str	r3, [r4, #4]
 80041fa:	6054      	str	r4, [r2, #4]
 80041fc:	e7ca      	b.n	8004194 <_free_r+0x24>
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	20000674 	.word	0x20000674

08004204 <_malloc_usable_size_r>:
 8004204:	1f0b      	subs	r3, r1, #4
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	1f18      	subs	r0, r3, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	da01      	bge.n	8004212 <_malloc_usable_size_r+0xe>
 800420e:	580b      	ldr	r3, [r1, r0]
 8004210:	18c0      	adds	r0, r0, r3
 8004212:	4770      	bx	lr

08004214 <_init>:
 8004214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004216:	46c0      	nop			@ (mov r8, r8)
 8004218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421a:	bc08      	pop	{r3}
 800421c:	469e      	mov	lr, r3
 800421e:	4770      	bx	lr

08004220 <_fini>:
 8004220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004222:	46c0      	nop			@ (mov r8, r8)
 8004224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004226:	bc08      	pop	{r3}
 8004228:	469e      	mov	lr, r3
 800422a:	4770      	bx	lr
